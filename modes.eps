%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: modes.pdf
%%Creator: (Adobe Acrobat 15.6.0)
%%For: rustam
%%CreationDate: 10/8/18, 10:34 PM
%%BoundingBox: 0 0 1080 360
%%HiResBoundingBox: 0 0 1080 360
%%CropBox: 0 0 1080 360
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 738 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2018-10-09T02:33:44Z"
   xmp:CreatorTool="PowerPoint"
   xmp:ModifyDate="2018-10-09T02:33:44Z"
   pdf:Keywords=""
   pdf:Producer="Mac OS X 10.13.6 Quartz PDFContext"
   dc:format="application/pdf">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">modes</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -360 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 360 li
1080 360 li
1080 0 li
cp
clp
gsave
0 360 mo
1080 360 li
1080 0 li
0 0 li
cp
clp
0 360 mo
1080 360 li
1080 0 li
0 0 li
cp
false sop
0 0 0 0 cmyk
f
0 360 mo
1080 360 li
1080 0 li
0 0 li
cp
f
2.25 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
405.198 287.337 mo
359.217 326.739 265.902 337.435 196.771 311.228 cv
182.319 305.749 169.641 298.885 159.298 290.94 cv
280.027 239.884 li
cp
.895628 .7673 0 0 cmyk
@
281.03 88.5066 mo
349.456 106.013 404.925 188.619 404.924 273.014 cv
404.924 277.9 404.734 282.735 404.355 287.502 cv
281.028 241.316 li
cp
.15848 1 1 .0960708 cmyk
28575 lw
gsave
[-2.76352e-05 -7.37313e-05 7.37313e-05 -2.76352e-05 227.119 433.149 ]ct
@
grestore newpath
280.428 239.146 mo
453.634 305.337 li
452.831 307.439 li
279.625 241.248 li
cp
453.232 306.388 mo
451.036 299.527 li
459.537 308.797 li
447.02 310.036 li
cp
.518151 .434821 .434821 .0814221 cmyk
f
278.902 240.197 mo
278.902 53.3642 li
281.152 53.3642 li
281.152 240.197 li
cp
280.027 53.3641 mo
274.402 57.8641 li
280.027 46.6141 li
285.652 57.8641 li
cp
f
279.59 239.16 mo
91.8526 318.123 li
92.725 320.197 li
280.463 241.234 li
cp
92.2896 319.16 mo
94.2568 312.23 li
86.0676 321.777 li
98.6184 322.6 li
cp
f
%ADOBeginSubsetFont: JAAAAA+GillSansMT Initial
ct_T42Dict begin
-0.16 -0.281 1.039 0.918
 256 array 0 1 255 {1 index exch /.notdef put} for  /JAAAAA+GillSansMT
Type42DictBegin
[<00010000000b000b000b000b6376742000000000000000bc000001e46670
676d00000000000002a000000569676c79660000000000000c4400000e64
68656164000000000000080c000000366868656100000000000008440000
0024686d74780000000000000868000000606c6f636100000000000008c8
000000326d61787000000000000008fc000000206e616d65000000000000
091c00000024707265700000000000000940000003036764697200000000
000000000000000005750014000005750014000000000000000000000000
00000000000000000398001400000000ffec00000000ffec000000000000
0000fe290000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000080000000800000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000cf000000c8000000b80000
00b8000000ba0000000000000000000000000000000000000000000000be
000000b9009600a4009800a4007300000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000f4
00f40000000000000000009a009a005c005c007d007d004c004c026a02ab
008302fa0344008f00b600aa005c009c00c1007300e90073027000ba0156
012e00d300d3008c007d004c010200a00068007402ac009e00680074007a
02d7007000c500ab00a20262024e020e009601e301b202700096036e0289
02b40258020d020a00a000b0403a393837363534333231302f2e2d2c2b2a
292827262524232221201f1e1d1c1b1a191817161514131211100f0e0d0c
0b0a090807060504030201002c01b0184358b119072b1b212121592d2c01
b0184358b11a072b1b212121592d2c01b0184358b0032510f221b000121b
212121592d2c01b0184358b11b072b1b212121592d2c01b0184358b11c07
2b1b212121592d2c01b0184358b11d072b1b212121592d2c01b0184358b1
1e072b1b212121592d2c4eb00014b046234344b0032510b10046e6b00013
b00114b00010f221b001134db000122d2c01b018435845646a234569b019
43646060b0462344231020b046f02fb000121b21212121592d2c01b10b0a
432343650a2d2c00b10a0b4323430b2d2c00b0462370b101463e01b04623
70b10246453ab10200080d2d2cb0122bb0022545b00225456ab0408b60b0
022523442121212d2cb0132bb0022545b00225456ab8ffc08c60b0022523
442121212d2cb000b0122b2121212d2cb000b0132b2121212d2c01b00643
b00743650a2d2c2069b04061b0008b20b12cc08a8cb8100062602b0c6423
64615c58b00361592d2cb100032545685458b0032545b0032545606820b0
04252344b0042523441bb00325204568208a2344b00325456860b0032523
44592d2cb00325204568208a2344b00325456860b0032523442d2cb00943
588721c01bb01243588745b0112bb0472344b0477ae41b038a45186920b0
4723448a8a8720b0a05158b0112bb0472344b0477ae41b21b0477ae45959
59182d2c208a4523456860442d2c456a422d2c01182f2d2c01b00425b004
254964234564696120b080626ab00225b00225618cb0462344218a10b046
f6212d2c01b0022545b002254564606ab00325456a6120b00425456a208a
8b65b0042523448cb00325234421212d2c01456823456961b00325456a61
20b00425456a208a8b65b0042523448cb00325234421212d2c018a8a4564
2345646164422d2c01b0022543b04054b0022543b000545a58b003252045
b040614459b0022543b00054b0022543b040545a58b004252045b0406044
59212121212d2c014b525843b00225452361441b2121592d2c014b525843
b00225452360441b2121592d2c4b525845441b2121592d2c0120b0032523
49b04060b0206320b000525823b002253823b002256538008a63381b2121
21212159012d2c4b505845441b2121592d2c01b005251023208af500b001
6023edec2d2c01b005251023208af500b0016123edec2d2c01b0062510f5
00edec2d2c462346608a8a462320468a608a61b8ff8062232010238ab14b
4b8a70456020b0005058b00161b8ffba8b1bb0468c59b0106068013a2d2c
2045b003254652583f1b2111592d2c2045b003254650583f1b2111592d2c
00b00743b006430b2d2c4b5258b00425b0042549b00425b00425496120b0
005458212043b0005558591bb04054582043b0005458591b2043b0005458
1bb00325b8ffc03859595959212121212d2c4b52584365381b2121592d2c
4b525843381b2121592d2c21210c6423648bb84000622d2c21b08051580c
6423648bb82000621bb200402f2b59b002602d2c21b0c051580c6423648b
b81555621bb200802f2b59b002602d2c0c6423648bb84000626023212d2c
b4000100000015b00826b00826b00826b008260f10161345683ab001162d
2cb4000100000015b00826b00826b00826b008260f1016134568653ab001
162d2cb0134358031b02592d2cb0134358021b03592d2cb00a2b2310203c
b0172b2d2cb0282b8a102320d023b0102bb00558c01b3c59201011b00012
012d2c4b53234b515a5820458a60441b2121592d2c4b53234b515a58381b
2121592d2c01b0022510d023c901b00113b0001410b0013cb001162d2c01
b00013b001b0032549b0031738b001132d000000000100000001a6663afe
940b5f0f3cf5001b080000000000ab7897a600000000b30e9732feb4fdbe
0854075800000009000100000000000000010000076ffe2800000856feb4
feb408540001000000000000000000000000000000180800010002390000
029600520400019e0400004604000083055600000400009a0696005c036a
00370381004e0414005a03d50054036a000001c1007501c100850400007d
046a004c04000075032b008d0314005402aa000003810000021400bc0000
001500150029004200ae0133018e01c9022102ba0318035b03bc049504cb
04e90523056805af05e5068706ca071a0732000000010000001800510007
0044000400020010002f0096000002ac0303000300010000000100120001
000000000006001100004e5a52524e472b47696c6c53616e734d540040b8
60cf70cf0260cd70cd0210ef019fee0130eeafee0200ed0130e70110e401
60cb018fc10130c150c170c10310c00160c070c0022fbb3fbb4fbb0300b9
10b9020fb71fb702f183231ff083141fe583301fe183301fc383641f9391
321f95963c1f9f96af96bf96038783321f8583321f94911b1fe981311faf
7d1e1fc97f641fc77f641fbebd0d1fdf81321f817f641f7d7f321f837f1c
1f707f01107fb07fc07f03507f011e78161d77161c76161b75161a741619
73167016b8080040181d6c6f16171c6c6f171b6c6f196b6e161b6b6e7f72
1a6a14b8080040ff1d666914151c6669151b6669196568141b656885711a
9943fa219743fa219343fa219143fa218d43fa218b43fa218943fa218743
fa218543fa218343fa218143fa217f43fa217d43fa2132995c081f975d08
1f955d081f935c081f915c081f8d57081f8b57081f8957081f8758081f85
58081f8358081f8157081f7f57081f7d57081f6361081f6261081f325d5b
081f5c5b081f5856081f5756081f6155081f6055081f325b55081f565508
1f1b37151836151535151234150f33150c3215093115063015032f15002e
152c2d0f2a2b0e28290f26270e24250f22230e20210f1e1f0e1b1c1d0d18
191a0d1516170d1213140d0f10110c0c0d0e0c090a0b0c401e0607080c03
04050c0001020c1b3b081f0f3a081f0339081f0038081f503301b0124b00
4b5442b013014b004b5342b0332b4bb8080052b0322b4bb006505b58b101
018e59b0332bb00288b8010054b00488b8020054b012435a5b58b80119b1
01018e851bb0124358b900010180858d1bb900010180858d59592b1db064
4b5358b0701d59b0324b5358b0901d59002b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b012b002b2b2b2b012b2b00
2b2b2b2b2b012b2b2b2b2b2b2b2b2b002b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b012b2b2b2b2b2b2b2b2b2b2b2bb018b0324b53422b2b2b2b2b
2bb109322b4bb06452427574732b2b2b2b2b2b2b2b2b2b2b2b732b2b2b2b
2b2b2b737373737473747373737373757373730000>
[3685 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 82 3 <0001019e00000266057500030018400d03120003027f900301300301032f
715ded003f3f313001331123019ec8c80575fa8b>JAAAAA+GillSansMT AddT42Char 
1 132 4 <00010046000003ba05870019008540364a1066147a07750d791805001919
c606041406060404030f0f0c061900930312500f56127612030f0f0c9167
12011204001906030401b8ffc0401d0d10370101097d061548155f150315
150f0404200f300f400f500f040f2f5d332f11332f5ded332f2b11173300
3f5ded322f5d3fed323211332f1139870e2e2b057d10c43130015d252115
21353736123635342623220607353633321615140e010701a60214fc8c54
c5e947866f54a341a3adb7ed3b96b4c1c10e63f40154ae55768f635afe85
f4bc54bff9d7>JAAAAA+GillSansMT AddT42Char 
1 348 5 <00010083fff00364058900270097400b7b1b9b1b02640a6b1b020ab8ffd8
40560d18371b280d0e371b281111375a246b248b12a50e04121227910f01
010101190c201c301c8f1c031c1c1e91191340095009600903090907910c
01761601760f0109091c1200001c04830f0f21831616101cf01c021c2f5d
332fed332fed11392f3311332f5d5d003fed322f5d3fed332f5d1112392f
5ded39192f3130015d002b2b2b5d5d013332363534262322073536333216
151406071e0215140623222735163332363534272e012f0101710c838985
6c6d857a90c1df565e524c2af4ba9f949e95657b331e497912032d6c675d
7444bf3dcaaf6a9134205d844ab7ef4dda637863533e23210f02>JAAAAA+GillSansMT AddT42Char 
1 614 6 <0002000000000556057d0007000a007e4047f90901190016013908680804
04080909030a050606090109030381020114020201000906068107001407
07000593400a0a07090100040203060712010302be060009be2007070b11
332f1a19fd3939fd393900183f3c3c3c3f3c3312392f1aed87052e2b877d
c4872e182b877dc487103cc48710c43c015d005d31300133012303210323
010b0102588d0271cdbafdaeb0cd037de1d1057dfa83019efe62025001fa
fe06>JAAAAA+GillSansMT AddT42Char 
1 914 8 <0002005cfff0063b0589000b0017004b4035a71201a80c010c91b8000100
041291b706010613050f0a15450f4a15560359096603690908157d160301
03b8190f7d19090109b71810f65ded10fe5ded5d003f5ded3f5ded5d5d31
300120001110002120001110000522001514003332003534000348014401
affe4dfeb5fec4fe5b01a8014cf0fecb0136e9ea0139fec70589fe66fecb
fecbfe6b019501310139019abefed4e9e2fed40132e4de012f00>JAAAAA+GillSansMT AddT42Char 
1 3636 23 <000100bcfe280159057500030016400c001b010003970004050097182b2f
ed003f3f313013113311bc9dfe28074df8b3>JAAAAA+GillSansMT AddT42Char 
1 0 0 <00020100000007000600000300070000211121112521112101000600fa80
0500fb000600fa0080050000>JAAAAA+GillSansMT AddT42Char 
JAAAAA+GillSansMT /CharStrings get begin
/one 3 def
/two 4 def
/three 5 def
/A 6 def
/O 8 def
/bar 23 def
end
JAAAAA+GillSansMT /Encoding get
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 65 /A put
dup 79 /O put
dup 124 /bar put
pop
end
%ADOEndSubsetFont
/JWUHYQ+GillSansMT /JAAAAA+GillSansMT findfont ct_VMDictPut/JWUHYQ+GillSansMT*1 [49{/.notdef}rp /one /two /three 13{/.notdef}rp /A 13{/.notdef}rp /O 44{/.notdef}rp /bar 131{/.notdef}rp]JWUHYQ+GillSansMT nfJWUHYQ+GillSansMT*1 [25 0 0 -25 0 0 ]msf17.8331 335.04 mo(|AO)[6.49986 15.6252 0 ]xshJWUHYQ+GillSansMT*1 [17 0 0 -17 0 0 ]msf60.4581 340.08 mo(1)sh%ADOBeginSubsetFont: LAAAAA+CambriaMath Initial
ct_T42Dict begin
-1.473 -2.461 2.867 3.113
 256 array 0 1 255 {1 index exch /.notdef put} for  /LAAAAA+CambriaMath
Type42DictBegin
[<000100000008000800080008676c79660000000000000140000000dc6865
6164000000000000008c000000366868656100000000000000c400000024
686d747800000000000000e80000000c6c6f636100000000000000f40000
00086d61787000000000000000fc000000206e616d65000000000000011c
0000002467646972000000000000000000000000000100000006e66638ef
545c5f0f3cf5001b080000000000b9e6983d00000000d18d01e4f434ec4a
16f118ef00000009000200000000000000010000079afe390000175af434
fda416f1000100000000000000000000000000000003054400be02e0006a
02e0006a000000500066006e00010000000300c0002d0097000600020010
002f0086000009a411280003000100000001001200010000000000060012
00004454434a4f572b43616d627269614d61746800>
[221 ] AllocGlyphStorage
]def 
76 12 
PrepFor2015
Type42DictEnd
1 160 1 <0001006afe4d0264059c0006000013011501270901d5018ffe716b0141fe
bf059cfc7e4afc7d260382038300>LAAAAA+CambriaMath AddT42Char 
1 204 2 <ffff006afe4d0264059c020600010000>LAAAAA+CambriaMath AddT42Char 
1 0 0 <000400be0000048605540028002c0030003400000135343e02373e033534
2623220e020723353e0133321e0215140e02070e031d0117152335011121
1101112111023706162a2417261b0f413e2030241909603c894346633e1c
0f243c2c20261507129001fcfd060361fc3801e71616252a3527192f3339
234b521424321e821e2e1d334629263e3d462d212c27281c066ea1a1fee4
049afb6604f7faac0554>LAAAAA+CambriaMath AddT42Char 
LAAAAA+CambriaMath /CharStrings get begin
/g2 2 def
end
LAAAAA+CambriaMath /Encoding get
dup 33 /g2 put
pop
end
%ADOEndSubsetFont
/JWUHYR+CambriaMath /LAAAAA+CambriaMath findfont ct_VMDictPut/JWUHYR+CambriaMath*1 [33{/.notdef}rp /g2 222{/.notdef}rp]JWUHYR+CambriaMath nfJWUHYR+CambriaMath*1 [25 0 0 -25 0 0 ]msf68.8331 335.04 mo(!)shJWUHYQ+GillSansMT*1 [25 0 0 -25 0 0 ]msf465.922 322.32 mo(|AO)[6.49985 15.6252 0 ]xshJWUHYQ+GillSansMT*1 [17 0 0 -17 0 0 ]msf508.547 327.36 mo(2)shJWUHYR+CambriaMath*1 [25 0 0 -25 0 0 ]msf516.922 322.32 mo(!)shJWUHYQ+GillSansMT*1 [25 0 0 -25 0 0 ]msf262.027 36.48 mo(|AO)[6.49985 15.6252 0 ]xshJWUHYQ+GillSansMT*1 [17 0 0 -17 0 0 ]msf304.652 41.52 mo(3)shJWUHYR+CambriaMath*1 [25 0 0 -25 0 0 ]msf313.027 36.48 mo(!)sh.895628 .7673 0 0 cmyk
%ADOBeginSubsetFont: MAAAAA+GillSansMT-Bold Initial
ct_T42Dict begin
-0.176 -0.316 1.164 0.938
 256 array 0 1 255 {1 index exch /.notdef put} for  /MAAAAA+GillSansMT-Bold
Type42DictBegin
[<00010000000b000b000b000b6376742000000000000000bc000001be6670
676d000000000000027c0000056e676c79660000000000000c7800001082
6865616400000000000007ec000000366868656100000000000008240000
0024686d74780000000000000848000000806c6f636100000000000008c8
000000426d617870000000000000090c000000206e616d65000000000000
092c00000028707265700000000000000954000003246764697200000000
000000000000000005750000000005750014000000000000000000000000
000000000000000003b0001400000000ffec000000000000000000000000
0000fe290000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000080000000800000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000001670000015c006200000000
013d0106012900cd00ec00b8000000000000000000000000013600000122
00f10100016700c700b3009c00610000000000170000000000e100000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000009e009e00600060007b007b004c004c01310575
00f100d3000001480117009700a8015c02c10158013a012500f600860172
0115010300e600c8012700bb00fb008c011300c9008a00b300dc00be00cd
00c301040000403b3a393837363534333231302f2e2d2c2b2a2928272625
24232221201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a090807
060504030201002c01b0184358b119072b1b212121592d2c01b0184358b1
1a072b1b212121592d2c01b0184358b0032510f221b000121b212121592d
2c01b0184358b11b072b1b212121592d2c01b0184358b11c072b1b212121
592d2c01b0184358b11d072b1b212121592d2c01b0184358b11e072b1b21
2121592d2c4eb00014b046234344b0032510b10046e6b00013b00114b000
10f221b001134db000122d2c01b018435845646a234569b01943646060b0
462344231020b046f02fb000121b21212121592d2c01b10b0a432343650a
2d2c00b10a0b4323430b2d2c00b0462370b101463e01b0462370b1024645
3ab10200080d2d2cb0122bb0022545b00225456ab0408b60b00225234421
21212d2cb0132bb0022545b00225456ab8ffc08c60b0022523442121212d
2cb000b0122b2121212d2cb000b0132b2121212d2c01b00643b00743650a
2d2c2069b04061b0008b20b12cc08a8cb8100062602b0c642364615c58b0
0361592d2cb100032545685458b0032545b0032545606820b004252344b0
042523441bb00325204568208a2344b00325456860b003252344592d2cb0
0325204568208a2344b00325456860b0032523442d2cb00943588721c01b
b01243588745b0112bb0472344b0477ae41b038a45186920b04723448a8a
8720b0a05158b0112bb0472344b0477ae41b21b0477ae4595959182d2c20
8a4523456860442d2c456a422d2c01182f2d2c21212d2c01b0022545b002
254564606ab00325456a6120b00425456a208a8b65b0042523448cb00325
234421212d2c01456823456961b00325456a6120b00425456a208a8b65b0
042523448cb00325234421212d2c018a8a45642345646164422d2c01b002
2543b04054b0022543b000545a58b003252045b040614459b0022543b000
54b0022543b040545a58b004252045b040604459212121212d2c014b5258
43b00225452361441b2121592d2c014b525843b00225452360441b212159
2d2c4b525845441b2121592d2c0120b003252349b04060b0206320b00052
5823b002253823b002256538008a63381b212121212159012d2c4b505845
441b2121592d2c01b005251023208af500b0016023edec2d2c01b0052510
23208af500b0016123edec2d2c01b0062510f500edec2d2c462346608a8a
462320468a608a61b8ff8062232010238ab14b4b8a70456020b0005058b0
0161b8ffba8b1bb0468c59b0106068013a2d2c2045b003254652583f1b21
11592d2c2045b003254650583f1b2111592d2c00b00743b006430b2d2c4b
5258b00425b0042549b00425b00425496120b0005458212043b000555859
1bb04054582043b0005458591b2043b00054581bb00325b8ffc038595959
59212121212d2c4b52584365381b2121592d2c4b525843381b2121592d2c
21210c6423648bb84000622d2c21b08051580c6423648bb82000621bb200
402f2b59b002602d2c21b0c051580c6423648bb81555621bb200802f2b59
b002602d2c0c6423648bb84000626023212d2cb4000100000015b00826b0
0826b00826b008260f10161345683ab001162d2cb4000100000015b00826
b00826b00826b008260f1016134568653ab001162d2cb0134358031b0259
2d2cb0134358021b03592d2cb00a2b2310203cb0172b2d2cb0282b8a1023
20d023b0102bb00558c01b3c59201011b00012012d2c4b53234b515a5820
458a60441b2121592d2c4b53234b515a58381b2121592d2c01b0022510d0
23c901b00113b0001410b0013cb001162d2c01b00013b001b0032549b003
1738b001132d2c01b00425b004254964234564696120b080626ab00225b0
0225618cb0462344218a10b046f6212d0000000100000001a6664ba92119
5f0f3cf5001b080000000000aa9b3ae000000000b30e97a5fe96fd720956
078400010009000100000000000000010000076ffe2800000956fe96fe96
095600010000000000000000000000000000002008000100023900000314
005c0314000c02aa004a046a0196046a006f022b0062063f00060596009c
062b006004ec009c0714009c07000060043f004404aa00770400005204aa
0048046a004c026a001f04aa007f022b0071022b008104c1004c04aa0075
03960083036a004c033f001904aa007b0414000404140002023f00b00000
00150015003d0064007a009700ea0120018501d80229024702a702ec0370
03b9040b045104b904f905320576059b05da0620064d06f8073c077207d0
082d08410000000100000020004c0007003c000400020010002f00960000
05a1011c0002000100000001001200010000000000060016000055484544
42412b47696c6c53616e734d542d426f6c64404b60dc0150c770c780c7a0
c7d0c70500c710c702d9c4641f3fb63fb84fb64fb85fb65fb8064fbb0100
b910b920b930b90400b510b50220dd090f3640880188961e1fd485141fc9
83321fd6cab803e8b21f947db803e8b21fd285b801f440691fce83121f9e
95211f9695211f40950d0f36ca85641fc87f641f40ce21213640ce181936
ce83141f8385361f8f91641f709180910291931c1f7d7f361f7f852a1f20
7f307f807f030f851f858f85df85ef85ff85061e78161d77161c76161b75
161a74161973167016b8080040181d6c6f16171c6c6f171b6c6f196b6e16
1b6b6e7f721a6a14b8080040ad1d666914151c6669151b6669196568141b
656885711a9943fa219743fa219343fa219143fa218d43fa218b43fa2189
43fa218743fa218543fa218343fa218143fa217f43fa217d43fa2132995c
081f975d081f955d081f935c081f915c081f8d57081f8b57081f8957081f
8758081f8558081f8358081f8157081f7f57081f7d57081f6361081f6261
081f325d5b081f5c5b081f5856081f5756081f6155081f6055081f325b55
081f5655081fb8ffc0407e13323236400432323640103232361b37151836
151535151234150f33150c3215093115063015032f15002e152c2d0f2a2b
0e28290f26270e24250f22230e20210f1e1f0e1b1c1d0d18191a0d151617
0d1213140d0f10110c0c0d0e0c090a0b0c0607080c0304050c0001020c1b
3b081f0f3a081f0339081f0038081f503301b0124b004b5442b013014b00
4b5342b0332b4bb8080052b0322b4bb008505b58b101018e59b0332bb002
88b8010054b00488b8020054b012435a5b58b80119b101018e851bb01243
58b10401b80180858d8d1bb10401b80180858d8d59592b1db0644b5358b0
701d59b0324b5358b0901d59002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b012b002b2b2b2b012b2b002b
2b2b2b2b012b2b2b2b2b2b2b2b2b002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b012b2b2b2b2b2b2b2b2b2b2b2bb018b0324b53422b2b2b2b2b2b
b109322b4bb064524273742b2b2b742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b732b737373742b74737300>
[4227 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 244 5 <00010196000002cb05750003001e401102120303018500029002e0020302
0205041112392f5ded003f3f31300111211102cbfecb0575fa8b0575>MAAAAA+GillSansMT-Bold AddT42Char 
1 944 10 <00010060ffee05b205870016004b403309010907050b1901150b05000014
9103130c0c0e9109040042300b400b600b700baf0b050b0b061167060211
7d06b7176018015d10f6ed5d332f5de6003fed322f3fed322f3130005d01
1104212000111000212017112623220415140433323605b2fefafee1fe8c
fe4701d10177012bcffee3dffee50117da6cc801aafecf8b019b012d012d
01a47bfec98fefb9baf23900>MAAAAA+GillSansMT-Bold AddT42Char 
1 1106 11 <0001009c000004c505750005001a400d0593021203030101057f02b50610
f6ed332f003f3fed313001112111211104c5fbd7015c0100ff000575fb8b
>MAAAAA+GillSansMT-Bold AddT42Char 
1 1166 12 <0001009c0000067b0575000c0084404f01050606c900011400000107000c
0cc9080714080807000607070b040a12010c0b030103060507000c080a24
005700d40003040001000008057f4003500370038f03af03f00306030308
7f0a0ab50d10f62fed332f5ded1911392f715d1112391139123911390018
3f3c3c3f3c12392f3c3387052e2b877dc4872e182b877dc4313009012111
211101230111211121038b01c1012ffea4fe8735fe87fea4012f036f0206
fa8b0368fe4a01b6fc980575>MAAAAA+GillSansMT-Bold AddT42Char 
1 1358 13 <00020060ffee06a00587000b0017002c401a0507010c9106131291000468
036709020f7d03b819157d09b71810f6ed10feed5d003fed3fed3130015d
0120001110002120001110000132363534262322061514160381016501ba
fe40fea1fe9dfe4201bb0166c6f2f2c6c7f3f30587fe51fee2fedefe5601
a80124011f01aefb89ebbfc0eaeac0bfeb00>MAAAAA+GillSansMT-Bold AddT42Char 
1 4186 31 <000100b0fe3b018f05750003000eb500010303cf002fed003f2f31301311
3311b0dffe3b073af8c6>MAAAAA+GillSansMT-Bold AddT42Char 
1 0 0 <00020100000007000600000300070000211121112521112101000600fa80
0500fb000600fa0080050000>MAAAAA+GillSansMT-Bold AddT42Char 
MAAAAA+GillSansMT-Bold /CharStrings get begin
/one 5 def
/C 10 def
/L 11 def
/M 12 def
/O 13 def
/bar 31 def
end
MAAAAA+GillSansMT-Bold /Encoding get
dup 49 /one put
dup 67 /C put
dup 76 /L put
dup 77 /M put
dup 79 /O put
dup 124 /bar put
pop
end
%ADOEndSubsetFont
/JWUHYS+GillSansMT-Bold /MAAAAA+GillSansMT-Bold findfont ct_VMDictPut/JWUHYS+GillSansMT-Bold*1 [49{/.notdef}rp /one 17{/.notdef}rp /C 8{/.notdef}rp /L /M /.notdef /O 44{/.notdef}rp /bar 131{/.notdef}rp]JWUHYS+GillSansMT-Bold nfJWUHYS+GillSansMT-Bold*1 [25 0 0 -25 0 0 ]msf97.7917 190.8 mo(|CLMO)[7.00014 19.2499 15.3751 22.1249 0 ]xshJWUHYS+GillSansMT-Bold*1 [17 0 0 -17 0 0 ]msf183.417 195.84 mo(1)shJWUHYR+CambriaMath*1 [25 0 0 -24.5098 0 0 ]msf192.542 190.496 mo(!)shJWUHYR+CambriaMath*1 [25 0 0 -24.5098 0 0 ]msf192.542 190.496 mo(!) false chp.62 lw
0 lj
@
%ADOBeginSubsetFont: JAAAAA+GillSansMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal JWUHYQ+GillSansMT gcheck setglobal} if

1 0 1 <> JWUHYQ+GillSansMT AddT42Char 
1 42 2 <000100520164024402270003000db403910002032f2f002fed3130132115
215201f2fe0e0227c300>JWUHYQ+GillSansMT AddT42Char 
1 1090 9 <00020037fff0034a03aa0021002b00b040794b1a5b1a6b1a7b1a8b1a0513
1f231f022c0f3c0f4c0f5c0fcc1ddc1d06cb0bcb22fb0bfb22040f0b0f22
0205050390190119191c23986a147a1402f0140114141c0d0b2205060403
422a9809420d1317961c10140b4222850105052d8f01bf01ef01031f01df
0102010110191927834f105f107f109f1004102f5ded332f11332f725d12
392f10fde53c003fed3fe4fde417331112392f5d5ded11337c2f5d181133
7d2f18313000715d015d5d5d011114333237150606232227062322263534
363737353423220735363332171e020311070606151416333202c3202146
3e4b297515748360807d73e9a6958d6ac7955a1e300db37a5d4d493a5702
29fe792f316f281d5c5a7f605789285031a69ac77d4e195353fe1901112f
254b38394800>JWUHYQ+GillSansMT AddT42Char 
1 1396 10 <0001004efff0033303aa00160073b9000cffc0400e141637011e14153700
4014153700b8ffc0403a0e11370140171b370000030d400d11370d0d0915
9503130f9509108700870d020d0d004011113700bc18451255126a067906
890605128306bb1710f6ed5d10ee2b327c2f185d003fed3fed11332f2b11
332f2b2b2b2b2b3130251506232200353412333216171526232206151416
333203338983d8fefffacc4771538a767b9eab9169d7b4330100d7d9010a
1b25c258ad868da6>JWUHYQ+GillSansMT AddT42Char 
1 1584 11 <0002005a0000039e0575000b001700354020461056106b047b04040d0b0f
179603120f96091000000b0c8502c1128306bb1810f6edfdfd3c003f3fed
3fed1133333130015d013311212202353412333217190126232206151417
1e013302e7b7fe7bccf3ffc65c6c555788a1462a5e7a0575fa8b0102d9cb
010627fd1702472bb2978e4d2e20>JWUHYQ+GillSansMT AddT42Char 
1 1718 12 <00020054fff2039103aa0014001b0064400b101e0f0f37064015153706b8
ffc040310f113706060a01980f150115150a199576118611021110049579
0a010a1655036a0e021683141406bc1d154201830ebb1c10f6fde410fe32
2fed5d003f5ded3f5ded12392f5ded11337d2f182b2b3130012b01211e01
333237150e0123222e013534123332121525212e012322060391fd7907a3
81b49854a56f98bc71eebeb7dafd7d01cf077462627d01bc849c70b23830
7ed58cd20107ff00d7566d767600>JWUHYQ+GillSansMT AddT42Char 
1 2346 14 <000200750000014c051b000b000f00324021067f1f0001000f120c0f037f
09090e83000f100f200fe00ff00f05000f400f020f2f715ded332fed003f
3f2f5ded313013321615140623222635343603331123df2d40402d2a4040
30b6b6051b3e2d2c40412b2a41fe7dfc6800>JWUHYQ+GillSansMT AddT42Char 
1 2454 15 <000100850000013b0575000300224017031200000283000310032003e003
f003050003400302032f715ded003f3f31301333112385b6b60575fa8b00
>JWUHYQ+GillSansMT AddT42Char 
1 2514 16 <0001007d0000038303aa00120034401f01960f0f0d960603160326030303
10120f081112098508ba1400108511b91310f6fd3c10fced003f3c3f3f5d
fd322fed313001153633321e0115112311342623220711231101377a9b56
944db65665815aba03987587599ba8fdf2020c8d7981fd6f0398>JWUHYQ+GillSansMT AddT42Char 
1 2630 17 <0002004cfff00421039a000b00170035402466006906020c950010129506
16350f3a15450f4a15550f5a1506158303bc190f8309bb1810f6ed10feed
5d003fed3fed5d3130013200151400232200353400172206151416333236
3534260239d20116fee6d6cffeea0119ca83a8ac8786abb2039afef1cdc7
fef9010bc8ca010da4ac8584a7a98483ac00>JWUHYQ+GillSansMT AddT42Char 
1 2768 18 <00020075fe2b03ba0398000b0016003d4026650475048504030e0a109608
13001b0d96010f4a13591302138310050105c1000e0b8500b91710f6fd3c
10fd71ed5d003fed3f3fed33333130015d13112132041514002322271113
23111633323635342e0175013ff50111feffc7586b8181545c80a34d85fe
2b056df4dbcffef627fe1404c3fdca2bb28c5a8a3f00>JWUHYQ+GillSansMT AddT42Char 
1 2910 19 <0001008d0000032d03aa000f0032401b2a03010d12070107099504100f0f
57060100060611000d850eb91010f6fd3c11332f5f5d003f3fed32322f3f
3130015d0115373633321707262322061511231101440a84846770605f51
5881b70398d310d568a05aa873fe1f039800>JWUHYQ+GillSansMT AddT42Char 
1 3018 20 <00010054fff002c303aa002300db40157519851d021c1a1ac30b09140b0b
09210f0d0e3701b8ffc040190c1037161019212610292136013610392146
104b139f010a10b8fff640160e0e370101760b01790901091c1a0b041004
96211313b8ffc0404212143713400e103713131596101007140f0f371c09
1a0b040d0f130113401818371340121237134021213713130783001e971e
a31ed01e043f1e011e011e0118830db8ffc0b30c10370db8ffc0b3232337
0d2f2b2bed33332f2f715ded332f2b2b2b711117392b003fed332f2b2b3f
ed1217395d5d332f2b5d2b2b870e2e2b7d10c43130005d37351e01333236
353426272e0135343633321715262322061514161f011615140623222654
4da13739523558b06da582878ea26735413b4a41e6b18b528042c4364338
27283532628b526a864cb4622d25203a2925829e71912300>JWUHYQ+GillSansMT AddT42Char 
1 3342 21 <00010000fff002a804560015003e40200101140595020f0a0a08950d132b
0f3b0f4b0f0303030a0a17020585131515132f332f10fd3c11332f332f5d
003fed337d2f183ffd3c337c2f1831301101152115211114333237150623
22272e0235112301560123fedd83626d697c7d531a2217a003060150bea4
fe3d9e42aa3b491637597d019800>JWUHYQ+GillSansMT AddT42Char 
JWUHYQ+GillSansMT /CharStrings get begin
/space 1 def
/hyphen 2 def
/a 9 def
/c 10 def
/d 11 def
/e 12 def
/i 14 def
/l 15 def
/n 16 def
/o 17 def
/p 18 def
/r 19 def
/s 20 def
/t 21 def
end
JWUHYQ+GillSansMT /Encoding get
dup 32 /space put
dup 45 /hyphen put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/JWUHYQ+GillSansMT*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen 3{/.notdef}rp /one /two /three 13{/.notdef}rp /A 13{/.notdef}rp /O 17{/.notdef}rp /a /.notdef /c /d /e 3{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n /o /p /.notdef /r /s /t 7{/.notdef}rp /bar 131{/.notdef}rp]JWUHYQ+GillSansMT nfJWUHYQ+GillSansMT*1 [25 0 0 -25 0 0 ]msf87.1067 214.8 mo(constrained )[10.8751 13.7501 12.5 9.62486 8.24982 9.87491 10.625 5.49986 12.5 12.0001 12.7499 0 ]xsh88.6667 238.8 mo(to 1)[8.24981 13.7501 6.87499 0 ]xsh130.042 238.8 mo(-)sh138.167 238.8 mo(2 plane)[12.5 6.875 12.5 5.49985 10.6251 12.5 0 ]xsh278.4 239.211 mo
249.366 312.452 li
252.62 313.742 li
281.653 240.501 li
cp
250.993 313.097 mo
245.438 303.365 li
247.124 322.858 li
261.707 309.814 li
cp
f
281.71 239.797 mo
282.29 98.4918 li
278.79 98.4774 li
278.21 239.783 li
cp
280.54 98.4847 mo
289.261 105.521 li
280.583 87.9848 li
271.761 105.449 li
cp
.15848 1 1 .0960708 cmyk
f
%ADOBeginSubsetFont: MAAAAA+GillSansMT-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal JWUHYS+GillSansMT-Bold gcheck setglobal} if
1 302 6 <0001006f0000040a05870014005cb71a0501149102120db8ffd84031091e
370d9f0caf0c020f0c010c0c0a930f04140260007000800003000007831f
1201120c120c30024002021002200202022f5d7133332f2f5ded332f5d11
39003fed322f5d5d332b3fed3130015d0111213536003635342623220711
36333216151401040afc657f0147566d4d99b7cdbaceedfe85011dfee327
9b01dbc85e5276ae012585d4b9fdfe20>JWUHYS+GillSansMT-Bold AddT42Char 
JWUHYS+GillSansMT-Bold /CharStrings get begin
/two 6 def
end
JWUHYS+GillSansMT-Bold /Encoding get
dup 50 /two put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/JWUHYS+GillSansMT-Bold*1 [49{/.notdef}rp /one /two 16{/.notdef}rp /C 8{/.notdef}rp /L /M /.notdef /O 44{/.notdef}rp /bar 131{/.notdef}rp]JWUHYS+GillSansMT-Bold nfJWUHYS+GillSansMT-Bold*1 [25 0 0 -25 0 0 ]msf439.061 97.44 mo(|CLMO)[7.00012 19.2499 15.3752 22.1249 0 ]xshJWUHYS+GillSansMT-Bold*1 [17 0 0 -17 0 0 ]msf524.686 102.48 mo(2)shJWUHYR+CambriaMath*1 [25 0 0 -24.5098 0 0 ]msf533.811 97.1362 mo(!)shJWUHYR+CambriaMath*1 [25 0 0 -24.5098 0 0 ]msf533.811 97.1362 mo(!) false chp@
JWUHYQ+GillSansMT*1 [25 0 0 -25 0 0 ]msf428.376 121.44 mo(constrained )[10.8751 13.75 12.5 9.62488 8.24982 9.87491 10.6251 5.49985 12.5 12.0001 12.7499 0 ]xsh429.936 145.44 mo(to 2)[8.24979 13.7501 6.875 0 ]xsh471.311 145.44 mo(-)sh479.436 145.44 mo(3 plane)[12.5 6.875 12.5 5.49982 10.6251 12.5 0 ]xsh619.027 337.876 mo
619.027 53.3638 li
616.777 53.3638 li
616.777 337.876 li
cp
617.902 53.3639 mo
623.527 57.8639 li
617.902 46.6139 li
612.277 57.8639 li
cp
.518151 .434821 .434821 .0814221 cmyk
f
617.902 336.751 mo
1000.01 336.751 li
1000.01 339.001 li
617.902 339.001 li
cp
1000.01 337.876 mo
995.509 332.251 li
1006.76 337.876 li
995.509 343.501 li
cp
f
3 lw
1 lj
618.278 133.577 mo
647.217 202.965 676.156 272.353 709.068 266.301 cv
741.979 260.25 815.745 97.2658 815.745 97.2658 cv
.750179 .679652 .670191 .901488 cmyk
@
.518151 .434821 .434821 .0814221 cmyk
%ADOBeginSubsetFont: JAAAAA+GillSansMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal JWUHYQ+GillSansMT gcheck setglobal} if
1 796 7 <0001009a000203c50575000b0046402b07931f04014f04010f04af040204
040b0393000308930b1205010501300a500ab00a030a03087f0a0bb50c10
f632fd3c2f5d33332f2f003fed3fed12392f5d7172ed3130132115211121
1521112115219a0318fdb0023cfdc40263fcd50575b2fe56b3fe4eb2>JWUHYQ+GillSansMT AddT42Char 
1 1912 13 <00030000fe2b035e039800250031003c0102402e7615a51b02461f661f6b
3c0313281313371414111137122811133710111232027a0e7511021f113b
13041a240d2cb8ffc0400c1212372c95760c010c0c0337b8ffd840361213
3737951a1b069626401212372695031019001609331f531f5a3b8c3a0600
1409093711133b033a1f0f210d242905052f8309093ab8ffd4403d111137
3a83001716179017a017bf170517171d0f839021a0210221210082359235
0235834f1d8f1d9f1daf1d041d1d3d2983300050000200bb3d8f3e015d10
f45ded12392f5ded5d11392f5ded11332f5ded2b332fed332f1139391112
391117392b5d003fed2bed3fed2b12392f5ded2b33331217395d31300071
2b2b2b015d5d133436332115231616151406060706151416171616171615
140623222635343726353436372601220615141633323635342603220615
1421323635342652d7ba017bba362a528193674d65a9612742e9c3c5ebe7
5c4f43cb01564a68664e4d6768795c7501007985a8025a93ab8e375a3a48
8b4a160f38202916252a274264839c9d84bb363b3a2c48115a0169644647
5d5f474860fcdb4e3d8e47414051>JWUHYQ+GillSansMT AddT42Char 
1 3476 22 <00010000fe2b03810398000700744041070706040405030000010202c303
0014030300040403070606c305041405050407040502031b010006050f04
070203006001a001020101500701070303070603052f17332f192f5d3318
2f5d3311331133003f3c3c3c3f3c12393987052e2b87087dc487052e182b
877dc487083c08c43130013301230901331302b4cdfd75cb0139fe9ccff8
0398fa93029a02d3fdf9>JWUHYQ+GillSansMT AddT42Char 
JWUHYQ+GillSansMT /CharStrings get begin
/E 7 def
/g 13 def
/y 22 def
end
JWUHYQ+GillSansMT /Encoding get
dup 69 /E put
dup 103 /g put
dup 121 /y put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/JWUHYQ+GillSansMT*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen 3{/.notdef}rp /one /two /three 13{/.notdef}rp /A 3{/.notdef}rp /E 9{/.notdef}rp /O 17{/.notdef}rp /a /.notdef /c /d /e /.notdef /g /.notdef /i 2{/.notdef}rp /l /.notdef /n /o /p /.notdef /r /s /t 4{/.notdef}rp /y 2{/.notdef}rp /bar 131{/.notdef}rp]JWUHYQ+GillSansMT nfJWUHYQ+GillSansMT*1 [25 0 0 -25 0 0 ]msf583.464 36.96 mo(Ene)sh620.465 36.96 mo(rgy)[9.87494 11.1251 0 ]xsh%ADOBeginSubsetFont: OAAAAA+Calibri Initial
ct_T42Dict begin
-0.5 -0.313 1.238 1.023
 256 array 0 1 255 {1 index exch /.notdef put} for  /OAAAAA+Calibri
Type42DictBegin
[<00010000000b000b000b000b6376742000000000000000bc000005bc6670
676d000000000000067800000d2b676c7966000000000000393c000002e6
6865616400000000000013a4000000366868656100000000000013dc0000
0024686d74780000000000001400000000086c6f63610000000000001408
000000066d6178700000000000001410000000206e616d65000000000000
143000000020707265700000000000001450000024eb6764697200000000
00000000000000000000079e0000fe930000000000000000000000000050
006a0073008000800086008d009300bf00db006200830093009900a000a6
00a900b000c100c900d70000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000fe79056d
000c03b7000600130000fffaffedfea6ffedfeb8050e000600130000fffa
ffedfe93050e00130420000600130000fffaffedff10ffee050e00130420
000600130000fffaffeefe93ff10feb80612000a050e0006000d02d2fffa
fff301fdfffa023f0006000dff36fffafff302870006000f0000fffafff1
079efeaffea700000000000000000000000000500051005a005b005c005d
006000610062006400680069006a006b006c006d006e00680069006e0060
0067006e00660068005f00610063006400660068006a006b006c006d006e
006f0070006f00720074007500760076007000720073007400750076006f
007000710072007300750077007700780079007a007b007c007d007b007c
007d00770079007a007c0078007a007c007d0078007d007e007f00800081
0082007e007f00810082007e007f00800081008200830084008500860087
008800890083008400850086008700880089008300840085008600870088
008900890086008700880089008a008b008c008d008e008f008a008b008c
008d008e008f008a008b008c008d008e008f008d008a008b008c008d008e
008f0090009000910092009300940095009600980099009b009c00900091
00920093009400950096009700980099009a009e009f00a6009000910095
0098009f009000910096009700bc00c600b500ae00af00b6006800690063
006a006f00700071006f0070007100720066006c006d00700079007c007f
00830086008700880089008a0074007500760077007a007b007c007d007e
008200850086008a0088008900830078007b008200830086008700880089
00760079007a007c007d007e0083008500880089008a0073007400750077
007a007d00880089008a008b008c008d008e00900094008b008c008d0091
0092009300940095008c008d00910095008f009000910092009300940095
008b008c008d008e008f009000910092009300940095008b008c008d008e
008f00900091009200930096009700980099009c0096009700980099009a
009b009c00960099009a009c0096009700980099009a009b009c00970098
0099009a009b009c009700980099009a009b009c0096009d00a000a1009d
009e009f00a000a100a2009d009f00a000a1009f00a2009d009e009f00a0
00a100a2009d009e00a000a1009d009e00a000a2009d00a300a400a500a6
00a700a300a400a600a700a300a400a500a600a700a600a300a700a800a9
00aa00ab00ac00ac00a800a900aa00ab00ac00a800a900aa00ab00ac00a8
00aa00ab00ac00ae00ad00ae00af00b000b100b200b300b400b500b600b7
00b800ad00ae00ad00ae00af00b000b100b200b300b400b500b600b700b8
00ad00ae00af00b000b100b200b300b400b500b600b700b800b300ae00af
00b000b200b500b600b700b800b900ba00bb00bc00be00c000c100c200c2
00b900ba00bb00bc00bd00be00bf00c000c100c200c400ba00bb00be00bf
00c000c200c300c400b900ba00bf00c000c200c600c700c900ca00cb00cc
00cf00c500c700ce00c500c700c800cf00d000d200d300d7010d00d000d1
00e900d000fd00d005e4000e0041000005ba009c009c005e005e00000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000051a
001500a0fff8ff77fff803480066015401cc00ac00a200b4008c0101006e
00000000000000000000011f000a04e2001400b4fff6035c00140028fdda
0568fea2ffef405a868574737271706f6e6d6c6b6a696867666564625f5e
5d5c5b5a59585554535251504f4e4d4c4b4a494847464544434241403f3e
3d3c3b3a39383736352f2e2d2c2826252423221f181411100f0d0b0a0908
07060504030201002c4523466020b02660b004262348482d2c4523462361
20b02661b004262348482d2c45234660b0206120b04660b004262348482d
2c4523462361b0206020b02661b02061b004262348482d2c45234660b040
6120b06660b004262348482d2c4523462361b0406020b02661b04061b004
262348482d2c0110203c003c2d2c20452320b0cd442320b8015a51582320
b08d44235920b0ed51582320b04d44235920b0042651582320b00d442359
21212d2c20204518684420b001602045b04676688a4560442d2c01b10b0a
432343650a2d2c00b10a0b4323430b2d2c00b0282370b101283e01b02823
70b10228453ab10200080d2d2c2045b00325456164b050515845441b2121
592d2c2045b0004360442d2c01b00643b00743650a2d2c2069b04061b000
8b20b12cc08a8cb8100062602b0c642364615c58b00361592d2c8a03458a
8a87b0112bb0292344b0297ae4182d2c4565b02c234445b02b23442d2c4b
525845441b2121592d2c01b005251023208af500b0016023edec2d2c01b0
05251023208af500b0016123edec2d2c01b0062510f500edec2d2c20b001
600110203c003c2d2c20b001610110203c003c2d2c00b00743b006430b2d
2c21210c6423648bb84000622d2c21b08051580c6423648bb82000621bb2
00402f2b59b002602d2c21b0c051580c6423648bb81555621bb200802f2b
59b002602d2c0c6423648bb84000626023212d2c45234560234560234560
23766818b08062202d2cb00426b00426b00425b0042545234520b0032660
62636820b0032661658a2344442d2c2045b0005458b040442045b0406144
1b2121592d2c45b1302f4523456160b0016069442d2c4b5158b02f2370b0
1423421b2121592d2c4b515820b0032545695358441b2121591b2121592d
2c45b01443b0006063b0016069442d2cb02f45442d2c452320458a60442d
2c45234560442d2c4b235158b90033ffe0b134201bb3330034005944442d
2cb0164358b00326458a586466b01f601b64b020606620581b21b04059b0
01615923586559b02923442310b029e01b2121212121592d2cb0164358b0
04254564b020606620581b21b04059b0016123586559b0292344b00425b0
0725082058021b0359b0052510b004252046b0042523423cb0072510b006
252046b00425b0016023423c2058011b0059b0052510b00425b029e0b007
2510b00625b029e0b00425b00725082058021b0359b00425b003254348b0
0625b00325b0016043481b2159212121212121212d2cb0164358b0042545
64b020606620581b21b04059b0016123581b6559b0292344b00525b00825
082058021b0359b0042510b005252046b0042523423cb00425b0072508b0
072510b006252046b00425b0016023423c2058011b0059b0042510b00525
b029e0b02920456544b0072510b00625b029e0b00525b00825082058021b
0359b00525b003254348b00425b0072508b00625b00325b0016043481b21
59212121212121212d2c02b00425202046b004252342b0052508b0032545
48212121212d2c02b0032520b0042508b0022543482121212d2c45232045
1820b00050205823652359236820b040505821b04059235865598a60442d
2c4b53234b515a5820458a60441b2121592d2c4b545820458a60441b2121
592d2c4b53234b515a58381b2121592d2cb000214b5458381b2121592d2c
b002435458b0462b1b21212121592d2cb002435458b0472b1b212121592d
2cb002435458b0482b1b21212121592d2cb002435458b0492b1b21212159
2d2c2320b000508a8a64b10003255458b0401bb10103255458b005438b59
b04f2b5923b0622b2321235865592d2cb108000c215460432d2c01462346
6023466123201020468a61b8ff80628ab140408a704560683a2d2c208a23
49648a2353583c1b21592d2c4b52587d1b7a592d2cb012004b014b54422d
2cb1020042b123018851b1400188535a58b910000020885458b202010243
604259b12401885158b920000040885458b2020202436042b12401885458
b2022002436042004b014b5258b2020802436042591bb940000080885458
b202040243604259b94000008063b80100885458b202080243604259b940
00010063b80200885458b202100243604259b12601885158b94000020063
b80400885458b202400243604259b94000040063b80800885458b2028002
43604259b12801885158b94000080063b81000885458ba00020100000243
604259595959595959b10002435458400a0540084009400c020d021bb101
02435458b2054008ba010000090100b30c010d011bb18002435258b20540
08b80180b109401bb901000002435258b2054008ba0180000901401bb901
800002435258b2054008b80200b109401bb2054008ba0100000901005959
59b9400000808855b94000020063b8040088555a58b30c000d011bb30c00
0d0159595942424242422d2c451868234b51582320452064b04050587c59
688a6059442d2cb00016b00225b0022501b001233e00b002233eb1010206
0cb00a236542b00b234201b001233f00b002233fb10102060cb006236542
b0072342b00116012d2c20b82000628a6023622d2cb0072558001b0159b0
042510b00325b0022520b8ffff545821cd1bed5921b006255cb006255a58
b0092b5920b005254ab0042547b004254760b0062547b0806361b00225b0
005558b00325b00725496359b0082558001b0159b00425b0062549b00925
5cb009255a58b0092b59b0072546b0806361b0032520b0005558631b2159
612320b0005558b080631b21b08059b0592bb006255c586959b004252020
10b00048233ab0062658001b0159b0052658b003252f598a12233221212d
2cb00625b00a2587b00625b009254ab0005358b00625b00a251bb00925b0
072559b00225b00225070cb005256323b00625636020b940000400635358
21b00426b00426b00a1bb94000040063655158b0042665b0042665b00a1b
b00426b00426b000b00325b003250b0d0ab0092eb00725b007250b0d0ab0
0b2eb00525b0052507595920b0005558b00525b0052587b00725b007250b
b0092510b00b25b0092620b8ffff545821cd1bed59b00525b0052507b008
25b00b254923b00625b0062587b00a2510b00b25c15920b00051b8005223
78b00161b00225b00725b0072507b00a25b00d254961b08062b00525b005
250bb00a252338b00625b0062587b00825b008250bb00a2510b00b25c4b0
0625b0062507b00925b00c2549b0032554b8ffa723792121212121212121
212121212d2c23b0005458b9400000001bb900004000598ab0005458b940
0000001bb90000400059b05b2b2d2c08b0005458b9400000001bb9000040
00590db05b2b2d2c8a8a080d8ab0005458b9400000001bb90000400059b0
5b2b2d2cb00426b00426080db00426b00426080db05b2b2d2cb0022563b0
206066b00225b82000626023622d2c204569442d2c234ab1024e2b2d2c23
4ab1014e2b2d2c238a4a234564b0022564b002256164b003435258212064
59b1024e2b23b000505865592d2c238a4a234564b0022564b002256164b0
0343525821206459b1014e2b23b000505865592d2c20b003254ab1024e2b
8a103b2d2c20b003254ab1014e2b8a103b2d2cb00325b003258ab0672b8a
103b2d2cb00325b003258ab0682b8a103b2d2cb0032546b003254660b004
252eb00425b00425b0042620b000505821b06a1bb06c592bb0032546b003
25466061b08062208a2010233a232010233a2d2cb0032547b003254760b0
052547b0806361b00225b00625496323b005254ab080632058621b2159b0
042646608a468a4660b02063612d2cb00426b00425b00425b00426b06e2b
208a2010233a232010233a2d2c2320b001545821b00225b1024e2bb08050
20605920606020b001515821211b20b005515821206661b0402361b10003
2550b00325b00325505a5820b00325618a535821b000591b21591bb00754
582066616523211b2121b000595959b1024e2b2d2cb00225b004254ab000
5358b0001b8a8a238ab00159b004254620666120b00526b0062649b00526
b00526b0702b236165b02060206661b02061652d2cb0022546208a20b000
505821b1024e2b1b452321596165b00225103b2d2cb0042620b802006220
b80200638a236120b05d602bb00525118a128a20398a58ba005d10000004
266356602b23212010204620b1024e2b23611b2321208a201049b1024e2b
593b2d2cba005d10000009256356602bb00525b00525b00526b06d2bb15d
0725602bb00525b00525b00525b00525b06f2bba005d1000000826635660
2b20b0005258b0502bb00525b00525b00725b00725b00525b0712bb00217
38b00052b00225b001525a58b00425b0062549b00325b00525496020b040
5258211bb000525820b0025458b00425b00425b00725b0072549b0021738
1bb00425b00425b00425b0062549b0021738595959595921212121212d2c
b12801885158b94000040063b8080088545c1bb001592d2cb12801885158
b94000040063b8080088545c1bb001592d000001000000063333a1099dfd
5f0f3cf50019080000000000bbeb7ccc00000000d5968a66fbfafd8009ec
083600000009000200000000000000010000079efdda00000aa0fbfafaa0
09ec000100000000000000000000000000000002040e0000048a00610000
00bf01730000000100000002043a00170108000800020010002f00870000
12360235000400010000000100120001000000000006000e00004d514154
43422b43616c69627269b10903415302c802c60038001f02c702c6003800
1f02dd003802da005502d9003802d7005502d8003802d7005502d6003802
d5005502d4003802d3005502d2003802d1005502bf003802be005502bd00
3802bc0055000402db003402db005402db0003003402db005402db006402
db00a402db00d402db0005006b02d50001000b02d10001001402c2004402
c2006402c2007402c2009402c2000500a402be000100a402bc0001002002
84b40918014a20b80283b40918014a20b80282b40918014a20b80281b409
18014a20b80280b40918014a20b8027fb40918014a20b8027eb40918014a
20b8027db40918014a20b8027cb40918014a20b8027bb40918014a20b802
7ab40918014a20b80279b40918014a20b80278b40918014a20b80277b409
18014a20b80276b40918014a20b80275b40918014a20b80274b40918014a
20b80273b40918014a20b80271b40918014a20b80270b40918014a20b802
6fb40918014a20b8026eb40918014a20b8026db40918014a20b8026cb409
18014a20b8026bb40918014a20b8026ab40918014a20b80269b40918014a
20b80268b40918014a20b80267b40918014a20b80266b40918014a20b802
65b40918014a20b80264b40918014a20b80263b40918014a20b80262b409
18014a20b80261b40918014a20b80260b40918014a20b8025fb40918014a
20b8025eb40918014a20b8025db40918014a20b8025cb40918014a20b802
5bb40918014a20b8025ab40918014a20b80259b40918014a20b80258b409
18014a20b80257b40918014a20b80256b40918014a20b80255b40918014a
20b80254b40918014a20b80253b40918014a20b80252b40918014a20b802
51b40918014a20b80250b40918014a20b8024fb40918014a20b8024eb409
18014a20b8024db40918014a20b8024cb40918014a20b8024bb40918014a
20b8024ab40918014a20b80249b40918014a20b80248b40918014a20b802
47b40918014a20b80246b40918014a20b80245b40918014a20b80244b409
18014a20b80243b40918014a20b80242b40918014a20b80241b40918014a
20b80240b40918014a20b8023fb40918014a20b8023eb40918014a20b802
3db40918014a20b8023cb40918014a20b8023bb40918014a20b8023ab409
18014a20b80239b40918014a20b80238b40918014a20b80237b40918014a
20b80236b40918014a20b80235b40918014a20b80234b40918014a20b802
33b40918014a20b80232b40918014a20b80231b40918014a20b80230b409
18014a20b8022fb40918014a20b8022eb40918014a20b8022db40918014a
20b8022cb40918014a20b8022bb40918014a20b8022ab40918014a20b802
29b40918014a20b80228b40918014a20b80227b40918014a20b80226b409
18014a20b80225b40918014a20b80224b40918014a20b80223b40918014a
20b80222b40918014a20b80221b40918014a20b80220b40918014a20b802
1fb40918014a20b8021eb40918014a20b8021db40918014a20b8021cb409
18014a20b8021bb40918014a20b8021ab40918014a20b80219b40918014a
20b80218b40918014a20b80217b40918014a20b80216b40918014a20b802
15b40918014a20b80214b40918014a20b80213b40918014a20b80212b409
18014a20b80211b40918014a20b80210b40918014a20b8020fb40918014a
20b8020eb40918014a20b8020db40918014a20b8020cb40918014a20b802
0bb40918014a20b8020ab40918014a20b80209b40918014a20b80208b409
18014a20b80207b40918014a20b80206b40918014a20b80205b40918014a
20b80204b40918014a20b80203b40918014a20b80202b40918014a20b802
01b40918014a20b80200b40918014a20b801ffb40918014a20b801feb409
18014a20b801fdb40918014a20b801fcb40918014a20b801fbb40918014a
20b801fab40918014a20b801f9b40918014a20b801f8b40918014a20b801
f7b40918014a20b801f6b40918014a20b801f5b40918014a20b801f4b409
18014a20b801f3b40918014a20b801f2b40918014a20b801f1b40918014a
20b801f0b40918014a20b801efb40918014a20b801eeb40918014a20b801
edb40918014a20b801ecb40918014a20b801ebb40918014a20b801eab409
18014a20b801e9b40918014a20b801e8b40918014a20b801e7b40918014a
20b801e6b40918014a20b801e5b40918014a20b801e4b40918014a20b801
e3b40918014a20b801e2b40918014a20b801e1b40918014a20b801e0b409
18014a20b801dfb40918014a20b801deb40918014a20b801ddb40918014a
20b801dcb40918014a20b801dbb40918014a20b801dab40918014a20b801
d9b40918014a20b801d8b40918014a20b801d7b40918014a20b801d6b409
18014a20b801d5b40918014a20b801d4b40918014a20b801d3b40918014a
20b801d2b40918014a20b801d1b40918014a20b801d0b40918014a20b801
cfb40918014a20b801ceb40918014a20b801cdb40918014a20b801ccb409
18014a20b801cbb40918014a20b801cab40918014a20b801c9b40918014a
20b801c8b40918014a20b801c7b40918014a20b801c6b40918014a20b801
c5b40918014a20b801c4b40918014a20b801c3b40918014a20b801c2b409
18014a20b801c1b40918014a20b801c0b40918014a20b801bfb40918014a
20b801beb40918014a20b801bdb40918014a20b801bcb40918014a20b801
bbb40918014a20b801bab40918014a20b801b9b40918014a20b801b8b409
18014a20b801b7b40918014a20b801b6b40918014a20b801b5b40918014a
20b801b4b40918014a20b801b3b40918014a20b801b2b40918014a20b801
b1b40918014a20b801b0b40918014a20b801afb40918014a20b801aeb409
18014a20b801adb40918014a20b801acb40918014a20b801abb40918014a
20b801aab40918014a20b801a9b40918014a20b801a8b40918014a20b801
a7b40918014a20b801a6b40918014a20b801a5b40918014a20b801a4b409
18014a20b801a3b40918014a20b801a2b40918014a20b801a1b40918014a
20b801a0b40918014a20b8019fb40918014a20b8019eb40918014a20b801
9db40918014a20b8019cb40918014a20b8019bb40918014a20b8019ab409
18014a20b80199b40918014a20b80198b40918014a20b80197b40918014a
20b80196b40918014a20b80195b40918014a20b80194b40918014a20b801
93b40918014a20b80192b40918014a20b80191b40918014a20b80190b409
18014a20b8018fb40918014a20b8018eb40918014a20b8018db40918014a
20b8018cb40918014a20b8018bb40918014a20b8018ab40918014a20b801
89b40918014a20b80188b40918014a20b80187b40918014a20b80186b409
18014a20b80185b40918014a20b80184b40918014a20b80183b40918014a
20b80182b40918014a20b80181b40918014a20b80180b40918014a20b801
7fb40918014a20b8017eb40918014a20b8017db40918014a20b8017cb409
18014a20b8017bb40918014a20b8017ab40918014a20b80179b40918014a
20b80178b40918014a20b80177b40918014a20b80176b40918014a20b801
75b40918014a20b80174b40918014a20b80173b40918014a20b80172b409
18014a20b80171b40918014a20b80170b40918014a20b8016fb40918014a
20b8016eb40918014a20b8016db40918014a20b8016cb40918014a20b801
6bb40918014a20b8016ab40918014a20b80169b40918014a20b80168b409
18014a20b80167b40918014a20b80166b40918014a20b80165b40918014a
20b80164b40918014a20b80163b40918014a20b80162b40918014a20b801
61b40918014a20b80160b40918014a20b8015fb40918014a20b8015eb409
18014a20b8015db40918014a20b8015cb40918014a20b8015bb40918014a
20b8015ab40918014a20b80159b40918014a20b80158b40918014a20b801
57b40918014a20b80156b40918014a20b80155b40918014a20b80154b409
18014a20b80153b40918014a20b80152b40918014a20b80150b40918014a
20b8014fb40918014a20b8014eb40918014a20b8014cb40918014a20b801
4bb40918014a20b8014ab40918014a20b80149b40918014a20b80148b409
18014a20b80147b40918014a20b80146b40918014a20b80145b40918014a
20b80144b40918014a20b80143b30918014ab80284b21e3e1fb80283b21e
151fb80282b21e3e1fb80281b21e3a1fb80280b21e3e1fb8027fb21e3e1f
b8027eb21e0c1fb8027db21e3e1fb8027cb21e3e1fb8027bb21e3e1fb802
7ab21e3e1fb80279b21d411fb80278b21d431fb80277b21d431fb80276b2
1d431fb80275b21d411fb80274b21d431fb80273b21d431fb80272b21d41
1fb80271b21d421fb80270b21d421fb8026fb21d421fb8026eb21d431fb8
026db21d431fb8026cb21d431fb8026bb21c451fb8026ab21c451fb80269
b21c451fb80268b21c451fb80267b21c451fb80266b21c441fb80265b21c
451fb80264b21c451fb80263b21c451fb80262b21c451fb80261b21c451f
b80260b21c451fb8025fb21c451fb8025eb21c441fb8025db21c451fb802
5cb21c451fb8025bb21c451fb8025ab21c451fb80259b21c451fb80258b2
1c451fb80257b21c451fb80256b21c451fb80255b21c451fb80254b21c45
1fb80253b21c451fb80252b21c451fb80251b21c451fb80250b21c451fb8
024fb21c451fb8024eb21c451fb8024db21c451fb8024cb21c451fb8024b
b21c451fb8024ab21b491fb80249b21b491fb80248b21b4a1fb80247b21b
4a1fb80246b21b4b1fb80245b21b4c1fb80244b21b4c1fb80243b21b4c1f
b80242b21b4b1fb80241b21b491fb80240b21b491fb8023fb21b4a1fb802
3eb21b4a1fb8023db21b4a1fb8023cb21b4b1fb8023bb21b4b1fb8023ab2
1b4c1fb80239b21b4c1fb80238b21b4c1fb80237b21b4c1fb80236b21b4c
1fb80235b21b491fb80234b21b491fb80233b21b4a1fb80232b21b4a1fb8
0231b21b4a1fb80230b21b4b1fb8022fb21b4b1fb8022eb21b4c1fb8022d
b21b4c1fb8022cb21b4c1fb8022bb21b4c1fb8022ab21b4c1fb80229b21b
4c1fb80228b21b4c1fb80227b21b491fb80226b21b491fb80225b21b4a1f
b80224b21b4a1fb80223b21b4a1fb80222b21b4b1fb80221b21b4b1fb802
20b21b4c1fb8021fb21b4c1fb8021eb21b4c1fb8021db21b4c1fb8021cb2
1b4c1fb8021bb21b4c1fb8021ab21a4e1fb80219b21a4e1fb80218b21a4f
1fb80217b21a4f1fb80216b21a4e1fb80215b21a4e1fb80214b21a4f1fb8
0213b21a4f1fb80212b21a4f1fb80211b21a4e1fb80210b21a4e1fb8020f
b21a4f1fb8020eb21a4f1fb8020db21a4f1fb8020cb21a4e1fb8020bb21a
4e1fb8020ab21a4e1fb80209b21a4f1fb80208b21a4f1fb80207b21a4f1f
b80206b219501fb80205b219511fb80204b219511fb80203b219501fb802
02b219511fb80201b219511fb80200b219511fb801ffb219511fb801feb2
19501fb801fdb219511fb801fcb219511fb801fbb219511fb801fab21950
1fb801f9b219511fb801f8b219511fb801f7b219511fb801f6b219511fb8
01f5b218541fb801f4b218531fb801f3b218541fb801f2b218541fb801f1
b218541fb801f0b218531fb801efb218541fb801eeb218541fb801edb218
541fb801ecb218531fb801ebb218531fb801eab218541fb801e9b218541f
b801e8b218541fb801e7b218541fb801e6b218531fb801e5b218541fb801
e4b218531fb801e3b218541fb801e2b218541fb801e1b218541fb801e0b2
18531fb801dfb218531fb801deb218541fb801ddb218541fb801dcb21854
1fb801dbb218541fb801dab218531fb801d9b218541fb801d8b218541fb8
01d7b217571fb801d6b217561fb801d5b217561fb801d4b217571fb801d3
b217571fb801d2b217571fb801d1b217571fb801d0b217561fb801cfb217
561fb801ceb217571fb801cdb217571fb801ccb217571fb801cbb217571f
b801cab217561fb801c9b217561fb801c8b217571fb801c7b217571fb801
c6b217571fb801c5b217571fb801c4b217571fb801c3b217561fb801c2b2
17571fb801c1b217571fb801c0b217571fb801bfb217561fb801beb21756
1fb801bdb217571fb801bcb217571fb801bbb217571fb801bab217571fb8
01b9b217571fb801b8b217561fb801b7b217571fb801b6b217571fb801b5
b217571fb801b4b217571fb801b3b2163f1fb801b2b2165b1fb801b1b216
5b1fb801b0b2165b1fb801afb2165b1fb801aeb2165b1fb801adb2165b1f
b801acb2165b1fb801abb2165b1fb801aab2163e1fb801a9b2163f1fb801
a8b2163f1fb801a7b2165b1fb801a6b2165b1fb801a5b2165b1fb801a4b2
165b1fb801a3b2165b1fb801a2b2165b1fb801a1b2165b1fb801a0b2165b
1fb8019fb2163e1fb8019eb2163f1fb8019db2163f1fb8019cb2165b1fb8
019bb2165b1fb8019ab2165b1fb80199b2165b1fb80198b2163e1fb80197
b2165b1fb80196b2165b1fb80195b2165b1fb80194b2163e1fb80193b216
3f1fb80192b2163f1fb80191b2165b1fb80190b2165b1fb8018fb2165b1f
b8018eb2165b1fb8018db2165b1fb8018cb2163f1fb8018bb2165b1fb801
8ab2165b1fb80189b2165b1fb80188b2165b1fb80187b2165b1fb80186b2
15611fb80185b215621fb80184b215621fb80183b215661fb80182b21566
1fb80181b215551fb80180b215451fb8017fb215361fb8017eb215361fb8
017db215611fb8017cb215621fb8017bb215621fb8017ab215641fb80179
b215661fb80178b215661fb80177b215661fb80176b215661fb80175b215
661fb80174b215661fb80173b215451fb80172b215621fb80171b215621f
b80170b215631fb8016fb215641fb8016eb215661fb8016db215661fb801
6cb215661fb8016bb215661fb8016ab215661fb80169b215621fb80168b2
15621fb80167b215611fb80166b215641fb80165b215641fb80164b21566
1fb80163b215661fb80162b215661fb80161b215661fb80160b215661fb8
015fb215661fb8015eb215551fb8015db215451fb8015cb215451fb8015b
b215361fb8015ab215611fb80159b215621fb80158b215621fb80157b215
631fb80156b215641fb80155b215661fb80154b215661fb80153b215661f
b80152b215661fb80151b214401fb80150b214551fb8014fb214561fb801
4eb214831fb8014db2142d1fb8014cb214401fb8014bb214401fb8014ab2
14411fb80149b214401fb80148b214401fb80147b214411fb80146b2147e
1fb80145b214871fb80144b2147f1fb80143b214801fb80142b212461fb8
0141b212461fb80140b212461fb8013fb212461fb8013eb212441fb8013d
b212461fb8013cb211591fb8013bb211591fb8013ab2115b1fb80139b211
5b1fb80138b211471fb80137b211581fb80136b2115a1fb80135b2115b1f
b80134b2115b1fb80133b2112c1fb80132b211471fb80131b211551fb801
30b211571fb8012fb211571fb8012eb211581fb8012db211591fb8012cb2
11591fb8012bb2115a1fb8012ab2115a1fb80129b2115b1fb80128b2115b
1fb80127b2115b1fb80126b2115b1fb80125b211561fb80124b211561fb8
0123b211571fb80122b211581fb80121b211591fb80120b2115a1fb8011f
b2115a1fb8011eb2115b1fb8011db2115b1fb8011cb2115b1fb8011bb211
5b1fb8011ab2115b1fb80119b2105d1fb80118b2105e1fb80117b2105f1f
b80116b2105f1fb80115b2105f1fb80114b2105f1fb80113b2105f1fb801
12b2105d1fb80111b2105e1fb80110b2105f1fb8010fb2105f1fb8010eb2
105f1fb8010db2105f1fb8010cb2105d1fb8010bb2105e1fb8010ab2105f
1fb80109b2105f1fb80108b2105f1fb80107b2105f1fb80106b2105d1fb8
0105b2105e1fb80104b2105f1fb80103b2105f1fb80102b2105f1fb80101
b2105f1fb8010040ff0f621fff0f621ffe0f631ffd0f641ffc0f621ffb0f
621ffa0f621ff90f631ff80f641ff70f641ff60f641ff50f641ff40f621f
f30f621ff20f631ff10f641ff00f641fef0f641fee0f641fed0f621fec0f
621feb0f631fea0f641fe90f641fe80f641fe70f641fe60e671fe50e681f
e40e681fe30e681fe20e681fe10e671fe00e681fdf0e681fde0e681fdd0e
671fdc0e681fdb0e681fda0e681fd90e681fd80d6b1fd70d311fd60d6b1f
d50d6c1fd40d261fd30d261fd20d6c1fd10d2b1fd00d2b1fcf0d2b1fce0d
6b1fcd0d6c1fcc0d6d1fcb0d6b1fca0d6c1fc90d6d1fc80d6a1fc70d691f
c60d681fc50d671fc40d261fc30d311fc20d311fc10d311f40ffc00d311f
bf0d311fbe0d311fbd0c711fbc0c721fbb0c731fba0c741fb90c741fb80c
741fb70c711fb60c711fb50c721fb40c731fb30c741fb20c741fb10c741f
b00c741faf0b791fae0b7a1fad0b7c1fac0b7d1fab0b7e1faa0b7e1fa90b
7e1fa80b7e1fa70b7e1fa60b7e1fa50b2d1fa40b7e1fa30b7e1fa20b791f
a10b7e1fa00b6b1f9f0b791f9e0b7e1f9d0b7e1f9c0b791f9b0b7a1f9a0b
7c1f990b7d1f980b7e1f970b7e1f960b7e1f950b7e1f940b7e1f930b7e1f
920b6b1f910b2d1f900a4e1f8f0a4f1f8e0a671f8d0aa51f8c0aa71f8503
251f8403381f8301381f8255805581ab80557f557d557eab7d550b7d010b
7d1b7d4b7d7b7dab7ddb7d4012060a7c557a557bab7a557955775578ab77
55ba028600660285403c5576ab755504751475747503f47501ab75014475
0130750102007510752075030c7455725573ab7255007250728072b07204
3bb072e072020072010ab8ffc0b3721b1e46b8ffc0407c720d104671556f
5570ab6f556e666d556a03251f6938675568ab67556638645565ab645563
386255613860555f385d555eab5d555c385a555bab5a5559385855570325
1f5638545555ab54555338515552ab51554f384e554e03251f4d384b554c
ab4b554a38485549ab4855473846554503381f001c101c201c0310b8ffc0
404e1c1b1e46001b0142301b401be01bf01b04001bb01bc01b03120f1a1f
1a02290f1901434f19016f197f198f19030f18cf18024018292c460f17cf
17df17ef1704134017292e460016101620160315b8ffc0b3164d5446b8ff
c0b3163f4446b8ffc0b316313546b8ffc0401f162326460f15010f151f15
0245ef1501860003012001010001100120010308b8ffc0b401151f4603bd
0100010000050001019000542b4bb80800524bb008505bb00188b02553b0
0188b040515ab00688b000555a5b58b101018e59b101024354b0144b515a
58b101018e59858d8d001d424bb01d5358b203a0a01d42594bb0805358b2
0340401d42594bb0ff5358b20300001d42592b5e7375732b58403d0011e0
11f0110315bf10cf10020f0f010f0fff0f02400f3135460f0e1f0e020f0e
1f0eff0e03400e3137460f0d1f0d020f0d1f0dff0d0316400d313746b8ff
c040270c5054460f0b1f0b02553f0b4f0b02400b3f4346400b2d30460003
012001010001100120010308b8ffc0b301151f462b5e7375732b2b745e73
2b2b5e73742b73742b7374745e735901755e73742b2b2b2b5e732b5e732b
7374755e735e735e73755e732b5e73002b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b5e73755e732b2b5e735f73737373
742b2b2b2b2b2b5e73742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b012b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2bb1000243545841ff028400640283006402
8200640281006402800064027f0064027e0064027d0064027c0064027b00
64027a006402790064027800640277006402760064027500640274006402
7300640271006402700064026f0064026e0064026d0064026c0064026b00
64026a006402690064026800640267006402660064026500640264006402
630064026200640261006402600064025f0064025e0064025d0064025c00
64025b0064025a0064025900640258006402570064025600640255006402
54006402530064025200640251006402500064024f0064024e0064024d00
64024c0064024b0064024a00640249006402480064024700640246006402
4500640244006402430064024200640241006402400064023f0064023e00
64023d0064023c0064023b0064023a006402390064023800640237006402
360064023500640234006402330064023200640231006402300064022f00
64022e0064022d0064022c0064022b0064022a0064022900640228006402
270064022600640225006402240064022300640222006402210064022000
64021f0064021e0064021d0064021c0064021b0064021a00640219006402
180064021700640216006402150064021400640213006402120064021100
6402100064020f0064020e0064020d0064020c0064020b0064020a006402
09006402080064020700640206006402050064020441ff00640203006402
020064020100640200006401ff006401fe006401fd006401fc006401fb00
6401fa006401f9006401f8006401f7006401f6006401f5006401f4006401
f3006401f2006401f1006401f0006401ef006401ee006401ed006401ec00
6401eb006401ea006401e9006401e8006401e7006401e6006401e5006401
e4006401e3006401e2006401e1006401e0006401df006401de006401dd00
6401dc006401db006401da006401d9006401d8006401d7006401d6006401
d5006401d4006401d3006401d2006401d1006401d0006401cf006401ce00
6401cd006401cc006401cb006401ca006401c9006401c8006401c7006401
c6006401c5006401c4006401c3006401c2006401c1006401c0006401bf00
6401be006401bd006401bc006401bb006401ba006401b9006401b8006401
b7006401b6006401b5006401b4006401b3006401b2006401b1006401b000
6401af006401ae006401ad006401ac006401ab006401aa006401a9006401
a8006401a7006401a6006401a5006401a4006401a3006401a2006401a100
6401a00064019f0064019e0064019d0064019c0064019b0064019a006401
990064019800640197006401960064019500640194006401930064019200
640191006401900064018f0064018e0064018d0064018c0064018b006401
8a0064018900640188006401870064018600640185006441800184006401
830064018200640181006401800064017f0064017e0064017d0064017c00
64017b0064017a0064017900640178006401770064017600640175006401
74006401730064017200640171006401700064016f0064016e0064016d00
64016c0064016b0064016a00640169006401680064016700640166006401
6500640164006401630064016200640161006401600064015f0064015e00
64015d0064015c0064015b0064015a006401590064015800640157006401
5600640155006401540064015300640152006401500064014f0064014e00
64014c0064014b0064014a00640149006401480064014700640146006401
45006401440064014300642b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b00737373737373742b2b
2b2b2b2b2b2b2b2b185f5e0000>
[743 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 382 1 <00020061ffed046103ca004400590078b0852b58b20c2036bb01f9004500
2501bcb545162f2f004fb8020a400f162a49200c114aed1b4a54ed114d3b
b80102b1074d003fed3fed3fed1239393f012fe1c4392f1239e110e13939
31301b40132a49200c111b4aed6c1b4a1154ed6c114d073bb80102b26c07
4d00183f2b3f2b3f2b1239393f30315925140e0423222e02270e0323222e
0235343e0233321e02173e03373e0333321e0215140e04071e0333323e02
33321e0201342e0223220e0215141e0233323e02350461070d1824241425
46372606133c4f6037648e592a3467966340705638091113090504030a11
1911181f12080a121a1d221201121f2615121e17110605060502fe7d2740
532d3f59391a143455423b5b3d204d1f1e0c0a0705122d4b3a2b48351d4a
82b26674ba84472950774f486a4727040205040203080c0710435b6b6f69
2c55673913070607050e1901805e8655273c637e424783653d3661834d00
>OAAAAA+Calibri AddT42Char 
1 0 0 <00050000fe7303d2050e000300070039004d004e0097b0852b58bc000d01
520016003a01b5b5154444082d07be014300020020015400080001014340
0f04020db71a1a3f23b735068d031149b8012db43f078d0202003ffddefd
ce2ffddeed12392fed012fdde1dee110f1ce11392f33e1d4e131301b4014
1a0db76c1a1a3f3523b76c3503068d6c03113f49b8012d40096c3f400207
8d6c020200183f2b1ace2bce2f2bce2b12392f2b30315901112111011121
1101140e020707140623222e02352726363333323e0235342623220e0223
222e02353436373e0333321e0203140e0223222e0235343e0233321e0201
03d2fc5a034ffd06027e233f5633051e1a0f140d0605021c18122d3c2510
535b253c2e1d0703070603050807283742224b6c4522da07111d15161d12
0808121d16151d1107fddb050efaf2050efb43046cfb9403063b5c3f2403
980a0802040606b81e18192a3b2149560f1310040b13101116080712110c
28445cfd86151c120808121c15151d120808121dfd4d>OAAAAA+Calibri AddT42Char 
OAAAAA+Calibri /CharStrings get begin
/g1 1 def
end
OAAAAA+Calibri /Encoding get
dup 33 /g1 put
pop
end
%ADOEndSubsetFont
/JWUHYT+Calibri /OAAAAA+Calibri findfont ct_VMDictPut/JWUHYT+Calibri*1 [33{/.notdef}rp /g1 222{/.notdef}rp]JWUHYT+Calibri nfJWUHYT+Calibri*1 [25 0 0 -25 0 0 ]msf1025.94 342.48 mo(!)sh.895628 .7673 0 0 cmyk
%ADOBeginSubsetFont: QAAAAA+Calibri-Bold Initial
ct_T42Dict begin
-0.516 -0.348 1.262 1.039
 256 array 0 1 255 {1 index exch /.notdef put} for  /QAAAAA+Calibri-Bold
Type42DictBegin
[<00010000000b000b000b000b6376742000000000000000bc000006886670
676d000000000000074400000913676c796600000000000027f000000278
686561640000000000001058000000366868656100000000000010900000
0024686d747800000000000010b4000000086c6f636100000000000010bc
000000066d61787000000000000010c4000000206e616d65000000000000
10e40000002870726570000000000000110c000016e16764697200000000
00000000000000000000079e0000fe930000000000000000000000810081
009c00ab00b500ba00c100ca00d300f3010a0060008500bf00e300ea00f2
00fb010001070115011c0129000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000fe83056d
000d03c0000600170000fffaffe9fea9ffe90000050e000600170000fffa
ffe9fe93050e00170426000600170000fffaffe9ff12ffed050e00170426
000600170000fffaffe9fe93feb8fece060b0010050e0006001002cbfffa
fff001edfffa023f00060010ff36fffafff00287000600100000fffafff0
079efeaffe9f00000000000000000000000000700072007500780079007a
007b007d007e007f008300860087008800890085007f0086008b008c008d
008e008f0090009100920093009400950096009700980099009a009b009c
009d009e009f009200930094009b009c009e009e00960099009a009d009e
00a200a600a900ac00a200a300a400a500a700a800a900aa00ab00ac00ae
00a300a500a700a800aa00ab00ac00ad00ae00a000a100a300a600a700a9
00aa00ac00ad00af00af00b000b100b200b300b400b500af00af00b000b2
00b300b400b500b800c000b600b700b800b900ba00bb00bc00bd00be00bf
00c000c100c200b900ba00bc00bd00bf00c000c100c200b600b700b800b9
00ba00bb00bc00bd00be00bf00c000c100c200c000c100c200c300c400c5
00c600c700c800c900ca00cb00cc00cd00ce00cf00c300c400c500c600c7
00c800c900ca00cb00cc00cd00ce00cf00c300c400c500c600c700c800c9
00ca00cb00cc00cd00ce00cf00c500c800c900ca00cb00ce00cf00d000d1
00d200d300d400d500d600d700d900db00de00df00e000e200e300ec00d0
00d100d200d300d400d500d600d700d800d900da00db00dd00de00df00e0
00e100e300e500e900ec00ed00d100d300d400d500d800d900da00dc00e0
00e100e800d000d100d400d600e000e4010800f5010200fb00ff0108008f
009000960092009300990090009100970098009a009d00a400a600a700a8
00a900af009a00a200a300a700a900aa00ab00ac00ad00b000ad009b00aa
00ab00ad00b0009a00aa00ac00ad00ae00af00b100b900bb00bc00bd00be
00c100c200c300c400c500c600c700c800c900ca00cb00ce00b300b400b5
00b600b700b800bc00c200c500c800ca00cb00cd00ce00cf00d000c700b7
00b800b900bb00bc00be00c600c700c800c900cb00cf00d000b200b600b7
00c200c400c500c600c700cb00cc00cd00ce00cf00d000d100d400d500d7
00d800d900da00db00dc00de00df00e000e200e300e500e600d100d300d6
00d700d800da00db00dc00dd00de00df00e000e100e200e300e400e500d1
00d200d400d500da00db00dd00de00df00e000e100e200e600d200d300d4
00d700d800dd00de00e000e100e200e300e400e500e600d200da00e100e9
00ea00ec00e800e900ea00eb00ec00ed00eb00e700ea00eb00ec00ed00e7
00e900ea00ec00ed00ee00ef00f500ee00ef00f000f100f200f300f400f5
00f600ee00f000f200ef00f000f100f200f300f400f500f600ee00ef00f0
00f100f200f300f400f500f600f700f700f800f900fa00fb00fc00fd00f7
00f800f900fa00fb00fd00f700f800f900fa00fb00fc00fd00fd00fe00ff
010001010102010300fe010001010102010300fe00ff0100010101020103
01020103010401050106010701080109010a010c010d010e010f01100107
010401050106010701080109010a010b010d010e010f0110011101040105
0106010701080109010a010b010c010d010e010f01100111010401050106
01070109010e010f011201130114011501170118011a011b011c011d011e
011f01210122011201130114011501170119011b011c011d011e01200121
0123012401250113011401150116011701180119011a011b011c011d011f
01200117011c011d011e012001210129013001770129012b012e012f0130
01310134013501370139012b012d013001320134013a012e01300134013a
014200500062006c00fa05e802cc0114011400a000b10000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000005aa001500a0fff8ff42fea2
fdbc03b6015401cc0108010e00ff00f5006e014000a0055e006b0570fff6
0122fff10547ffec04faffec0131fff4000a03a0036600b400e1044c007c
40465f5e5d5c5b5a59585554535251504f4e4d4c4b4a4948474645444342
41403f3e3d3c3b3a39383736352f2e2d2c2826252423221f181411100f0d
0b0a090807060504030201002c4523466020b02660b004262348482d2c45
2346236120b02661b004262348482d2c45234660b0206120b04660b00426
2348482d2c4523462361b0206020b02661b02061b004262348482d2c4523
4660b0406120b06660b004262348482d2c4523462361b0406020b02661b0
4061b004262348482d2c0110203c003c2d2c20452320b0cd442320b8015a
51582320b08d44235920b0ed51582320b04d44235920b0042651582320b0
0d44235921212d2c20204518684420b001602045b04676688a4560442d2c
01b10b0a432343650a2d2c00b10a0b4323430b2d2c00b0282370b101283e
01b0282370b10228453ab10200080d2d2c2045b00325456164b050515845
441b2121592d2c2045b0004360442d2c01b00643b00743650a2d2c2069b0
4061b0008b20b12cc08a8cb8100062602b0c642364615c58b00361592d2c
8a03458a8a87b0112bb0292344b0297ae4182d2c4565b02c234445b02b23
442d2c4b525845441b2121592d2c01b005251023208af500b0016023edec
2d2c01b005251023208af500b0016123edec2d2c01b0062510f500edec2d
2c20b001600110203c003c2d2c20b001610110203c003c2d2c00b00743b0
06430b2d2c21210c6423648bb84000622d2c21b08051580c6423648bb820
00621bb200402f2b59b002602d2c21b0c051580c6423648bb81555621bb2
00802f2b59b002602d2c0c6423648bb84000626023212d2c452345602345
6023456023766818b08062202d2cb00426b00426b00425b0042545234520
b003266062636820b0032661658a2344442d2c2045b0005458b040442045
b04061441b2121592d2c45b1302f4523456160b0016069442d2c4b5158b0
2f2370b01423421b2121592d2c4b515820b0032545695358441b2121591b
2121592d2c45b01443b0006063b0016069442d2cb02f45442d2c45232045
8a60442d2c45234560442d2c4b235158b90033ffe0b134201bb333003400
5944442d2cb0164358b00326458a586466b01f601b64b020606620581b21
b04059b001615923586559b02923442310b029e01b2121212121592d2cb0
164358b004254564b020606620581b21b04059b0016123586559b0292344
b00425b00725082058021b0359b0052510b004252046b0042523423cb007
2510b006252046b00425b0016023423c2058011b0059b0052510b00425b0
29e0b0072510b00625b029e0b00425b00725082058021b0359b00425b003
254348b00625b00325b0016043481b2159212121212121212d2cb0164358
b004254564b020606620581b21b04059b0016123581b6559b0292344b005
25b00825082058021b0359b0042510b005252046b0042523423cb00425b0
072508b0072510b006252046b00425b0016023423c2058011b0059b00425
10b00525b029e0b02920456544b0072510b00625b029e0b00525b0082508
2058021b0359b00525b003254348b00425b0072508b00625b00325b00160
43481b2159212121212121212d2c02b00425202046b004252342b0052508
b003254548212121212d2c02b0032520b0042508b0022543482121212d2c
452320451820b00050205823652359236820b040505821b0405923586559
8a60442d2c4b53234b515a5820458a60441b2121592d2c4b545820458a60
441b2121592d2c4b53234b515a58381b2121592d2cb000214b5458381b21
21592d2cb002435458b0462b1b21212121592d2cb002435458b0472b1b21
2121592d2cb002435458b0482b1b21212121592d2cb002435458b0492b1b
212121592d2c208a08234b538a4b515a5823381b2121592d2c0020b20040
0325b0062649618b3812342d2c014623466023466123201020468a61b8ff
80628ab140408a704560683a2d2c208a2349648a2353583c1b21592d2c4b
52587d1b7a592d2cb012004b014b54422d2cb1020042b123018851b14001
88535a58b910000020885458b202010243604259b12401885158b9200000
40885458b2020202436042b12401885458b2022002436042004b014b5258
b2020802436042591bb940000080885458b202040243604259b940000080
63b80100885458b202080243604259b94000010063b80200885458b20210
0243604259b94000020063b80400885458b202400243604259595959592d
2c451868234b51582320452064b04050587c59688a6059442d2cb00016b0
0225b0022501b001233e00b002233eb10102060cb00a236542b00b234201
b001233f00b002233fb10102060cb006236542b0072342b00116012d2c20
b82000628a6023622d2cb0072558001b0159b0042510b00325b0022520b8
ffff545821cd1bed5921b006255cb006255a58b0092b5920b005254ab004
2547b004254760b0062547b0806361b00225b0005558b00325b007254963
59b0082558001b0159b00425b0062549b009255cb009255a58b0092b59b0
072546b0806361b0032520b0005558631b2159612320b0005558b080631b
21b08059b0592bb006255c586959b00425202010b00048233ab006265800
1b0159b0052658b003252f598a12233221212d2cb00625b00a2587b00625
b009254ab0005358b00625b00a251bb00925b0072559b00225b00225070c
b005256323b00625636020b94000040063535821b00426b00426b00a1bb9
4000040063655158b0042665b0042665b00a1bb00426b00426b000b00325
b003250b0d0ab0092eb00725b007250b0d0ab00b2eb00525b00525075959
20b0005558b00525b0052587b00725b007250bb0092510b00b25b0092620
b8ffff545821cd1bed59b00525b0052507b00825b00b254923b00625b006
2587b00a2510b00b25c15920b00051b800522378b00161b00225b00725b0
072507b00a25b00d254961b08062b00525b005250bb00a252338b00625b0
062587b00825b008250bb00a2510b00b25c4b00625b0062507b00925b00c
2549b0032554b8ffa723792121212121212121212121212d2c23b0005458
b9400000001bb900004000598ab0005458b9400000001bb90000400059b0
5b2b2d2c08b0005458b9400000001bb900004000590db05b2b2d2c8a8a08
0d8ab0005458b9400000001bb90000400059b05b2b2d2cb00426b0042608
0db00426b00426080db05b2b2d00000100000006333390900fbf5f0f3cf5
0019080000000000bbeb7ccc00000000d5968a63fbdafd350a1a08500001
0009000200000000000000010000079efdda00000aa0fbdafa860a1a0001
00000000000000000000000000000002040e000004ba004c0000009e013c
0000000100000002044200170110000800020010002f006000000cf8013f
00040001000000010012000100000000000600130000464c554257552b43
616c696272692d426f6c64000000b20903eb411d03430001003b03410001
008b0330009b033000020004032f0064032f0074032f00d4032f0004032d
032a0038001f032c032a0038001f032b032ab2381f24bf032a00a4032a00
b4032a0003ffc0032ab2232746b9ffc0032ab21c20464163033c0038033b
0055033a0038033900550338003803370055033600380335005503340038
0333005503230038032200550321003803200055002b03400001006b0340
0001033d003803220055006b033b00010024033100540331000200240331
003403310054033100f403310004001403270044032700e4032700030004
0327002403270044032700740327008403270094032700d4032700f40327
000800a40322000100340320000100140320002403200044032000540320
0074032000840320000602f9b21e1d1fb802f8b21e2b1fb802f7b21e2c1f
b802f6b21e2c1fb802f5b21e2c1fb802f4b21e2b1fb802f3b21e2c1fb802
f2b21e2c1fb802f1b21e2c1fb802f0b21e2c1fb802efb21e2c1fb802eeb2
1e2b1fb802edb21e2b1fb802ecb21e2c1fb802ebb21e2c1fb802eab21e2c
1fb802e9b21e2c1fb802e8b21e2c1fb802e7b21e2c1fb802e6b21e2c1fb8
02e5b21e2c1fb802e4b21e091fb802e3b21e2c1fb802e2b21e2c1fb802e1
b21d121fb802e0b21d191fb802dfb21d2f1fb802deb21d2f1fb802ddb21d
2f1fb802dcb21d2f1fb802dbb21d191fb802dab21d2f1fb802d9b21d2f1f
b802d8b21d2f1fb802d7b21d2f1fb802d6b21d2f1fb802d5b21d2f1fb802
d4b21d2f1fb802d3b21d2f1fb802d2b21d2f1fb802d1b21d2f1fb802d0b2
1d2f1fb802cfb21d2f1fb802ceb21d121fb802cdb21d121fb802ccb21d12
1fb802cbb21d121fb802cab21d191fb802c9b21d2f1fb802c8b21d2f1fb8
02c7b21d2f1fb802c6b21d2f1fb802c5b21d2f1fb802c4b21d2f1fb802c3
b21d2f1fb802c2b21d2f1fb802c1b21d2f1fb802c0b21d2f1fb802bfb21d
121fb802beb21d121fb802bdb21d2f1fb802bcb21d2f1fb802bbb21d2f1f
b802bab21d2f1fb802b9b21d2f1fb802b8b21d2f1fb802b7b21d2f1fb802
b6b21d2f1fb802b5b21d2f1fb802b4b21d2f1fb802b3b21d2f1fb802b2b2
1d2f1fb802b1b21c321fb802b0b21c321fb802afb21c331fb802aeb21c33
1fb802adb21c331fb802acb21c331fb802abb21c331fb802aab21c311fb8
02a9b21c311fb802a8b21c321fb802a7b21c321fb802a6b21c321fb802a5
b21c321fb802a4b21c321fb802a3b21c321fb802a2b21c331fb802a1b21c
331fb802a0b21c331fb8029fb21c331fb8029eb21c331fb8029db21c331f
b8029cb21c311fb8029bb21c311fb8029ab21c321fb80299b21c321fb802
98b21c321fb80297b21c321fb80296b21c321fb80295b21c331fb80294b2
1c331fb80293b21c331fb80292b21c331fb80291b21c331fb80290b21c33
1fb8028fb21c331fb8028eb21c311fb8028db21c321fb8028cb21c321fb8
028bb21c321fb8028ab21c321fb80289b21c321fb80288b21c331fb80287
b21c331fb80286b21c331fb80285b21c331fb80284b21c331fb80283b21c
331fb80282b21b341fb80281b21b341fb80280b21b341fb8027fb21b341f
b8027eb21b341fb8027db21b341fb8027cb21b341fb8027bb21b341fb802
7ab21b341fb80279b21b341fb80278b21b341fb80277b21b341fb80276b2
1b341fb80275b21b341fb80274b21b341fb80273b21b341fb80272b21b34
1fb80271b21b341fb80270b21b341fb8026fb21a351fb8026eb21a351fb8
026db21a351fb8026cb21a351fb8026bb21a351fb8026ab21a351fb80269
b21a351fb80268b21a351fb80267b21a351fb80266b21a351fb80265b21a
351fb80264b21a351fb80263b21a351fb80262b21a351fb80261b21a351f
b80260b21a351fb8025fb21a351fb8025eb21a351fb8025db21a351fb802
5cb21a351fb8025bb21a351fb8025ab21a351fb80259b219371fb80258b2
19371fb80257b219371fb80256b219371fb80255b219371fb80254b21937
1fb80253b219371fb80252b219371fb80251b219371fb80250b219371fb8
024fb219371fb8024eb219371fb8024db219371fb8024cb219371fb8024b
b219371fb8024ab219371fb80249b219371fb80248b219371fb80247b219
371fb80246b219371fb80245b219371fb80244b219371fb80243b219371f
b80242b219371fb80241b219371fb80240b219371fb8023fb219371fb802
3eb219371fb8023db219371fb8023cb219371fb8023bb219371fb8023ab2
19371fb80239b218391fb80238b218391fb80237b218391fb80236b21839
1fb80235b218391fb80234b218391fb80233b218391fb80232b218391fb8
0231b218391fb80230b218391fb80301b2182e1fb8022fb218391fb8022e
b218391fb8022db218391fb8022cb218391fb8022bb218391fb8022ab218
391fb80229b218391fb80228b218391fb80227b218391fb80226b218391f
b80225b2173b1fb80224b2173b1fb80223b217321fb80222b2173a1fb802
21b2173b1fb80220b2173b1fb8021fb2173b1fb8021eb2173b1fb8021db2
173b1fb8021cb2173b1fb8021bb2173b1fb8021ab2173b1fb80219b2173b
1fb80218b2173b1fb80217b2173b1fb80216b2173b1fb80215b217321fb8
0214b2173a1fb80213b2173b1fb80212b2173b1fb80211b2173b1fb80210
b2173b1fb8020fb2173b1fb8020eb2173b1fb8020db2173b1fb8020cb217
3b1fb8020bb2173b1fb8020ab2173b1fb80209b217321fb80208b217321f
b80207b2173b1fb80206b2173b1fb80205b2173b1fb80204b2173b1fb802
03b2173b1fb80202b2173b1fb80201b2173b1fb80200b2173b1fb801ffb2
173b1fb801feb2173b1fb801fdb2173b1fb801fcb2173b1fb801fbb2173b
1fb801fab2173b1fb801f9b2173b1fb801f8b2173b1fb801f7b217321fb8
01f6b2173a1fb801f5b2173b1fb801f4b2173b1fb801f3b2173b1fb801f2
b2173b1fb801f1b2173b1fb801f0b2173b1fb801efb2173b1fb801eeb217
3b1fb801edb2173b1fb801ecb2173b1fb801ebb2173b1fb801eab2173b1f
b801e9b2173b1fb801e8b2173b1fb801e7b217321fb801e6b216231fb801
e5b216231fb801e4b216371fb801e3b216371fb801e2b216381fb801e1b2
16381fb801e0b216431fb801dfb216441fb801deb216441fb801ddb21644
1fb801dcb216451fb801dbb216461fb801dab216461fb801d9b216461fb8
01d8b216231fb801d7b216231fb801d6b216381fb801d5b216431fb801d4
b216431fb801d3b216431fb801d2b216441fb801d1b216461fb801d0b216
461fb801cfb216461fb801ceb216461fb801cdb216461fb801ccb216461f
b801cbb216431fb801cab216231fb801c9b216231fb801c8b216371fb801
c7b216371fb801c6b216381fb801c5b216421fb801c4b216431fb801c3b2
16441fb801c2b216451fb801c1b216461fb801c0b216461fb801bfb21646
1fb801beb216461fb801bdb216461fb801bcb216461fb801bbb216461fb8
01bab216371fb801b9b216381fb801b8b216421fb801b7b216431fb801b6
b216431fb801b5b216431fb801b4b216441fb801b3b216441fb801b2b216
441fb801b1b216451fb801b0b216451fb801afb216451fb801aeb216461f
b801adb216461fb801acb216461fb801abb216461fb801aab216461fb801
a9b215341fb801a8b215411fb801a7b215411fb801a6b2154d1fb801a5b2
154e1fb801a4b2154f1fb801a3b215521fb801a2b215401fb801a1b2154d
1fb801a0b2154e1fb8019fb2154f1fb8019eb215521fb8019db2154d1fb8
019cb215401fb8019bb2154d1fb8019ab2154e1fb80199b2154e1fb80198
b2154f1fb80197b2154f1fb80196b215501fb80195b215521fb80194b215
521fb80193b215521fb80192b215411fb80191b2154f1fb80190b215501f
b8018fb215501fb8018eb215511fb8018db215521fb8018cb215521fb801
8bb215521fb8018ab214581fb80189b214591fb80188b2145c1fb80187b2
145d1fb80186b2144a1fb80185b2145b1fb80184b2145c1fb80183b21459
1fb80182b2145d1fb8018140af145d1ff00f451fef0e481fe00c4e1fc20c
4e1fc10c4e1fc00c4e1fbf0b561fb20b561fb10b561fb00b561faf0b561f
ae0b561fad0b561fac0b561fab0b561faa0b561fa90b561fa80b561fa70b
561fa60b561fa50b561fa40b561fa30b561fa20b561fa10b561fa00b561f
9f0b561f9e0a681f9a0a681f990a681f980a681f970a681f960a681f950a
681f940a681f930a681f920a681f910a681f9009681f8f09681f8e09681f
8d09681f8c09681f410902fc02fa0056001f02fb02fa0068001f017fb213
321fb8017eb212371fb80174b212371fb80173b211421fb80172b211421f
b80171b211421fb80170b211421fb8016fb211421fb8016eb211421fb801
6db211421fb8016cb211421fb8016bb211421fb8016ab211421fb8013cb2
11421fb8013bb210421fb8013ab210421fb80139b210421fb80138b21042
1fb80137b210421fb80136b210421fb80135b210421fb80134b210421fb8
0133b210421fb80132b20f451fb80131b20f451fb80130b20f451fb80112
b20f451fb80111b20f451fb80110b20f451fb8010fb20f451fb8010eb20f
451fb8010db20e481fb8010cb20e481fb8010bb20e481fb8010ab20e481f
b80109b20e481fb80108b20e481fb80107b20d4a1fb80106405b0d4a1fee
0d4a1fed0d4a1fec0d4a1feb0d4a1fea0d4a1fe90c4e1fdf0c4e1fde0c4e
1fdd0c4e1fdc0c4e1fdb0c4e1fda0c4e1fd90b561fd80b561fd70b561fbe
0b561fbd0b561fbc0b561fbb0b561fba0b561f9d0a681f9c0a681fb80180
b213321fb8017ab211401fb80179b211421fb80178b211421fb80177b211
421fb80176b211421fb80175b211421fb80143b211421fb80142b210421f
b80141b210421fb80140b210421fb8013fb210421fb8013eb210421fb801
3db20f451fb80115b20f451fb80114b20f451fb80113b20f451fb9030303
02b2401fa4be030200b4030200c4030200030300b213321fb8017bb21332
1fb80153b212371fb80152b211401fb80151b211401fb80150b211401fb8
014fb211401fb8014eb211401fb8014db211401fb8014cb211401fb8014b
b211401fb8014ab211401fb80149b211401fb80148b211401fb80147b211
401fb80146b211401fb80145b211401fb80144b211401fb80122b211401f
b80121b210421fb80120b210421fb8011fb210421fb8011eb210421fb801
1db210421fb8011cb210421fb8011bb210421fb8011ab210421fb80119b2
10421fb80118b20f451fb80117b20f451fb80116409b0f451ffd0f451ffc
0f451ffb0f451ffa0f451ff90e481ff80e481ff70e481ff60e481ff50e48
1ff40e481ff30d4a1ff20d4a1ff10d4a1fe70d4a1fe60d4a1fe50d4a1fe4
0d4a1fe30d4a1fe20d4a1fe10c4e1fcd0c4e1fcc0c4e1fcb0c4e1fca0c4e
1fc90c4e1fc80c4e1fc70c4e1fc60c4e1fc50c4e1fc40c4e1fc30c4e1fb8
0c4e1fb70b561fb60b561fb50b561fb40b561fb30b561f9b0a681fb802fd
b212371fb8017db212371fb8017cb212371fb80169b2112e1fb80168b211
2e1fb80167b211401fb80166b211401fb80165b211401fb80164b211401f
b80163b211401fb80162b211401fb80161b211401fb80160b211401fb801
5fb211401fb8015eb211401fb8015db211401fb8015cb211401fb8015bb2
11401fb8015ab211401fb80159b211401fb80158b211401fb80157b21140
1fb80156b211401fb80155b211401fb80154b211401fb8012fb211401fb8
012eb210421fb8012db210421fb8012cb210421fb8012bb210421fb8012a
b210421fb80129b210421fb80128b210421fb80127b210421fb80126b210
421fb80125b20f451fb80124b20f451fb80123b20f451fb80105b20f451f
b80104b20f451fb80103b20f451fb80102b20f451fb80101b20e481fb801
0040a20e481fff0e481ffe0e481fe80c4e1fd60c4e1fd50c4e1fd40c4e1f
d30c4e1fd20c4e1fd10c4e1fd00c4e1fcf0c4e1fce0b561fb90b561f8503
251f84032e1f83012e1f8248805581ab80557f487d557eab7d550b7d3b7d
4b7d030b7d1b7d4b7d7b7dab7ddb7d067c487a557bab7a55047a147a020a
7948775578ab77550b77010c764875555475e475f4750314755475647574
759475d475e47507a475b475c47503b8ffc0401275383b46807590750214
757475020075010fb8ffc04021750b0e467448725573ab72550472347202
3bf47201e07201023072015072607202b8ffc0b372242846b8ffc0403572
161a461072307240720371486f5570ab6f554f6f6f6f7f6f9f6fbf6f057f
6f8f6f02af6fbf6f02406f090d466e486d55df6d0100bc02ff001002ff00
c002ffb2030a6fbb02fe000100ef02fe40ff016b032e1f6a03251f692e67
5568ab6755662e645565ab6455632e6255612e60555f2e5d555eab5d555c
2e5a555bab5a55592e58555703251f562e545555ab5455532e515552ab51
554f2e4e554e03251f4d2e4b554cab4b554a2e485549ab4855504801472e
46554503361f001f01001e01001e701e801ef01e040b601d701d02701de0
1df01d03701cf01c027f1b010f1a7f1a8f1a030f1a8f1a020f1a8f1a020f
191f198f199f19af19050f198f199f19030c701280120270118011023011
4011d011e011040011a011020f8f0f9f0faf0f034f0f5f0fef0fff0f04af
0f01af0ebf0ecf0e034f0e5f0e6f0e030f0eaf0ebf0e0310400e2e31460f
0d1f0d40472f0d033c2f0d3f0d4f0d038f0d01400d2e3246400d2427463f
0c4f0c5f0c039f0c01400c262946ef0aff0a02400a242746ef09ff0902ff
09010003012001010001100120010308b8ffc0b401151f4603bd01000100
00050001019000542b4bb807ff524bb008505bb00188b02553b00188b040
515ab00688b000555a5b58b101018e59b101024354b0144b515a58b10101
8e59858d8d001d424bb01d5358b203a0a01d42594bb0805358b20340401d
42594bb0ff5358b20300001d42592b5e73757373742b732b73742b2b7374
5e732b5e7374757374755e73747573015e7374737475757473745e737473
002b2b732b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b7374
5e73732b2b7374752b2b732b2b73755f75755e732b2b2b5e7373732b7374
752b5e732b2b5e732b2b73742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b732b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b0073747373747374732b73
742b2b2b2b2b2b2b2b2b732b2b2b73737373185f5e00000000>
[633 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 316 1 <0002004cffe9049b03d700440059004db20c2036bb0270004500250202b5
45162f2f004fb80274b6162a49200c114ab8011bb21b4a54b8011bb2114d
3bb80121b1074d003fed3fed3fed1239393f012fedc4392f1239ed10ed39
39303125140e0423222e02270e0323222e0235343e0233321e02173e0337
3e0333321e0215140e04071e0333323e0233321e0201342e0223220e0215
141e0233323e0235049b090f1c292d182c4a3a280b153d4f5e3568986531
3a6fa2693d6b543b0d0d0e070505030d18251b242f1a0b0a11191d211101
0f1a2010121c16110706090603fe341e35452734492f16112b4637304b32
1b6a2f2b0f0a080510263f30253d2c184782b76f74bd864822415f3e374f
351d050406050305090f0914495d6a6c662b3f4d2c0f060606081625015c
4d724a2331536c3b3d6f55322e516f41>QAAAAA+Calibri-Bold AddT42Char 
1 0 0 <00050000fe7303db050e000300070039004d004e0054bc000d019d001700
3a01cbb44444082d07be019d0002002001cb00080001019d401304020d1b
1b3f2335068c035111493f078c0254003ffddeddc63ffddecd12392fcd01
2fddedd6ed10fdc611392fedd4ed3031011121110111211101140e020707
060623222e02352726363333323e0235342623220e0223222e0235343637
3e0333321e0203140e0223222e0235343e0233321e020103dbfc4f0345fd
240279213b533105012b25171f130808031f1e0d2533200f4b4d2336281a
05040806030508072736422355774a22ce0a18271c1d27180a0a18271d1c
27180afdc2050efaf2050efb570444fbbc02e839583e2406790d0b020509
089d281e1524311c3d4b0d0f0d050e1b171a1c0708110e0a2a4861fd991a
25170a0a17251a1c25180a0a1825fd3b>QAAAAA+Calibri-Bold AddT42Char 
QAAAAA+Calibri-Bold /CharStrings get begin
/g1 1 def
end
QAAAAA+Calibri-Bold /Encoding get
dup 33 /g1 put
pop
end
%ADOEndSubsetFont
/JWUHYU+Calibri-Bold /QAAAAA+Calibri-Bold findfont ct_VMDictPut/JWUHYU+Calibri-Bold*1 [33{/.notdef}rp /g1 222{/.notdef}rp]JWUHYU+Calibri-Bold nfJWUHYU+Calibri-Bold*1 [32 0 0 -32 0 0 ]msf233.771 281.28 mo(!)sh618.279 267.827 mo
647.218 267.827 676.157 267.827 709.068 267.827 cv
741.979 267.827 815.745 267.827 815.745 267.827 cv
.750179 .679652 .670191 .901488 cmyk
@
617.902 251.885 mo
646.896 260.24 675.891 268.595 708.864 267.866 cv
741.838 267.137 815.745 247.513 815.745 247.513 cv
@
282.169 238.77 mo
395.811 281.99 li
394.566 285.261 li
280.925 242.042 li
cp
395.189 283.626 mo
391.756 272.959 li
405.003 287.358 li
385.535 289.316 li
cp
.15848 1 1 .0960708 cmyk
f
280.187 238.248 mo
395.239 266.969 li
394.392 270.365 li
279.34 241.644 li
cp
394.815 268.667 mo
390.143 258.482 li
405.003 271.21 li
385.905 275.461 li
cp
f
270.016 261.69 mo
263.206 263.121 256.525 258.76 255.094 251.95 cv
255.067 251.817 255.041 251.684 255.017 251.551 cv
.750179 .679652 .670191 .901488 cmyk
25400 lw
gsave
[-7.754e-05 1.36951e-05 -1.36951e-05 -7.754e-05 282.025 259.576 ]ct
@
grestore newpath
%ADOBeginSubsetFont: MAAAAA+GillSansMT-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal JWUHYS+GillSansMT-Bold gcheck setglobal} if

1 0 1 <> JWUHYS+GillSansMT-Bold AddT42Char 
1 42 2 <0001005cfe2903080587000b0016400a051b00040400000283082ffd322f
3c003f3f31300100111001232602111012370308fe94016cd3defbfddc05
87fe6ffde3fde9fe67b201fc0102010101ffae00>JWUHYS+GillSansMT-Bold AddT42Char 
1 122 3 <0001000cfe2902b80587000b0016400a001b04040400000283082ffd322f
3c003f3f31301300111001331612111002070c016dfe93d3dcfdfadffe29
019b0215021d0191aefe01fefffefffe06b5>JWUHYS+GillSansMT-Bold AddT42Char 
1 200 4 <0001004a0152026002620003000fb50393020000022f332f002fed313001
1121110260fdea0262fef0011000>JWUHYS+GillSansMT-Bold AddT42Char 
1 468 7 <00020062ffee01c703b0000b00170021401209940f030103100f94151312
7d0c067d0c002f33ed10ed003fed3f5ded31301334363332161514062322
261134363332161514062322266269494a69694a496969494a69694a4969
02fe49696949496969fdeb496969494a6868>JWUHYS+GillSansMT-Bold AddT42Char 
1 576 8 <000200060000063905750007000a008d40511a090103080902040a090905
00020902c801001401010007050905c8060714060607090703040804933f
0a4f0abf0a030a0a0701020205061200070300080302040105070a040409
0640010101010909062f33192f33182f5d11121739111739003f3c3f3c3c
103c12392f5ded3c103c113387052e2b877dc4872e182b877dc407103c3c
073c3c3130005d0901210321032109010b0103cd026cfe8a73fd8f68fe8f
023301b0e1cd0575fa8b0114feec0575fc93021ffde1>JWUHYS+GillSansMT-Bold AddT42Char 
1 778 9 <0003009c000005310575000d0016001f0040402406060f932f1701171700
18930d120e930003137d04041c7d10090109b8210f187f0db52010f6fd3c
10f65ded392fed003fed3fed12392f5ded39192f31301321321615140716
1615140623210111333236353426230311333236353426239c025cd8f7bf
9099faf3fd58015cb6545e5e54b6c48b7a74610575d08eb66126c080b6e4
0475fed556414054fdd5feb64d5f4955>JWUHYS+GillSansMT-Bold AddT42Char 
1 1496 14 <00020044ffee043f03c3001a0023009cb368080115b8ffd8b315163715b8
ffceb30d0d3715b8ffce4059090b374f1c40225f1c50226f1c60227c1cdf
1cef1c091c96400de00d020d0d0714000019960303229607131140090c37
11110f951410051c1c0d853a0a590a50160316c011d01102111611001f10
1f401fd01f041f830abb2410f6ed5d33332f5d2f5dfd3c1133003fed332f
2b3fed3c10ed322f1112392f5ded5d2b2b2b3130015d2515062322270623
2226353436253623220735363320190114333225350e011514163332043f
94828c1a9b9c6e9a9f01920aaebd9fbadf01903125fe81956f382854e9a5
566a6a8b5c7b97779e9ef273fee1fe524231e4345340293b>JWUHYS+GillSansMT-Bold AddT42Char 
1 1760 15 <00020077ffee04600575000e0019003a402369050112950913189503100d
120e0306060f1502158366060106bc1b01100c850db91a10f6fd3c3c10fe
5ded5d003f3f3fed3fed3130005d01113633320015140223222715211101
1116333236353426232201a0757ecc0101f7c18c7cfed701295a566a797f
68510575fe0648fef0d8d9feec5a480575fd45fe4a509f8c8895>JWUHYS+GillSansMT-Bold AddT42Char 
1 1906 16 <00010052ffee03b403c30015005bb501240c19370bb8ffdc40170c193747
0d5f070240000100400c0f370000149503130cb8ffc040190c10370c0c0e
95091037110100420cbc171183b6060106bb1610f65ded10fee65d003fed
322f2b3fed322f2b5d3130005d2b2b011506232200353400333217152623
2206151416333203b4ae91f9fed6012de996a87b7785a09c7f5e0102d53f
010bdcd701173edd3f947c7d9900>JWUHYS+GillSansMT-Bold AddT42Char 
1 2070 17 <00020048ffee04310575000e00190037402102121895051312950b100e03
0808010d0f028501ba1b001501158368080108bb1a10f45ded5d10fefd3c
3c5d003f3fed3fed3f313001112135062322023534003332171902262322
0615141633320431fed77294bdfd0101c97d795155707d7c675b0575fa8b
4c5e0118d3d801123c01eefb8d01c3379c8d829d>JWUHYS+GillSansMT-Bold AddT42Char 
1 2210 18 <0002004cffee042e03c300110016007c405801280c1937340e5605540a59
0b6605640a690b0700001000200040005000600006e000f0000200001000
02000010bf0d010d970f12011212091095031315400d0d3715950910b606
0113840c00000cbc1812420d8306bb1710f6fde510ee322f10ed5d003fed
2b3fed12392f5ded5d11332f715d5d3130005d2b01150623220035340033
320007211e01333201212623220414aafbf9fed60118d9da011709fd5a09
a48aa7fe28019a18b5b70125bb7c010bdcd80116fedbf6808a01a6ce>JWUHYS+GillSansMT-Bold AddT42Char 
1 2418 19 <0001001f000002f805870014003f4022101012960d0403079500080f0512
0fdf0201020f0207070004090485af05bf0502057d2f7118ed3c103c332f
32322f5d2f003f3f3cfd3c3ffd322f313001331523112111233533353436
333217152623221501cf8787fed78787e0be2e865d28a403b0cbfd1b02e5
cb2fc7e112f00ca5>JWUHYS+GillSansMT-Bold AddT42Char 
1 2546 20 <0001007f00000431057500110033b90005ffda401a090b370c9504100910
1211030f0901098508ba13010f8510b91210f6fd3c10f4ed5d003f3f3c3f
ed3130002b01113336333216151121113423220711211101a8047caf97c3
fed7996562fed70575fdb09ebfaafda6021bce8ffda60575>JWUHYS+GillSansMT-Bold AddT42Char 
1 2660 21 <00020071000001b80587000b000f004d40340f1101094016163709401212
370f091f093f0903098303040e120f0f06420d00420d85100e200e300e03
000e01400e010e0e11101112392f72715dede410e4003f3f3fed5d2b2b31
30015d133436333216151406232226051121117160434460604443600139
fed704e344606044436161f0fc5003b0>JWUHYS+GillSansMT-Bold AddT42Char 
1 2796 22 <00010081000001aa05750003002d400a0f050102120303018502b8ffc0b3
181b3702b8ffc0b60a0c37020205041112392f2b2bed003f3f3130015d01
11211101aafed70575fa8b057500>JWUHYS+GillSansMT-Bold AddT42Char 
1 2870 23 <0002004cffee047503c3000b0014002f401e0c960613109600100f0eb909
020e8377037813b6030303bc16138309bb1510f6ed10fe5ded5d003fed3f
ed31300132001514002322003534001332111023220615100262de0135fe
c6d9ebfed50131e5d5d5667303c3fefce8e9ff000111dade010cfcdb0141
0133a297fec5>JWUHYS+GillSansMT-Bold AddT42Char 
1 2996 24 <00020075fe29046203c3000e00190035402012950913189503100d1b0e0f
06060f1502158366060106bc1b0b0f00850eb91a10f6fd3c3c10fe5ded5d
003f3f3fed3fed3130011536333212151402232227112111011116333236
3534262322019e7797b8feffd28271fed7012954586c7f756a5903b05265
feeacae3feee41fdfa0587fef4fe4e3e9b848796>JWUHYS+GillSansMT-Bold AddT42Char 
1 3136 25 <00010083000003a203c3000f001d400f07070e1209c304100f0f0d850eb9
1010f6ed003f3fed3f322f31300111331233321703262322061511211101
ac0481ac5273526e42678dfed703b0fef2012156fef946ff15fe6803b000
>JWUHYS+GillSansMT-Bold AddT42Char 
1 3226 26 <0001004cffee033303c3001d00fcb516402d2e3707b8ffc040092d2e3716
4020213707b8ffc04016202137660701163c1617370840161737161e1919
3707b8ffe24043191937d007d408e007e008042c0b251b02160a19196a07
9508a508d0080616080707d6171614171716014014173717071608040d1c
0f10011040141837101000010101b8ffc0403b14173701010312960d1303
961c10c70ac8190217071608040a19014014183701010a100c1014201403
10101914840a403649370ab81f058419bb1e10f6ed10fe2bed11332f5d11
392f2b111217395d003fed3fed11337c2f2b7118327d2f2b711811121739
2b870e2e2b870e7dc4015d005d5d2b2b2b2b3130015d2b2b2b2b01152623
22151416041615140623222735163332353426242635343633320304aa91
6b2d012c7cc8b9be94b67b9035fed070d7b0a9037dd368491325779c5d93
a045d150461b30768e5781a2>JWUHYS+GillSansMT-Bold AddT42Char 
1 3568 27 <00010019ffee032104d90014004140231212140b0d1b0d2b0d0308080695
0b09090b130f0295140f080008001610101403850e2ffd3c332f1133332f
2f003ffd3c3f332f10fd322f005d11332f31300115211114163332371506
232226351123350133110321fea84d445c6b8e85aec087018b2503b0cbfe
7b465137d73bb4ae01953a01bafed700>JWUHYS+GillSansMT-Bold AddT42Char 
1 3704 28 <0001007bffee042f03b000110030401d00120b9503130f070f0514090b37
0e42008511ba13000901098506b91210f6ed5d10f6fde42b003f3c3fed3f
3130213506232226351121111433323635112111030683ae9ac001299554
77012b8799bea8025cfdb8b4831f025afc50>JWUHYS+GillSansMT-Bold AddT42Char 
1 3812 29 <00010004ffee041003b000060091405f3403d003e00303db00d406eb00e4
0604090006061900160604d900d606e900e60604d602d904e602e9040406
030404d605061405050600030202d6010014010100030600120504040201
0f04060500020301300501050530037403020303012f33192f5d33182f5d
11123939113939003f3c3c103c3f3c3387052e2b877dc4872e182b877dc4
015d5d5d5d005d31300501211b01210101b8fe4c013ec8cb013bfe4e1203
c2fdf80208fc3e00>JWUHYS+GillSansMT-Bold AddT42Char 
1 4000 30 <00010002fe3b041203b00007008940510000100022003500340135033605
f20008000001060605030203040207010000d60602140606020605060205
d6040314040403060304021b00070705040f070003050604023000010000
300601060206042f3333192f5d33182f5d2f111239391139003f3c3c103c
3f12393987052e2b087d10c487052e182b7d10c48708103c08c401715d31
300901210901211b010412fd88fec40115fe8f013dc7d503b0fa8b025f03
16fe1b01e500>JWUHYS+GillSansMT-Bold AddT42Char 
JWUHYS+GillSansMT-Bold /CharStrings get begin
/space 1 def
/parenleft 2 def
/parenright 3 def
/hyphen 4 def
/colon 7 def
/A 8 def
/B 9 def
/a 14 def
/b 15 def
/c 16 def
/d 17 def
/e 18 def
/f 19 def
/h 20 def
/i 21 def
/l 22 def
/o 23 def
/p 24 def
/r 25 def
/s 26 def
/t 27 def
/u 28 def
/v 29 def
/y 30 def
end
JWUHYS+GillSansMT-Bold /Encoding get
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 45 /hyphen put
dup 58 /colon put
dup 65 /A put
dup 66 /B put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 121 /y put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/JWUHYS+GillSansMT-Bold*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen 3{/.notdef}rp /one /two 7{/.notdef}rp /colon 6{/.notdef}rp /A /B /C 8{/.notdef}rp /L /M /.notdef /O 17{/.notdef}rp /a /b /c /d /e /f /.notdef /h /i 2{/.notdef}rp /l 2{/.notdef}rp /o /p /.notdef /r /s /t /u /v 2{/.notdef}rp /y 2{/.notdef}rp /bar 131{/.notdef}rp]JWUHYS+GillSansMT-Bold nfJWUHYS+GillSansMT-Bold*1 [25 0 0 -25 0 0 ]msf416.114 286.32 mo(Case A)[19.2499 13.2501 10.6251 13.7501 4.375 0 ]xsh288.849 83.04 mo(Case B)[19.2499 13.2501 10.6251 13.7501 6.875 0 ]xsh409.573 256.56 mo(Case C)[19.2499 13.2501 10.6251 13.7501 6.875 0 ]xsh826.85 88.56 mo(Case B: )[19.2499 13.2501 10.6251 13.7501 6.875 17.3749 4.24994 0 ]xsh826.85 112.56 mo(occupied)[14.8748 12.5 12.5 14.4998 14.4998 6.74994 13.7501 0 ]xsh930.725 112.56 mo(-)sh938.975 112.56 mo(virtual)[12.7498 6.74994 11.6249 10.1252 14.4998 13.2501 0 ]xsh826.85 286.32 mo(Case A )[19.2499 13.2501 10.6251 13.7501 4.375 19.5002 0 ]xsh914.48 286.32 mo(\(flat\): )[9.62482 7.50006 6.74994 13.2501 10.1252 9.62482 4.25494 0 ]xsh826.85 310.32 mo(occupied)[14.8748 12.5 12.5 14.4998 14.4998 6.74994 13.7501 0 ]xsh930.725 310.32 mo(-)sh938.975 310.32 mo(occupied)[14.8748 12.5 12.5 14.4998 14.4998 6.74994 13.7501 0 ]xsh826.85 226.56 mo(Case C: )[19.2499 13.2501 10.6251 13.7501 6.875 19.2499 4.24988 0 ]xsh826.85 250.56 mo(occupied)[14.8748 12.5 12.5 14.4998 14.4998 6.74994 13.7501 0 ]xsh930.725 250.56 mo(-)sh938.975 250.56 mo(hybrid)[13.6248 12.7498 14.4998 11.125 6.74988 0 ]xshgrestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/JWUHYQ+GillSansMT*1 uf/JWUHYQ+GillSansMT uf/JAAAAA+GillSansMT uf/JWUHYU+Calibri-Bold*1 uf/JWUHYU+Calibri-Bold uf/QAAAAA+Calibri-Bold uf/JWUHYT+Calibri*1 uf/JWUHYT+Calibri uf/OAAAAA+Calibri uf/JWUHYR+CambriaMath*1 uf/JWUHYR+CambriaMath uf/LAAAAA+CambriaMath uf/JWUHYS+GillSansMT-Bold*1 uf/JWUHYS+GillSansMT-Bold uf/MAAAAA+GillSansMT-Bold ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
