%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: modes.pdf
%%Creator: (Adobe Acrobat 15.6.0)
%%For: rustam
%%CreationDate: 11/23/18, 3:51 PM
%%BoundingBox: 0 0 1080 360
%%HiResBoundingBox: 0 0 1080 360
%%CropBox: 0 0 1080 360
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 738 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2018-11-23T20:51:30Z"
   xmp:CreatorTool="PowerPoint"
   xmp:ModifyDate="2018-11-23T20:51:30Z"
   pdf:Keywords=""
   pdf:Producer="Mac OS X 10.13.6 Quartz PDFContext"
   dc:format="application/pdf">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">modes</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -360 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 360 li
1080 360 li
1080 0 li
cp
clp
gsave
0 360 mo
1080 360 li
1080 0 li
0 0 li
cp
clp
0 360 mo
1080 360 li
1080 0 li
0 0 li
cp
false sop
0 0 0 0 cmyk
f
0 360 mo
1080 360 li
1080 0 li
0 0 li
cp
f
2.25 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
405.198 287.337 mo
359.217 326.739 265.902 337.435 196.771 311.228 cv
182.319 305.749 169.641 298.885 159.298 290.94 cv
280.027 239.884 li
cp
.895628 .7673 0 0 cmyk
@
281.03 88.5066 mo
349.456 106.013 404.925 188.619 404.924 273.014 cv
404.924 277.9 404.734 282.735 404.355 287.502 cv
281.028 241.316 li
cp
.15848 1 1 .0960708 cmyk
28575 lw
gsave
[-2.76352e-05 -7.37313e-05 7.37313e-05 -2.76352e-05 227.119 433.149 ]ct
@
grestore newpath
280.428 239.146 mo
453.634 305.337 li
452.831 307.439 li
279.625 241.248 li
cp
453.232 306.388 mo
451.036 299.527 li
459.537 308.797 li
447.02 310.036 li
cp
.518151 .434821 .434821 .0814221 cmyk
f
278.902 240.197 mo
278.902 53.3642 li
281.152 53.3642 li
281.152 240.197 li
cp
280.027 53.3641 mo
274.402 57.8641 li
280.027 46.6141 li
285.652 57.8641 li
cp
f
279.59 239.16 mo
91.8526 318.123 li
92.725 320.197 li
280.463 241.234 li
cp
92.2896 319.16 mo
94.2568 312.23 li
86.0676 321.777 li
98.6184 322.6 li
cp
f
%ADOBeginSubsetFont: KAAAAA+TimesNewRomanPSMT Initial
ct_T42Dict begin
-0.566 -0.305 2.043 1.039
 256 array 0 1 255 {1 index exch /.notdef put} for  /KAAAAA+TimesNewRomanPSMT
Type42DictBegin
[<00010000000b000b000b000b6376742000000000000000bc000010846670
676d000000000000114000000a59676c79660000000000002cac00005128
686561640000000000001b9c00000036686865610000000000001bd40000
0024686d74780000000000001bf80000008c6c6f63610000000000001c84
000000486d6178700000000000001ccc000000206e616d65000000000000
1cec0000002c707265700000000000001d1800000f936764697200000000
0000000000000000058e0000054c001f054c001c0394001b0000ffe10000
ffe40000ffe8fe4afffc056b0023fe6affe00313000000ad000000ad0000
000000250096009f002400f0013100c200c0004a00a60041005000940047
00cf00af000e007901cb00040023004400a80025011f0002004600170105
009900d9005c007200e500e00028004b00de011200240045007000160039
ffe90016004b0088ffb900d9000a004300ae00ba016c0153002f00430048
022c012b0025008fffc000170028ffcdffd80025009d00e50124ffb10048
009d00e600110027007f00910012006a00cafffc00000024006200a7017c
01e900210060008b0434048aff6b003b00b500d5014bff6b004d007905d8
09b5006c009100a3011701c0ffdfffe700be04010065007f008200880099
00b200c0022e034305a000200026003d004e00610065007b00d901130131
0340ff27ff42ff99004e00a700f2022b02c603070011002b0049005f008d
00a100af00d600e400f5010b0135019d01ab01ab01d101ee05d80000004b
0075007a0080009d00a600a700ac00b90131013102170217000200170029
00550080008f00a500b200b300d0014b015901c001c103a50530fe3fff14
ff15ffe7ffff002a00580099009f00c100e400f40130015901ab01ab0322
0374041e04740532fd81004d0064009c00d000d100d600de00e500f500f8
012a012a01e1027e027fff57ffa8ffe500000008001f00380051005a006f
0076007700a200c000c200c400f101fb0209027e02cf04c5057a05f0ff92
001200260042004b004f005100530064008b00ae00b200b800b800d600f5
0111012001310138014e01520167018f019601b801d901d9020602210271
02ea03b003cb03dc04360505ff3a00120016001e001f002300570068006c
007e0088009200a500a800c500c901150126012d013001d601d901f6023b
0244024402a302cf02de0385038f04fc0586fee0feebfefbff8a00070044
00470058007500aa00e400ef011601200129016a017301e3027e029002b4
030e0310032303350341035403590388039403c803ce047204ab04da0549
056105ab0761fe6efed1ff4bff84000000010006001e0027002c00340037
00620066006a006b006c007000700072007c0081008a008e0091009200a0
00ab00b800bf00c900d500dd00ec00f40100012101300169016a016d017c
0185018e018e019901ac01c101c501c901e101f601f601f6022202220228
0236023f02430246026702850285029402d002d602e8031c0363037f0380
0380039e03b603d90400040404ff053205320548058b05a706cb07280748
076208ccfcedfd2afd59fddefe00fe1afe5bfe96fec1fee7ff56ff790001
0025002d002e007c00870091009900a100a500a500aa00af00b600c600cc
00d700dd00ec00f201020105011701180123012a012c0131013f01470149
0149014d01510151015501550157015a015a0161016201680168017f0180
018201830184018d0195019501950198019901a501a901b601b601b701ba
01ba01d501df01e601ea01f2020002000203021702250227022f02390243
02430247024f025202520267026f026f027002720276027e02a702b302b9
02d603130325032d03610371039903ae03c203d403f90402042c042f043c
04560467048304cf04d104d804fb051f05450568059e05c2061b06340655
066a069806af06e806fc070607500762077c07d407ff082500ad00c700aa
00b5000000000000000000000000002f06cf01730514047802df009c0018
037005870155002500060254036c038e03d2056601f0032001da018a0369
036bffa3034602f8036f015602bf0122031f053a0366008c00ff01ab02e1
02f402e70415015402e90128049101b7026f034302060000000005d30415
048305e8000002d7003a027d01c002c503830383ffbd003a059e01df059e
02d1002004e0021300df01c001870297000000ce0269028b0058043405fb
0069015a01a905780182013e0288012a03d4049e00e5032302f301f00196
007a00cd014a0424025e023901ab00cf00fd011e00ed0171007001950040
01bb01dd01b8000101a803a7014c020c018d01b0020d0137010000cd0321
01d4030a00590000000001260215015002f0025503bc06d00335010100d0
00d2007a01030130007c000000000000000000fe006e006600940227002b
0045004d00d3013200180097004100f4febcffe9001605d8058b009100a1
032c00520030005d02cb003a009200e500e500580086003200ba00990088
00300298007cff8001640028004d0065000200b8016a002f010b00110017
0100007f00040016022200a6005f000000f8000a00ca0043004b01ee0077
012000f401c00028045f0000008c044500c20060007b008b008b0064005d
00c2009c009206b505d3004f011700000420fe9e00cc00dc005e004600e3
0032001a003c0091005a00a1042c0041002000490071009c009cfe480040
0040008600cb0102007d003a003e006a0050044800290096ff6a00970069
00e0004c001b00c90069ff970043ffbd0052ff83ff8b005fffa1ff5c0067
0053ffa8002a0076ffb20036008705590256052b043400de00c901c40048
00db018b00b3004800da01160125011800ea00ea00ae0000003e05bb008a
04d70053003fff8cffd500150028002200990062004a00e4006d00ee00e5
004803c00033fe4e02b1ff460370007905df0051ffa7ff1f010a0068ff6c
004f00bc00a5070500ab0080001e05a50025008b04660230006900290016
012f0080005c059f03d703f1047000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000160016001700180018001a
001b00210029002a002a002c002d002e002f003200340036003700380039
003a003b003c003d003e004200460046004a004c004d004f004f00530053
005500570059005c005c005d005d005e005f006100640065006700680069
0069006b006e006f00710076007600770077007d007e007f008000810082
008600870087008a008d008e0096009600970097009c00a000a200a300a6
00ac00b300b300b600b800b900be00bf00c100c200c400c500c600c700ca
00ca00cb00cc00cc00ce00d100d200d300d700da00db00dc00de00df00e0
00e000e300e640578574737271706f6e6d6c6b6a6968676665625d55544f
4e403f3e3d3c3b3a393837363534333231302f2e2d2c2b2a292827262524
232221201f1e1d1c1b1a1918171614131211100f0e0d0c0b0a0908070605
04030201002c4523466020b02660b004262348482d2c452346236120b026
61b004262348482d2c45234660b0206120b04660b004262348482d2c4523
462361b0206020b02661b02061b004262348482d2c45234660b0406120b0
6660b004262348482d2c4523462361b0406020b02661b04061b004262348
482d2c0110203c003c2d2c20452320b0cd442320b8015a51582320b08d44
235920b0ed51582320b04d44235920b09051582320b00d44235921212d2c
20204518684420b001602045b04676688a4560442d2c01b10b0a43234365
0a2d2c00b10a0b4323430b2d2c00b0172370b101173e01b0172370b10217
453ab10200080d2d2c45b01a234445b01923442d2c2045b00325456164b0
50515845441b2121592d2cb00143632362b0002342b00f2b2d2c2045b000
4360442d2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8c
b8100062602b0c642364615c58b00361592d2c45b0112bb0172344b0177a
e4182d2c45b0112bb01723442d2cb01243588745b0112bb0172344b0177a
e41b038a45186920b01723448a8a8720b0a05158b0112bb0172344b0177a
e41b21b0177ae45959182d2cb0022546608a46b040618c482d2c4b53205c
58b002855958b00185592d2c20b0032545b019234445b01a234445652345
20b00325606a20b009234223688a6a606120b01a8ab000527921b21a1a40
b9ffe0001a45208a54582321b03f1b235961441cb114008a5279b3194020
1945208a54582321b03f1b235961442d2cb110114323430b2d2cb10e0f43
23430b2d2cb10c0d4323430b2d2cb10c0d432343650b2d2cb10e0f432343
650b2d2cb11011432343650b2d2c4b525845441b2121592d2c0120b00325
2349b04060b0206320b000525823b002253823b002256538008a63381b21
2121212159012d2c4bb06451584569b00943608a103a1b212110592d2c01
b005251023208af500b0016023edec2d2c01b005251023208af500b00161
23edec2d2c01b0062510f500edec2d2c20b001600110203c003c2d2c20b0
01610110203c003c2d2cb02b2bb02a2a2d2c00b00743b006430b2d2c3eb0
2a2a2d2c352d2c76b802b023701020b802b04520b0005058b00161593a2f
182d2c21210c6423648bb84000622d2c21b08051580c6423648bb8200062
1bb200402f2b59b002602d2c21b0c051580c6423648bb81555621bb20080
2f2b59b002602d2c0c6423648bb84000626023212d2cb4000100000015b0
0826b00826b00826b008260f10161345683ab001162d2cb4000100000015
b00826b00826b00826b008260f1016134568653ab001162d2c4b53234b51
5a5820458a60441b2121592d2c4b545820458a60441b2121592d2c4b5323
4b515a58381b2121592d2c4b5458381b2121592d2c014b53234b515ab002
25b00425b006254923451869525a58b00225b00225b00525462345696048
592121212d2cb0134358031b02592d2cb0134358021b03592d2c4b54b012
435c5a58381b2121592d2cb012435c580cb00425b00425060c6423646164
b807085158b00425b00425012046b01060482046b0106048590a21211b21
21592d2cb012435c580cb00425b00425060c6423646164b807085158b004
25b00425012046b8fff060482046b8fff06048590a21211b2121592d2c4b
53234b515a58b03a2b1b2121592d2c4b53234b515a58b03b2b1b2121592d
2c4b53234b515ab012435c5a58381b2121592d2c0c8a034b54b00426024b
545a8a8a0ab012435c5a58381b2121592d2c462346608a8a462320468a60
8a61b8ff8062232010238ab9035803588a70456020b0005058b00161b8ff
ba8b1bb0468c59b0106068013a2d2c2320b000508a8a64b10003255458b0
401bb10103255458b037438b59b04f2b5923b0622b2321235865592d2cb1
3a000c215460432d2cb1020042b123018851b1400188535a58b910000020
885458b202010243604259b12401885158b920000040885458b202020243
6042b12401885458b2022002436042004b014b5258b2020802436042591b
b940000080885458b202040243604259b94000008063b80100885458b202
080243604259b94000010063b80200885458b202100243604259b1260188
5158b94000020063b80400885458b202400243604259b94000040063b808
00885458b202800243604259b12801885158b94000080063b81000885458
ba00020100000243604259595959595959b10002435458400a37403a403b
403e023f021bb10102435458b237403aba0100003b0100b33e013f011bb1
8002435258b237403ab80180b13b401bb901000002435258b237403aba01
80003b01401bb901800002435258b237403ab80200b13b401bb237403aba
0100003b0100595959b9400000808855b94000020063b8040088555a58b3
3e003f011bb33e003f0159595942424242422d2cb0024354584b53234b51
5a58381b2121591b21212121592d2c012d2cb0022563b0206066b00225b8
2000626023622d2c234ab1024e2b2d2c234ab1014e2b2d2c238a4a234564
b0022564b002256164b03543525821206459b1024e2b23b000505865592d
2c238a4a234564b0022564b002256164b03543525821206459b1014e2b23
b000505865592d2c20b003254ab1024e2b8a103b2d2c20b003254ab1014e
2b8a103b2d2cb00325b003258ab0672b8a103b2d2cb00325b003258ab068
2b8a103b2d2cb0032546b003254660b004252eb00425b00425b0042620b0
00505821b06a1bb06c592bb0032546b00325466061b08062208a2010233a
232010233a2d2cb0032547b003254760b0052547b0806361b00225b00625
496323b005254ab080632058621b2159b0042646608a468a4660b0206361
2d2cb00426b00425b00425b00426b06e2b208a2010233a232010233a2d2c
2320b001545821b00225b1024e2bb0805020605920606020b00151582121
1b20b005515821206661b0402361b100032550b00325b00325505a5820b0
0325618a535821b000591b21591bb00754582066616523211b2121b00059
5959b1024e2b2d2cb00225b004254ab0005358b0001b8a8a238ab00159b0
04254620666120b00526b0062649b00526b00526b0702b236165b0206020
6661b02061652d2cb0022546208a20b000505821b1024e2b1b4523215961
65b00225103b2d2cb0042620b802006220b80200638a236120b05d602bb0
0525118a128a20398a58ba005d10000004266356602b23212010204620b1
024e2b23611b2321208a201049b1024e2b593b2d2cba005d100000092563
56602bb00525b00525b00526b06d2bb15d0725602bb00525b00525b00525
b00525b06f2bba005d10000008266356602b20b0005258b0502bb00525b0
0525b00725b00725b00525b0712bb0021738b00052b00225b001525a58b0
0425b0062549b00325b00525496020b0405258211bb000525820b0025458
b00425b00425b00725b0072549b00217381bb00425b00425b00425b00625
49b0021738595959595921212121212d2cb12501885058b94000020063b8
040088545cb0134b525b1bb001592d00000000010000000700006927fdb2
5f0f3cf50819080000000000a2e31dc200000000d684d860fb74fd8c105e
0851000000090001000000000000000100000721fe4500001000fb74f9d2
105e0001000000000000000000000000000000230639011c0200000002aa
005402aa002e02aa0053040000f00400002c04000053023900b005c70010
055600220556004a04e3002a05c70048038d00490400fffb038d00460400
0044038d004c02aa004f0400003d0400000d0239003c0239003d0400000c
040000450400fff902aa000d031d00640239001404000002040000110400
000c019a00a1043100570000004b004b009600e0011701960295039d03f1
0553070d07e608fc099a0bb80cec0e320faf11bb13191598174718b519b0
1b7d1cc31e411f6b21e82328248e263a27b327f2289400010000002302b5
003c00d100070002001000400086000005e904eb00050002000000010012
000100000000000600180000564e504d58432b54696d65734e6577526f6d
616e50534d540000410a005403ef02ad001d001f03ee03ed003c001f03ed
b2061d1fb803ecb3032a1f3f411503e4006003e9009f03e500df03e50004
001003e4001003e5003f03e5007003e400ff03e40005ffc003e1b3454532
40b803e1b32b2e3240b803e1b2282932b9ffc003e1b21a1c32bd03e102ac
0027001fffc003dfb2161b32b9ffc003deb2424232b9ffc003deb2363832
b9ffc003deb32a2d32df410a03de00ef03de000203de03df0028001fffc0
03dfb3282e32f0410d03df0001037e000f0101001f00a003dd00b003dd00
02004003dab32426329fbf03cc000103ca03c90064001fffc003c9b20d11
32410a03c703b70012001f03b603b50064001fffc003b5b30e1132004173
038d000100c0038d00d0038d00e0038d00f0038d0004006f03a7007f03a7
008f03a700af03a70004000f03a7001f03a7002f03a7004f03a7000403ab
03ab00ef03a50001000f03a5002f03a5006f03a5008f03a50004005403aa
0001006b03aa000103a8036a0022001f038c03940015001f038b03930015
001f03a40393001a001f03a20394001e001f03a10393001e001f039f0394
001e001f039b0394001a001f039a0393001e001f039903940016001f0398
03940016001f03970393001b001f03960394001b001f03950393001b001f
03760375001a001f03740375001a001f03a00373b21e1f10411e03930020
039300300393000300200394003003940040039400030000039400010383
036c001e001f03b1036c0032001f036d036c0032001fffc0037db2212332
b9ffc0037db3171932a0410a037d00b0037d00c0037d00d0037d0004ffc0
037cb2212332b9ffc0037cb3171932a0412d037c00b0037c00c0037c00d0
037c000400300373004003730002000003730010037300200373000300e0
037300f00373000200b0037300c0037300d0037300030084037300900373
00a0037300030377036a0029001f0389036ab2281f40b80367b33940323f
bb0366000100400366b3191d328fbb0366000100400366b3090a3240b803
66b3090e3240b80366b3090f323fbb0365000100400365b3090c3240b803
65b31a1d3240b80365b3090e326b410e0363007b03630002001403630024
0363003403630044036300040363b2242f1fba034e006d0800400e1f7f02
7f037f047f050430440112bf033200500800001f0012032d003c0800b61f
5f3c013785a0418503620001000003620010036200700362009003620004
00f0035f00010020035e0020035f0030035f0040035e00040000035e0000
035f0010035f00d0035e00e0035f00050010030f0020030f0030030f00d0
030f00e0030f00050000030f0010030f0050030f0060030f0070030f00d0
030f00060000030f0010030f0020030f0030030f00e0030f00f0030f0006
030f00270000030e0030030e000200e0030e00f0030e0002030e004a00e0
030d00f0030d0002030d002700d002fc0001001002fc002002fc005002fc
000300d002fc00e002fc0002000002fc001002fc002002fc003002fc0050
02fc006002fc000600e002fc00f002fc0002002002fc003002fc004002fc
000302fc402c27c02901b02901a02901902901403c3f413240223f413212
1212858f4caf4cbf4ccf4c045f4c6f4c7f4c0337b8ffc0b3b22b3032b8ff
c0b3b2222532b8ffc0b5b2191a32370f413b02af0001005f02af009f02af
00df02af0003001f02af002f02af003f02af006f02af000402af02af001f
02ad002f02ad003f02ad004f02ad005f02ad000500df02ad0001000f02ad
001f02ad003f02ad005f02ad009f02ad0005005f02ad00df02ad0002000f
02ad001f02ad003f02ad0003004002acb23a334f414d02ac005f02ac009f
02ac0003002f02ac003f02ac0002000f02ac003f02ac00af02ac000300b0
02ac00e002ac0002004f02ac005f02ac00a002ac0003001f02ac002f02ac
003f02ac0003000f02ac0001000f035a0001000f035a001f035a003f035a
005f035a0070035a000500cf035700df03570002000f0357001f03570070
035700af03570004035a035a0357035702ad02ad02ac02ac032c400d3115
1f001616000000121108104110020c004a000d01a8004a000d0198004a00
0d0189004a000d013f004a000d0124400e4a0df64a0dbe4a0d864a0d274a
0dbe02280041000d01940041000d0121400b410db4410d4f410d29410d41
1002170021000d02150021000d02060021000d01eb0021000d014e002100
0d012c4014210df9210df3210df1210d9d210d71210d3d210d4110021c00
1f000d0214001f000d020b001f000d0196001f000d014a001f000d012640
0b1f0dc61f0d571f0d371f0d410d019e0141000d00420141000d001e0141
000d001b0141000d01f2b40f440f0009bb01f20044000d0201b23c291fb8
0200b23c291fb801ffb23c411fb801feb23c471fb801fdb23c9e1fb801fa
b23c931fbc01f9010f0101001f01f6b224e41f411501f401490401001f01
f301490401001f01f1014900ab001f01f001490067001f01a6003c012500
1f01a4b23c811f411501a3010f019a001f01a200220801001f01a1005004
01001f019f0149019a001f019d01490067001f019cb22c621fb8019bb22c
791fbc019a002c0101001f0197b22ce41fb80193b22c891fb80192b22c6c
1fb8018fb2259e1fb8016ab23c2a1f4111016700240201001f0163002502
ab001f014c010f019a001f01480149006c001f0147b22c891fb80145b22c
9e1fb80144b22c791fb80143b223311fb80127b23c811fbc012300500101
001f011fb223e41f4115011d0023019a001f011c00230801001f011b0025
0801001f010e010f0401001f010d00220401001f0108b223811fb80106b4
25e41ff73cbb0125001f00f5010fb29e1fe3bc01490156001f00e20149b2
ab1fd1b901490401b21fcf2cb80125b61fce23bb1fc524b80156b21fc02c
b80801b21fbf2cb80201b51fb124e41fb0b901490201b61faf2c671fad23
b80801b21fa523b80201400b1f9f3c2d1f9b235a1f9925b80201b21f812c
bc0401001f006d010f0156400b1f592c3e1f4c3cab1f4625b80101b21f40
3cb80125400a1f3a23721f393cab1f38b80149b3ab1f3124b80401b21f30
25b802abb61f2a24e41f2623b80156b41f35555537ba023500070175402c
0774076207560751073b0733072d0720071d071c071408120810080e080c
080a080808060804080208000814b8ffe0402b0000010014061000000100
060400000100041000000100100200000100020000000100000201080200
4a00b013034b024b534201b0124b004b5442b0372b4bb807ff52b0382b4b
b008505b58b101018e59b0382bb00288b801005458b801ffb101018e851b
b0124358b90001012f858d1bb90001017c858d5959014bb0c063004b6220
b0f65323b8010a515ab0052342180016763f183f123e113946443e113946
443e113946443e113946443e11394660443e11394660442b2b2b2b2b2b2b
2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b2b2b181d42b0964b5358b235aaaa
1d4259b0324b5358b235ffff1d42594bb04753205c58b90271026f4544b9
0270026f45445958b9017a0271455258b90271017a4459594bb04753205c
58b9002202704544b9003c027045445958b901b30022455258b9002201b3
4459594bb04c53205c58b9014900224544b1222245445958b901c2014945
5258b9014901c24459594bb06753205c58b9002402714544b90050027145
445958b9021e0024455258b90024021e4459594bb8020153205c58b9010f
00224544b1222245445958b90c00010f455258b9010f0c004459594bb01c
53205c58b125254544b12c2545445958b13725455258b125374459594bb0
ab53205c58b125254544b1232545445958b901590025455258b900250159
4459594bb8010153205c58b125254544b1282545445958b9020800254552
58b9002502084459592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b65422b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b01b361dc6463456523456023456560234560b0
8b766818b080622020b164dc4565234520b003266062636820b003266165
b0dc236544b064234420b161634565234520b003266062636820b0032661
65b063236544b0612344b10063455458b163406544b26140614523614459
b3a67f434b456523456023456560234560b089766818b080622020b1437f
4565234520b003266062636820b003266165b07f236544b043234420b1a6
4b4565234520b003266062636820b003266165b04b236544b0a62344b100
4b455458b14b406544b2a640a645236144594b5242014b5058b108004259
435c58b108004259b3020b0a124358601b2159421610703eb0124358b93b
21187e1bba040001a8000b2b59b00c2342b00d2342b0124358b92d412d41
1bba04000400000b2b59b00e2342b00f2342b0124358b9187e3b211bba01
a80400000b2b59b0102342b0112342002b00184569444569444569444569
4473737374737373737475752b7373747475184569447373742b4bb02153
4bb046515a58b03cb03c45b040604459012b2b2b2b75752b5840365f235f
255f285fa5046f236f256f286fa5044f234f254f284fa5043f233f253f28
3fa5042f232f252f282fa5041f231f251f281fa504757575757575594358
4010bf3ccf3c026f3c7f3c8f3c9f3caf3c0575755943584012bf22cf2202
5f226f227f228f229f22af2206757559435c58b6403c9f22ef220375592b
2b0174747474454473737474757545447345447374454473747573737373
732b5840246009700980090310092009300940095009056f037f038f0303
1f032f033f034f035f0305b8ffc0b2073a33b8ffc04046063a33900ba00b
b00bc00bd00b05b006c006d006e006f00605200630064006500660067006
80069006a006099006900702600b700b800b03100b200b300b400b500b05
1f070100757575737575752b2b757575751b40100706441f0b0a441f0302
441f0908441f2b2b2b2b592b752b435841220063032d00010003032d0013
032d0023032d0033032d0053032d000500c3032d00d3032d00e3032d00f3
032d00040083032d0093032d00a3032d00b3032d0004032d032d45186944
74747575592b4358b900180332b330353238b80332b361663238b80332b3
535a3238b80332b3454e3238b80332b33c413218b80332b23f330a410f03
32000100ba033200ca033200da033200ea033200fa033200050332033245
18694474752b2b2b2b2b2b597300732b012b7575002b2b2b74002b2b2b73
2b74012b002b2b017373737474732b2b00732b2b002b2b2b017374732b01
2b2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b00017375007373004569440073
730173742b2b2b2b2b732b00732b752b2b732b2b2b2b2b2b2b2b2b73742b
002b2b2b2b0000>
[13153 7625 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
2 7174 33 <000100a1fe4600f4058e00030064b0852b58400c00056a116b3690019002
0202b801db400903000517171a000001b80327400d020220033003400303
03190405bc011f0021006a010000182b2b4ef45d3c4d10fd3c4e10456544
e6003f4ded3130005d012b1bb30213030000183f3f30315913112311f453
058ef8b80748>KAAAAA+TimesNewRomanPSMT AddT42Char 
1 2018 9 <00020010000005b0056b001c001f0254b0852b58b102024354584012011f
1e021e1d001c1e1c001d1f011e1c0214be03e2001703e2000703e2000a03
e2401708021c1e030f081c161d001f70018001020101080f0208002f3f12
392f5dcdd0cd2f2f1112173910ededeeec012f2f2f2f2f2f2f107d87c4c4
1087c4c431301b401b080e0f0f0d100a1e091f502106150f13101a111a1b
1b1c181d0621b8ffc0b2253521b8ffc0b330583421b8ffc0b32b2e3421b8
ffc0b2293521b8ffc0b320263421b8ffc0b31a1e3421b8ffc0b2173521b8
ffc0b2153521b8ffc040971013340d0f0b100a1e390f4a0f4610491e4f21
590f57105514581e6a0f6710681e76108004870e8a0f87108712891e881f
9b0f9b1099119b1eb90fb910bd1ab91ecb0fca10c81dca1edb0fd810eb0f
e810e81ef90ff810f91df91e2c090f4b1b021f1e01011f1e02001d1e1e1c
090e0a1b09161c171b160802071b081511141b15781e0f1020101e1c1c22
1110141170110111100f0e0eb802c94011021e1402021e1f1da500007001
80010201b801b5400c08100f03151616080809081cb801fa40090f110111
02a50e4011b80230b34f1e011eb802ec400e20400e500ef00e030ea7206b
8a182b10f65d191afd5ded181a10ed105ded003f3c103c103c3f3c10f45d
3c10fd3c870e2e2b057d10c4875d0e2e182b87057dc42b180010ed0110c0
0010ed0110c00010ed0110c00010ed0110c087107dc43c073c3c073c3130
01715d2b2b2b2b2b2b2b2b2b01725d591bb71e0f1d1d090f1f01b807ed40
0c6c1f1f090f0307171403090ab803e2b36c16090800183f332b17323f12
392f2b1112392f1139303159012107061514161715213536373637013301
16161715213536363534270b0203a9fdf35c223b62fe555519333e01dd23
01d8395d53fde95139286ee6ec01c6d64f271f2f0725250f183093045cfb
988851052525042e212c5f010d0224fddc00>KAAAAA+TimesNewRomanPSMT AddT42Char 
1 4600 13 <00020048ffe10578056b000c001b00d2b0852b5840319712a807a90aa910
0477017907870188070443080d28000315280609183c1f032f0302000310
032003300340030503491db8ffc0401a3f35201d401d021d113c10092009
020f091f090209491c6463182b4e10f45d724ded4d10712bf65d724ded00
3fed3fed313043794032011b0f250b261a2613260e0c112d001b01182d01
1407112d001605182d01100a0d2d0119020d2d011208152d001704152d00
2b2b2b2b012b2b2b2b2b2b2b2b81015d5d1bb1000db807edb46c00030615
b807ebb26c060900183f2b3f2b3031590120001110002120001110373617
220706111017163332121110272602ed01080183fe7afeebfee8fe83dcbf
f7b66e898e6db3bff9896e056bfe6ffed4fecbfe68018e013c0143ccb149
87a8febcfeb4b388012a0141015cab88>KAAAAA+TimesNewRomanPSMT AddT42Char 
1 558 5 <000100f0000003060568001600b2b0852b58401440186018a018e0180400
1840180276008600020e411301690141000901a000220003016901410008
01a00023000001f8000f016900160141000001f2400e010f0f0209020105
09080c020300ba01f70003014940120e0e0f401135300f7f0f900fa00f04
0f1917ba022401e400182b4e10f45d2b3c4d10ede4103c003f3c3f3c1112
3901113900f5edfc01f52b2b3130005d01715d1bb4010507090ab803e2b2
6c090c00183f2b323f30315913253311141616171521353e023511342726
26232207f0014a21133c5cfe026038160a07251a254204c7a1fb8772381e
022525021d317a02dc942a201e1f>KAAAAA+TimesNewRomanPSMT AddT42Char 
1 812 6 <0001002c000003ab0568001e0195b0852b58408207180b3917181c3d3418
401c3d3419401c3d340f1e161629073c074907a9070640205b045a085b17
5a186b08741174129c0b9d0e9911ac0bac0ec905c917c818d917d918e020
f904f9171515011d0419051b15191619171d180709170b180b1d34194719
89178f200718190202171a190c19060d031902050618171615140713040d
b8016840090940140c3f80090109b80333400c10051a8f19019f19af1902
19ba03330003018db301020c1eb8018d400d0006e24f135f136f137f1304
13b801074013400001001a002040208020036020a020022019bb01f90003
000d014040145f026f027f028f02bf02cf02df02ef020802191fba018e01
0100182b4e10f45d4de43ced4e105d71f65d4df45ded10ed003f3cedfd5d
713c3ffd71b10602435458b78f0901bf09cf0902005d71592be411121739
11123901111239390210b10602435458b47d198d1902005d590e3c871005
7dc40ec431300171725d005d012b2b2b002b1bb70d0d101e1e021009b808
1ab46c10050219b8081ab26c020c00183f2b3f2b12392f11392f30315901
032135000035342623220607233636333216151407060702072132363637
03ab5ffce0016101209e6e649f262519cf9ba5dd304aa6f93e01626c5746
1a0105fefb2501420198a981a67571b9c6d4906767a2b5fef03810312d00
>KAAAAA+TimesNewRomanPSMT AddT42Char 
1 1322 7 <00010053ffe8035605680032017fb0852b58b9000affe0b20c3909b8ffc0
403c0c394109450a460b4b2204cf09012929382940346034cf34e034f70a
0700340141097f237a2eaa24b924ba2ec92edf23df25db2eea22e9250c49
0829b8018cb328281000b802e4b3d0300130b80334b5030510160116b801
9fb51d402b2f341db80143b3100d2928bb01680014000902e3400b502080
20029020a0200220b80333b3b00c010cb80190400b502d802d02902da02d
022db80333b55f077f070207b802e5400a403401a034c034023400b8013e
b74013bf1302131933ba011e01e800182b4e10f45d4de4105d71f65ded5d
71f45ded5d71e410f43c003fed2bed723fed5ded12392fed313043794036
2e2f1e260a0f04062221232124212521040605250e26260a2062012f042d
62011e0f206201210b2762010a092e063062011f0d1d62002b2b103c2b01
2b2b2b2b2b2a81818181005d01715d7200712b2b1bb309032829b803e2b5
6c2828100330b80813b46c0305101db807f5b26c100d00183f2b3f2b1239
2f2b12393031591336363332171615140716161514070621222635343633
321716161716333236353427262726262323353e02353426232207683ab1
84a35742ba7d807092feeb89632f21191a117817252a6697231a1f2b964e
204f9f4881609b68044a89956a4f5a949e31b67bb081a844271d2c08053f
060b9e6c4f4b381d28411e0a5e844f677fa6>KAAAAA+TimesNewRomanPSMT AddT42Char 
1 0 0 <0002011c0000051c050000030007006cb0852b58b10201bb02be00060007
02bfb2000504b802beb403000a0704b802beb5010019080605bf02be0002
000301290009016b015e00182b10f63cfd3c4e10f43c4dfd3c003f3cfd3c
10fc3cfd3c31301bb10004b807d7b36c000107b807d7b16c0100182f2b2f
2b3031592111211125211121011c0400fc2003c0fc400500fb002004c000
>KAAAAA+TimesNewRomanPSMT AddT42Char 
KAAAAA+TimesNewRomanPSMT /CharStrings get begin
/g33 33 def
/g9 9 def
/g13 13 def
/g5 5 def
/g6 6 def
/g7 7 def
end
KAAAAA+TimesNewRomanPSMT /Encoding get
dup 33 /g33 put
dup 34 /g9 put
dup 35 /g13 put
dup 36 /g5 put
dup 37 /g6 put
dup 38 /g7 put
pop
end
%ADOEndSubsetFont
/MALIFX+TimesNewRomanPSMT /KAAAAA+TimesNewRomanPSMT findfont ct_VMDictPut/MALIFX+TimesNewRomanPSMT*1 [33{/.notdef}rp /g33 /g9 /g13 /g5 /g6 /g7 217{/.notdef}rp]MALIFX+TimesNewRomanPSMT nfMALIFX+TimesNewRomanPSMT*1 [25 0 0 -25 0 0 ]msf18.6455 335.04 mo(!"#)[4.99992 18 0 ]xshMALIFX+TimesNewRomanPSMT*1 [17 0 0 -17 0 0 ]msf59.6455 340.08 mo($)sh%ADOBeginSubsetFont: MAAAAA+CambriaMath Initial
ct_T42Dict begin
-1.473 -2.461 2.867 3.113
 256 array 0 1 255 {1 index exch /.notdef put} for  /MAAAAA+CambriaMath
Type42DictBegin
[<000100000008000800080008676c79660000000000000140000000dc6865
6164000000000000008c000000366868656100000000000000c400000024
686d747800000000000000e80000000c6c6f636100000000000000f40000
00086d61787000000000000000fc000000206e616d65000000000000011c
0000002467646972000000000000000000000000000100000006e66638ef
545c5f0f3cf5001b080000000000b9e6983d00000000d18d01e4f434ec4a
16f118ef00000009000200000000000000010000079afe390000175af434
fda416f1000100000000000000000000000000000003054400be02e0006a
02e0006a000000500066006e00010000000300c0002d0097000600020010
002f0086000009a411280003000100000001001200010000000000060012
0000535850534f4b2b43616d627269614d61746800>
[221 ] AllocGlyphStorage
]def 
76 12 
PrepFor2015
Type42DictEnd
1 160 1 <0001006afe4d0264059c0006000013011501270901d5018ffe716b0141fe
bf059cfc7e4afc7d260382038300>MAAAAA+CambriaMath AddT42Char 
1 204 2 <ffff006afe4d0264059c020600010000>MAAAAA+CambriaMath AddT42Char 
1 0 0 <000400be0000048605540028002c0030003400000135343e02373e033534
2623220e020723353e0133321e0215140e02070e031d0117152335011121
1101112111023706162a2417261b0f413e2030241909603c894346633e1c
0f243c2c20261507129001fcfd060361fc3801e71616252a3527192f3339
234b521424321e821e2e1d334629263e3d462d212c27281c066ea1a1fee4
049afb6604f7faac0554>MAAAAA+CambriaMath AddT42Char 
MAAAAA+CambriaMath /CharStrings get begin
/g2 2 def
end
MAAAAA+CambriaMath /Encoding get
dup 33 /g2 put
pop
end
%ADOEndSubsetFont
/MALIFY+CambriaMath /MAAAAA+CambriaMath findfont ct_VMDictPut/MALIFY+CambriaMath*1 [33{/.notdef}rp /g2 222{/.notdef}rp]MALIFY+CambriaMath nfMALIFY+CambriaMath*1 [25 0 0 -25 0 0 ]msf68.0206 335.04 mo(!)shMALIFX+TimesNewRomanPSMT*1 [25 0 0 -25 0 0 ]msf466.734 322.32 mo(!"#)[4.99991 18 0 ]xshMALIFX+TimesNewRomanPSMT*1 [17 0 0 -17 0 0 ]msf507.734 327.36 mo(%)shMALIFY+CambriaMath*1 [25 0 0 -25 0 0 ]msf516.109 322.32 mo(!)shMALIFX+TimesNewRomanPSMT*1 [25 0 0 -25 0 0 ]msf262.839 36.48 mo(!"#)[4.99991 18 0 ]xshMALIFX+TimesNewRomanPSMT*1 [17 0 0 -17 0 0 ]msf303.839 41.52 mo(&)shMALIFY+CambriaMath*1 [25 0 0 -25 0 0 ]msf312.214 36.48 mo(!)sh.895628 .7673 0 0 cmyk
%ADOBeginSubsetFont: OAAAAA+TimesNewRomanPS-BoldMT Initial
ct_T42Dict begin
-0.555 -0.324 2 1.055
 256 array 0 1 255 {1 index exch /.notdef put} for  /OAAAAA+TimesNewRomanPS-BoldMT
Type42DictBegin
[<00010000000b000b000b000b6376742000000000000000bc0000082c6670
676d00000000000008e80000063f676c7966000000000000237400000ad2
686561640000000000000f2800000036686865610000000000000f600000
0024686d74780000000000000f84000000246c6f63610000000000000fa8
000000146d6178700000000000000fbc000000206e616d65000000000000
0fdc0000003070726570000000000000100c000013686764697200000000
0000000000000000058e001f054c001f054c001c0394001b0000ffe10000
ffe40000ffe8fe4afffc056b0023fe6affe0031300000124000001240000
00000000000000250084002400e8009600bf005d00cb02030045012e0058
00040118001900020139004b011000170005010a00280023004b00500015
004a00e5010d00af003100ea014600810125004f009c0022004e00160041
009100a00147ffe9008100d3016900ab001700a801400027004c0148ffdf
00510050ffb7012e0000003b0097009a010e001f004c010a0123ffde0022
0073008700ba00d600ff005a009805a0ffe900500052006effb7005c00d1
015a015bff1c0049006e007e009800a100bd00e4018801c00405ff600035
006200720107011301280382ffa8003805d809b5ffc4ffd00010006e00a1
00ba00ec022b0446ffee004000e80401ff680003001300330033006e00a2
00b600dc011801350343000e0034005c005d007c00af0328003b00480089
009c00ba017b01af030effa4001700370063007f00e0017801c0022105d8
05f0ff7a0012002700340052008a00a400c100c300eb011801460154036d
fe3fff4e00010008002b0045006e0084008600ae00af00c200c200c4010f
01210149017b01c101de01e1036e03e6006300a700ed00f600f801280169
017e023f02820532fd81ffb5002600350040004500490057006c00ac0126
0140015b017b019c0277027e027f03b603dc042804efff38ffc30006002f
0040008200aa00b600ce00d300d700e50146014d01d6027e03b30586ff7b
0012002f0068007f008400a500b900f501050109010c0114012001330137
0178017b01c001e1021d02230258036203af058cff79ff8d00210024005d
00650068006a0083008500b700cf00e200eb00ed011a0120012f0137013f
0150018d018f01c402cf0357035c03960440049604ab04c204fc051105c2
fed1fee00013002100240030004d004d005d0066007a007c00b800b800c3
00da0103011b011e012f013d014a0150015f0166017c0190019501a301a6
01b601c701d001e901ef01f90218028c029402bb02c502cf02d0031d032a
0344039f03cc042104da04fb0761fd1dfebffeefff0bff2bff33ff90ff9c
ffdbffed00010008001c0025003f0043005a006b0080008400900095009d
00a700b400cd00d500d600df00df00df00e400f000f600fb010601130119
011b012201230127012c013f015701580177018a019301a401c601e101e4
01fc0200020c02220222022a0236024a025c028202ec02fc030a03230341
0378039703d203fa04790532053205ab05b505f006e4072508ccfc9bfdde
fe00fe69fe96fe9bff3500030006000e00130019003400420048004a0057
006400710071007200760077007a007a0083009c00af00af00b200bb00c8
00cc00cf00cf00db00dc00df00e400e400e400e900eb00f400fd00fe0102
0105010501080108011b01220123013001370143015b0160016501780178
01780178017b0182018901980198019b019e01a101a601d101d201d301df
01e301f502000200022d02410247024a0250025b025d025d025f02630281
028b02b402b402ce02d602db02e202fa03100311031f0327034503670388
038a03b003b403d403d5042604410448046b04c704d1053205480549055f
0563058b05a105a305c205ca05e405ff069306a206b806e8070a07360750
0754078907a907bb07dc07ff08270120014d011b01290000000000000000
00000093015b042f029001ff02b800db00be027403cb029401ab00000000
0000000000000000058a038a0364005f02b803bd029d7c9003e203ac0282
0000044400000000003d010a00cc00bc00cc05d3041505e800c7021a00ee
00000194036102be029902180136033b048504cc0050007905a305a302df
020702af000001eb0064005f0055011900f2045600ef00c800cf058a0143
014602de01ab02c6024a005d00d800a402bb009900a00065013702740364
00b500fa009101b9032001b60025007f00d000ec00e00000000000000000
0000042ffd42023f06180276063a013701b90151ffc70229ffeb023f02e1
018500db03fa01900156014e012f00a600e300bb00d50134011f04fe041b
00d100e4011e009b00cd00e700b300e200ca042400b800f500b90334005a
04e00123012ffdc9fe440574038301f602410002001700500015004f0017
00a80051009800520049006e000e00af017b017b019c006a008300eb00cd
0122000005d306da009a008f00ba0315002503a5028002ff03c804200092
00e0034c009b007d00f8011c013400a8006d006900000420ffe6fea4006a
006a003800380162015a0044006d0048001eff6d00a600a600400040ff5c
ff990559052b00ce014c011500bf0140011800c800960509feed004800b4
009500db0048018b00b3fe6400c000ea01180125013203b003ed05760590
05aa05b405be05cd063100780084009b00cc00e200f4010a0120016300d1
00ea00f7010801420019002c00340041003800480058006c025903bd0043
011a007000d30028003700420050005a0064007300780082008c009c00a5
00bd00ce00f00110015c00be00d801020117012c016300ea01080041004b
0055005f007300a60109018301b300410064001e002a00eb00fa010e0138
0274002c00400082009600b600c000cc00dc00e600f000ff010a0120012c
013b01440156016300f70057006401100136005001b10000ffb60039004e
004403cc00e5002401100042012201a400f0006000e0000e001d003905e3
0102002cfe4eff38026903bd011600ff000e00a00054001b003d01710041
000f005000fd0015014f0035fe47003900ab0080005005a50016002b00ac
0115021504570555007300da005c00ce0072ff58019a074403d703f00470
40425554403f3e3d3c3b3a3938373534333231302f2e2d2c2b2a29282726
2524232221201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a0908
07060504030201002c4523466020b02660b004262348482d2c4523462361
20b02661b004262348482d2c45234660b0206120b04660b004262348482d
2c4523462361b0206020b02661b02061b004262348482d2c45234660b040
6120b06660b004262348482d2c4523462361b0406020b02661b04061b004
262348482d2c0110203c003c2d2c20452320b0cd442320b8015a51582320
b08d44235920b0ed51582320b04d44235920b09051582320b00d44235921
212d2c20204518684420b001602045b04676688a4560442d2c01b10b0a43
2343650a2d2c00b10a0b4323430b2d2c00b0172370b101173e01b0172370
b10217453ab10200080d2d2c45b01a234445b01923442d2c2045b0032545
6164b050515845441b2121592d2cb00143632362b0002342b00f2b2d2c20
45b0004360442d2c01b00643b00743650a2d2c2069b04061b0008b20b12c
c08a8cb8100062602b0c642364615c58b00361592d2c45b0112bb0172344
b0177ae4182d2c45b0112bb01723442d2cb01243588745b0112bb0172344
b0177ae41b038a45186920b01723448a8a8720b0a05158b0112bb0172344
b0177ae41b21b0177ae45959182d2c2d2cb0022546608a46b040618c482d
2c4b53205c58b002855958b00185592d2c20b0032545b019234445b01a23
444565234520b00325606a20b009234223688a6a606120b01a8ab0005279
21b21a1a40b9ffe0001a45208a54582321b03f1b235961441cb114008a52
79b31940201945208a54582321b03f1b235961442d2cb110114323430b2d
2cb10e0f4323430b2d2cb10c0d4323430b2d2cb10c0d432343650b2d2cb1
0e0f432343650b2d2cb11011432343650b2d2c4b525845441b2121592d2c
0120b003252349b04060b0206320b000525823b002253823b00225653800
8a63381b212121212159012d2c4bb06451584569b00943608a103a1b2121
21592d2c01b005251023208af500b0016023edec2d2c01b005251023208a
f500b0016123edec2d2c01b0062510f500edec2d2c20b001600110203c00
3c2d2c20b001610110203c003c2d2cb02b2bb02a2a2d2c00b00743b00643
0b2d2c3eb02a2a2d2c352d2c76b8029f23701020b8029f4520b0005058b0
0161593a2f182d2c21210c6423648bb84000622d2c21b08051580c642364
8bb82000621bb200402f2b59b002602d2c21b0c051580c6423648bb81555
621bb200802f2b59b002602d2c0c6423648bb84000626023212d2cb40001
00000015b00826b00826b00826b008260f10161345683ab001162d2cb400
0100000015b00826b00826b00826b008260f1016134568653ab001162d2c
4b53234b515a5820458a60441b2121592d2c4b545820458a60441b212159
2d2c4b53234b515a58381b2121592d2c4b5458381b2121592d2cb0134358
031b02592d2cb0134358021b03592d2c4b54b012435c5a58381b2121592d
2cb012435c580cb00425b00425060c6423646164b807085158b00425b004
25012046b01060482046b0106048590a21211b2121592d2cb012435c580c
b00425b00425060c6423646164b807085158b00425b00425012046b8fff0
60482046b8fff06048590a21211b2121592d2c4b53234b515a58b03a2b1b
2121592d2c4b53234b515a58b03b2b1b2121592d2c4b53234b515ab01243
5c5a58381b2121592d2c0c8a034b54b00426024b545a8a8a0ab012435c5a
58381b2121592d2c462346608a8a462320468a608a61b8ff806223201023
8ab9032703278a70456020b0005058b00161b8ffba8b1bb0468c59b01060
68013a2d2cb1020042b123018851b1400188535a58b910000020885458b2
02010243604259b12401885158b920000040885458b2020202436042b124
01885458b2022002436042004b014b5258b2020802436042591bb9400000
80885458b202040243604259b94000008063b80100885458b20208024360
4259b94000010063b80200885458b202100243604259b12601885158b940
00020063b80400885458b202400243604259b94000040063b80800885458
b202800243604259b12801885158b94000080063b81000885458ba000201
000002436042595959595959592d2cb0024354584b53234b515a58381b21
21591b21212121592d0000010000000700007d7b8afc5f0f3cf508190800
00000000a2e3354600000000d684d862fb89fd6110000872000100090001
000000000000000100000721fe4500001000fb89fa0b1000000100000000
0000000000000000000000090639011c040000870400003205c700510556
0026078d00290639005001c3009f0477005700000036009f0143020c028d
0387049704b6056900010000000902d2003c00d7000600020010002f0056
0000089b02c4000500020000000100120001000000000006001d0000574b
485454452b54696d65734e6577526f6d616e50532d426f6c644d5400410c
00540415029a001d001f0415041504140413003c001f0413b3061d1f20b8
040cb30c0e3220b8040cb2131732b8040bb328201f0f4110041200800412
0002000f0412003f0412005f04120003005f0412000100400412b2783340
b80412b2723340b80412b26e3340b80412b26a3340b80412b2543340bc04
12004a0033ffc00412b317183240b80412b30a0c3280b80412b308093240
b80411b25a33404109041100560033ffc0041100530033ffc00411b25033
40b80411b24d3340bc041100470033ffc00411b344453240b80411b24233
40bc0411003e0033ffc00411b23a331f4124041100200411004004110070
041100af041100f004110006000f0411002f04110090041100ff04110004
002f041100400411007f0411008f041100a0041100e004110006ffc00411
b208330f411b0410008f04100002000f0410001f0410002f041000030060
0409000100b004090001000f0408003f0408004f0408009f04070004040a
b2006c1fb9ffc00403b345453240b80403b32b2e3240b80403b2282932b9
ffc00403b21a1c32bd040302990027001fffc00401b2161b32b9ffc00400
b2424232b9ffc00400b2363832b9ffc00400b32a2d32df410a040000ef04
000002040004010028001fffc00401b3282e32f0bf0401000103fe000f01
01001fffc003fcb310143240b803fdb30f133240411003f9005003f90002
00b003b100c003b10002006f03f5007f03f50002ffc003afb22d3132b9ff
c003afb30a0e3210411003ef002003ef008003ef000300a003ef00010020
03ef004003ef0002ffc003efb313163240b803e7b20f1132b9ffc003dfb2
303432b9ffc003dfb310183250411403dc000103c903d20023001f03e203
d2001e001f03c703d2001d001f03c603c8000d001fffc003a4b30f103280
411003a3000103a303790029001f03a5037a0032001f03a8037e001b001f
ffc003d9b20e1132b9ffc003d9b2282a32410a03a7037c0032001f037303
710034001f036c036bb2321f20bb03a40001004003ecb3090b3240b803ec
b2101532bd03e9036b0014001f03e4036bb2171f0fbd036e002f036e0002
ffc003b8b3090d3290410c03b800a003b80002001f03d20001009f03d200
01004003d2b2090b32410a03a903800016001f03cf03810015001f03aa03
82b2151fc0bb03f70001004003f6b3090d3240b803a2b2083340b803a2b3
0d0e32c0410903a2000100b003f200c003f20002ffc003f4b32638320041
26038c0030038c0002002003e3003003e30002001003ee003003ee005003
ee006f03ee007f03ee009f03ee0006000003ed003003ed0002002f03de00
7003db009003db009f03de0004ffc00379b20f1032b9ffc00379b2242832
b9037d037cb2321f10bb037e0001ffc0037eb3090e3240b8037cb2121332
b9ffc0037cb30c0e323fbd03d7004f03d70002004003d8b31718326fbb03
8e000100400390b3181b3240b803d4b2090c32bd037b037a0032001fffc0
037ab20e1132bd038003820016001f03810382b2151fb0be03820001000f
03830001004003ffb30c11327f411403540001006f0354008f035400d003
5400ef03540004000f0354002f0354005f0354000300400350b30e0f320f
bb035a000100400349b20e331fbd0348007f03480002ffc00348b2152232
b9ffc00347b2152232b9ffc0040fb21b1e32beffc0040f002d0100003204
0e0406b22f1f51bb034b0001034f034eb2641f40b80351b20e0f32b9ffc0
034eb3383a3230bb034e0001ffc0034eb21f2332b9ffc0034eb2131932b9
ffc00346b2091132b9ffc00343b30a11320fbb03440001ffc0032bb2080e
32b9ffc0032bb2161b32b9ffc0032ab31417321f4110033a0001000f0333
0001000003370020033700300337008003330004ffc00332b31012325041
6403320001004003320060033200a0033200b00332000400100332003003
320050033200e003320004000f0336007f033600ff033600030070033600
f003360002000f0331003f0331008f033100bf033100e003310005000f03
31006003310002008f03300001006003300090033000020050032f000100
10032f0040032f0060032f0080032f00a0032f00c0032f00f0032f000700
cf032d00ff032d00020030032d0080032d00b0032d00df032d0004006f03
2c007f032c00020012032000fd0800001f007f0299403a017f007f017f02
7f037f047f057f107f11084035252c32406a252c32402e252c324028252c
323760097009800903300940095009031009200902b8ffc0b2073a33b8ff
c04012063a33da4dea4dfa4d0312379006900702cf410c011100df011100
ef0111000300cf011000df011000ef0110408703cf3edf3eef3e03cf4ddf
4def4d03cfdedfdeefde03cf2ddf2def2d03404d1b3a32375f016f017f01
8f01041f012f013f014f01045f036f037f038f03041f032f033f034f0304
600b700b800b03300b400b500b03100b200b02900ba00bb00bc00bd00b05
b006c006d006e006f0060550066006700680069006a006061f072f073f07
400604f0414302db000100a002db00b002db0002008002db009002db0002
001002db000100c002db00d002db0002009002db0001006002db007002db
0002004002db005002db0002002302db003002db000202db002300a002da
0001008002da009002da0002004002da0001002302da003002da000202da
0023000002d90001007002d9009002d9000202d9401c2230244024021024
202402002401f02401d024e02402b024c02402c0413a02d8000100a002d8
00b002d80002008002d8009002d80002002302d8003002d8000202d80023
00c002d7000100a002d700b002d70002008002d7009002d7000200a002d7
00b002d70002008002d7009002d70002006002d7007002d70002004002d7
005002d70002002302d7003002d7000202d7b223370f4117029b0001005f
029b009f029b00df029b0003002f029b003f029b006f029b0003001f029b
0001029b029b0040029ab3272c3280b8029ab2263340b8029ab2223340b8
029ab21e3340b8029ab21c3340b8029ab3191a325f410f029a009f029a00
df029a0003000f029a001f029a003f029a0003ffc00299b2443340b80299
b23d3340b80299b23a33df413902990001005f029900af02990002004f02
99009f02990002002f0299003f0299000200af02990001000f0299003f02
99000200b0029900e0029900020070029900a002990002004f0299005f02
990002000f0299001f0299002f0299003f02990004029a029a0299029900
0f027a002f027a400b0200161600000012110812b802bab269121fb802b4
b228101fb802b3b228101fb802b2b228101f411302030023000d01ee0023
000d01ae0023000d019f0023000d01940023000d01570023000d010f400b
230df9230dc5230da7230d410a024a0024000d01f00024000d01e9002400
0d016a400e240de8240dc6240da3240da2240dbb01e30022000d0121401a
220de5220ddd220db7220daa220d93220d5c220d51220d4c220d410a0228
0020000d021d0020000d015e0020000d011c4017200dfc200de1200dcb20
0dc8200da1200d59200d3a200d410a01f20034000d019c0034000d019700
34000d0135b7340d1f340d1d340dba0202000f015bb20f0009bb0202015b
000d030ab22a3e1fb80309b22a3e1fb80221b24d251fb8021cb24d411fb8
021bb24d521fb8021ab24d721fb80213b24d931f4109020f01b10401001f
020e01b10801001f020cb22a811fb8020bb22a811fb80208b22a5e1fb802
05b22a391fb801feb22a231fb801fbb2661d1fb801fab2661e1fb801f6b2
66341fb801f5b266341fbc01f300660201001f01f1b2669e1f410901ea00
280801001f01e7002602ab001f01b8b24d3f1fb801b7b24d931f410901b4
003e0125001f01b200400401001f01acb22a721fb801a8b22a281fb801a7
b22a241fb801a6b22a241fb801a3b22a1f1fb801a1b2662e1fb8019eb266
931fb8019db266e41fb8019ab2286c1f4109019900280401001f01980026
0401001f0173b24d1b1fb80171b24d241fb80170b24d2f1fb8016fb24d35
1fb8016bb23ecd1fb80169b23ee41f4109016701b1019a001f0166002a02
ab001f0161b2662a1fb8015fb2669e1f4109015d0028019a001f015c0035
0401001f0147b24d391fb80146b23ecd1f410d0145003e0125001f014401
430101001f014201b102ab001f0140b22a301fb8013eb22a261fb8013db2
661d1fb8013cb2662b1fb80138b228811fb80137b2289e1fbc0136002801
9a001f0129b24d721fbc0124002a0201001f0123b22aab1fb8011fb26629
1fb8011eb266451fb8011bb228811f41090113003e0125001f0112003e04
01001f0111b22a291fb80110b22a201fbe010b0066019a001f010a002601
9ab61ffd4d721ffb3eb80156b21ffa40b80801b21ff728b80801b61fec4d
621feb4db80401b21fea40b802abb61fdf4d721fde3eb802ab400b1fdc2a
e41fdb66221fca2ab80401401b1fc92a2e1fc326791fb828bb1fb34d1e1f
b166291fb066621faf66b80401b21fae26b802abb21fa828b80201400b1f
a0664c1f982a2b1f9726b8019ab61f9266291f8740b802ab401b1f852a79
1f8226811f754d931f744d891f732a1d1f70285e1f6a28b8040140171f69
2a521f682a201f6766291f6566671f612a931f6035b80801b61f5e2acd1f
5335b80801b21f4b66b80156b21f493eb80801b61f4866521f4626b80201
b21f3f66b80156400b1f3b66341f322a931f2e35bb0401001f002d0143b3
cd1f5537bc022f0007018000070172402e07bd077e076207540742072f07
2707250721071e071408120810080e080c080a0808080608040802080008
000214b8ffe0402b00000100140610000001000604000001000410000001
001002000001000200000001000002010802004a00b013034b024b5342b0
372b4bb807ff52b0382b4bb008505b58b101018e59014bb0c063004b6220
b0f65323b8010a515ab005234201b0124b004b544218b0382bb00288b801
005458b801ffb101018e851bb0124358b90001012c858d1bb90001014685
8d59590016763f183f123e113946443e113946443e113946443e11394644
3e11394660443e113946604445442b2b2b2b2b2b2b2b2b2b2b182b2b2b2b
2b2b2b2b2b2b2b2b2b182b1db0964b5358b0aa1d59b0324b5358b0ff1d59
4bb02953205c58b9026c026a4544b9026b026a45445958b90168026c4552
58b9026c01684459594bb03b53205c58b9003e026b4544b9004d026b4544
5958b9025c003e455258b9003e025c4459594bb03b53205c58b901b1003e
4544b13e3e45445958b9024f01b1455258b901b1024f4459594bb05a5320
5c58b90143003e4544b13e3e45445958b9038b0143455258b90143038b44
59594bb09e53205c58b9002a026c4544b90040026c45445958b9056c002a
455258b9002a056c4459594bb01853205c58b126264544b1662645445958
b13226455258b126324459594bb05153205c58b126264544b12826454459
58b1ad26455258b126ad4459594bb8010153205c58b126264544b1352645
445958b902280026455258b9002602284459592b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b65422b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b01b33d766e584565234560234565
60234560b08b766818b080622020b16e764565234520b003266062636820
b003266165b076236544b06e234420b13d584565234520b0032660626368
20b003266165b058236544b03d2344b10058455458b158406544b23d403d
4523614459b34e813871456523456023456560234560b089766818b08062
2020b138814565234520b003266062636820b003266165b081236544b038
234420b14e714565234520b003266062636820b003266165b071236544b0
4e2344b10071455458b171406544b24e404e45236144594b5242014b5058
b108004259435c58b108004259b3020b0a124358601b2159421610703eb0
124358b93b21187e1bba040001a8000b2b59b00c2342b00d2342b0124358
b92d412d411bba04000400000b2b59b00e2342b00f2342b0124358b9187e
3b211bba01a80400000b2b59b0102342b011234200741845694445694473
7373737474757575752b2b2b73732b2b2b2b2b2b18456944737373742b45
447373737373747474454473747474747474757575454473754544737374
7445447373737373747474740075757575757575757575752b2b74747474
747400732b4358b14d4d451869441bb8ffc0b34d1b3a322b5973002b2b75
75752b2b2b2b2b0073732b435c58b8ffc0b2071633b8ffc0400b061633d5
4de54df54d03c0410c011100d0011100e00111000300c0011000d0011000
e00110401e03c03ed03ee03e03c04dd04de04d03c0ded0dee0de03c02dd0
2de02d03372b74747474747473002b2b5901737374737473747374737473
74752b737573002b2b2b01732b2b2b2b752b2b2b732b2b2b002b2b742b73
2b7373742b73732b2b2b2b2b2b732b732b2b2b742b2b2b73737373732b73
732b2b2b73002b2b2b2b7374732b732b2b2b2b752b2b2b2b2b2b2b2b752b
2b2b2b2b732b2b2b2b7374752b2b7373732b2b2b752b2b732b2b2b2b2b2b
2b2b2b2b73747573742b7374752b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b7374752b2b2b002b2b4569442b2b00>
[2771 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 2350 7 <0001009ffe460121056b0003002340120201010300056b02033f0000016b
047a9a182b10f63c10fd3ce6002f3c3f3c3130131133119f82fe460725f8
db00>OAAAAA+TimesNewRomanPS-BoldMT AddT42Char 
1 646 3 <00010051ffe10557056b0024011db90016ff80b3090a341cb8ff80b3090a
3406b8ff80b3090a340db8ff804059090a340c1a091b36134d1a86168b1a
8f1b891c086b116b12791179128911a706a80da517c717cb1b0a06160026
4316411c80168517861b841cb704bb1e0a2f26681f7706760d761b8613ba
0f07370e1112241d005a021d0101b80114401d005a21a911120e056a1d03
0e6a1509015f2f1101111a7026012612256eb9013200182b4e1043584009
0f0a1f0a020a4d1919f44de95d1bb30a4d1919f44ded594e105df65d4de4
003fed3fed113939ecf4ed0110edf4ed0010c931304b5379b13208437940
24161c060d0c2617250809070902061b260d160a2500061c0a25000b180e
2500091a0525012b2b012b2b2b2a2b2b8181015d71005d71012b2b2b2b01
112326262322060706151412163332363715060623222402353412243332
1716333236370557272cf0987fd4313f5cc49c80d57672f7a5d9feafb7cb
0159c28f9f5c19202f07056bfe2ab8c4927697b9b6fed599708975776bae
0146b8c2015cc03e242f3300>OAAAAA+TimesNewRomanPS-BoldMT AddT42Char 
1 1048 4 <000100260000050d054c0025008f4036620177017b2370270490239024a6
24030a201d0222221a201d124c220b201d112223242322031b2324000025
102570258025a0250525b801b94010202128021211020108020825d2009d
01b802af40161a0f1b1f1b021b3e0b0a192630274027a027033d58182b4e
5d10f43c4dfd5d3cf4f4fd003f3f3f3c10fd3cf45d3c3939011117392b2b
2b3130005d015d0103213533323736373635113426262323352115232207
060706151114161716333332363637050d33fb4c2d3b241a0e0b1643392d
02d33b3b241a0f0b18231960716c90692f01dcfe2425150e221866037c68
34272525150e221866fca068390e094ca4a0>OAAAAA+TimesNewRomanPS-BoldMT AddT42Char 
1 1306 5 <0001002900000768054c0036014f40721e100b123f0b1e01091e7b1e0230
3845365038a700c80005251c36017700771c771d8600871c871d991da81d
ea1dfa1d0c7038e038021f121f131f1410241025050f120f130f14002400
250936060a201d0222221a201d1222222e3a1d2622220b201d1122231f3a
1d2522232f201d352223b8ff884043001d1c20010000281c1b141c1c1b00
363600002d1d1e141d1d1e0001361d1c031f011a00363502010226251d1c
121108000037381b101a011a3e0acf0bdf0b020b1a38b8ffc040091c1e34
7038e0380238b8ff804009151634381e1f282f2eb8ffc040111c1e34702e
e02e02c02ed02e022e193738b80154b3213d7618b8012c852b2b4ef45d72
2b3c4dfd3c4e102b722bf65d3c4dfd5d3c191112392f18003f3c3c3c3c3c
3f3c3c3c0111123912173908872e2b057d10c408872e182b057d10c42b18
2b2b2b2b2b2b3130015d5d725d71005d00712b0101211523220706070615
111416163333152135333237363736351101230111141716163315213533
163636373635113426262323352103d0017002282c3c24190f0b1644392c
fd3c2c3c24190f0bfdf818fdf0050d575dfe300e2d4e280b021644392b02
2a01ce037e25150e211865fc826834272525150e22186603edfb2b04ccfc
456417323f2525011f342f0b5b035a6733272500>OAAAAA+TimesNewRomanPS-BoldMT AddT42Char 
1 1806 6 <00020050ffe105f0056b000d001e01ab403368106813980ad712d719d81a
d81cd71de712090718071e1702180c171a171c271027132714281a0a1e80
090a341780090a3415b8ff80b3090a340fb8ff80b3090a340db8ff80b309
0a3408b8ff804064090a340680090a340180090a34129701960299069908
960c970da602a60cc705c709c61dd701d70d0d020407080609060a170117
02170c170d161d096619661c7805770c7619761d970fb618b61dd71bf008
0b560e0e35000316350709120b191f6e58182b4e10f44d43584019001b10
1b021b4d400301031a2f203f2002200f121f1202124de95d4e105df6714d
e95d1b400f1b4d400301031a2f203f200220124ded4e105df6714ded5900
3fed3fed31304b5379b151084379403c011e10251d26142609250526191a
181a02060f0d1225001e011b2501150812250017061b2501110c0e25010d
1c020e250101130a1625001a041625002b2b3c2b3c2b012b2b2b2b2a2b2b
2b2b2b81015d00715d435c58b40806123905b8fff4400b1239021812390c
18123902b8ffe8b211390cb8ffecb2113905b8ffe8b20d3909b8ffecb10d
39002b2b2b2b2b2b2b2b59012b2b2b2b2b2b2b2b01715d01240011100702
212027261110000522070611101716333237361235100226031701440195
97c8fe93fe92c89e019b0138ba614f7a559967455862649b055f0cfe6efe
d2fefec4fefcf8c4010d012e01934cbe9cfedcfea5a67432400119e2010d
010b6e00>OAAAAA+TimesNewRomanPS-BoldMT AddT42Char 
1 108 1 <0001008700000363056800170083bc000e01ad0135000801a5b6225f076f
070201410d01ad0135000701f90023001601a5000f01f700150135001602
02400e0f08000508070c000f011f010201b8030940100e0e500f6f0faf0f
03100f010f19180ebe0200000802c60018021701df00182b10f6e44e10f4
5d5d3c4d10fd5d3c003f3c3f1239f5edfc01f52b015d2b31300111141616
33331521353332363635113426262322072725029b16464d1ffd3624574a
1a12312033491201f30568fbab7d452c252528468002bf5e2f212024e400
>OAAAAA+TimesNewRomanPS-BoldMT AddT42Char 
1 0 0 <0002011c0000051c0500000300070042b40201c30607b803084013000504
c303000a0704c3010019080605c30203bc014100090125015600182b10f6
3cfd3c4e10f43c4dfd3c003f3cfd3c10fc3cfd3c31302111211125211121
011c0400fc2003c0fc400500fb002004c000>OAAAAA+TimesNewRomanPS-BoldMT AddT42Char 
OAAAAA+TimesNewRomanPS-BoldMT /CharStrings get begin
/g7 7 def
/g3 3 def
/g4 4 def
/g5 5 def
/g6 6 def
/g1 1 def
end
OAAAAA+TimesNewRomanPS-BoldMT /Encoding get
dup 33 /g7 put
dup 34 /g3 put
dup 35 /g4 put
dup 36 /g5 put
dup 37 /g6 put
dup 38 /g1 put
pop
end
%ADOEndSubsetFont
/MALIFZ+TimesNewRomanPS-BoldMT /OAAAAA+TimesNewRomanPS-BoldMT findfont ct_VMDictPut/MALIFZ+TimesNewRomanPS-BoldMT*1 [33{/.notdef}rp /g7 /g3 /g4 /g5 /g6 /g1 217{/.notdef}rp]MALIFZ+TimesNewRomanPS-BoldMT nfMALIFZ+TimesNewRomanPS-BoldMT*1 [25 0 0 -25 0 0 ]msf99.4817 190.8 mo(!"#$%)[5.50003 18 16.6252 23.5 0 ]xshMALIFZ+TimesNewRomanPS-BoldMT*1 [17 0 0 -17 0 0 ]msf182.482 195.84 mo(&)shMALIFY+CambriaMath*1 [25 0 0 -24.5098 0 0 ]msf190.857 190.496 mo(!)shMALIFY+CambriaMath*1 [25 0 0 -24.5098 0 0 ]msf190.857 190.496 mo(!) false chp.62 lw
0 lj
@
%ADOBeginSubsetFont: KAAAAA+TimesNewRomanPSMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal MALIFX+TimesNewRomanPSMT gcheck setglobal} if
1 6616 16 <00010046ffe4034a03af00210222b0852b58b2080401b102024354584020
021a060c10100255060c0f0f0255060c0d0d02550616250f090760217021
0221b8ffc0b513130255211db8ffd4b4131402551db8ffcab6121202551d
3103002fed2b2bc42b5d3fc4ed012f2b2b2bcdc431301bb11223b8ffc040
732a2d340023430d5d36170d5705021c135404530553065407581b581c07
6705760580008021b41bc520d020e000e50509370147015618551c5f2360
18601c7618721c8a128e1390119018a601a402af23b301c101c707c719e9
08e41cea20f4011806024a1257128b1f8b208023f02307112001bcffe000
20ffe0001fffe0b2001d00b8034640301021016021802102002110212021
5021602170219021a021b021c021d021e021f0210d21661ddf0f010fc716
2509071db8ffd8b214391db8ffd8403812391d31030b21cc1f0c014f0c8f
0c020c2f100030004000600070009000b000c000e00009300040000200aa
731a831a02501a019f1a011ab8010c4012f0060100061006200630064006
0506432243b9029100182b4e10f472714ded5d7271fd715de47172ed003f
ed2b2b3feded7110f45d7172e412b10602435458400a531d631d731d0393
1d01005d7159393130383838013801715d005d017200722b2b435c58b400
1018391bb8fff0b613390510103901b8ffc0b2103920b8ffc0b11039002b
2b2b2b012b595901711bb70f0f092121030916b807eab46c0907031db808
1cb26c030b00183f2b3f2b12392f11392f30315901060623220235340033
321615140623222726262726232207061514163332373637034a25d8839c
e80101b487ae312c3b1e110b23233e643d51a189624e3734015cb5c30106
dfd8010e8f4d262f2615761f1e4a62a1a4fb432e7900>MALIFX+TimesNewRomanPSMT AddT42Char 
2 922 25 <00020045ffe403b903af000f001d022db0852b58b10202435458401c140c
06101002550c0c0f0f02550c0c0d0d02550c100b0b02550c1a04b8fff4b4
1010025504b8fff440130b0b0255040c0f0f0255041725080b1025000700
3fed3fed012f2b2b2bcd2f2b2b2b2bcd31301bb106024354584009102500
071725080b1ab8fff4401b0d0d06551a04140c0d0d0655140c100f0f0655
0c100d0d06550c04b8fff0400b0d0d065504041e0c0c1f1e1112392f1139
2f2b102b2bcd2b10cd2b003fed3fed31301b404512801501a716b616c501
c909c41dd9090612e70a0148094516571585018c09890fd91b071f403235
041f430d5d369f1f01c615c91a02401f014908102500071725080b1204b8
ffc0402b120b3f4f0401400401d0040140045004600470049004b0040604
ec0c40120b3f400c9f0c020c431e434b182b4e10f4722b4ded5d5d71722b
4bb028534bb050515ab10c1e49b11f0449525a58bd000cffc00004ffc000
1fffc0383838594358bc001a0332000400140332e910e91bbc001a033200
0400140332ed10ed59003fed3fed313043794036011d12250e2602251c26
0a250626110f1420001d011a2001160914200018071a2001130d1020011b
03102001150b17200019051720002b2b2b2b012b2b2b2b2b2b2b2b2b2b81
01720171722b2b71015d0143584011750275067a0a7a0e7a127816751875
1c085d595d005d435c5840091c1011391b10113915b8fff0b10b39002b2b
2b5959591bb10010b807eab46c00070817b807ebb26c080b00183f2b3f2b
303159013217161514060623222726353436361722060615141233323635
3427260200d07e6b76cf7fcf7a677dcc53356b429f82617e694703af9e87
af7bfc80a58bad7ef977413f9e7cc8fedea0c3f48c60>MALIFX+TimesNewRomanPSMT AddT42Char 
2 0 24 <0001000c000003f703af00330304b0852b58b10202435458401735401212
0255300c10100255310c101002550e080f1623b8ffea402e10100255231d
242908080d0d025508040f0f025508060c0c025508162412120255161a0d
0d0255160c1313025516b8fff4b40f0f025516b8ffdeb41010025516b8ff
ee40260c0c025516001d040f0f02551d080d0d02551d060c0c02551d2918
12120255290e1313025529b8ffeeb41010025529b8fff0b40f0f025529b8
fff6b40d0d025529b8fffa400a0c0c025529001c022430b803e240093140
0910025531320dbe03e2001003e2002203e2002503e24009240f2432071a
2c0207003fed3f2f2f10ededecec10dd2bed11123939012f2b2b2b2b2b2b
dd2b2b2bc02f2b2b2b2b2b2bcd2b2b2b10c410c42b10c410c431302b2b2b
1bb10602435458405e2f1610100655300c10100655311610100655001c02
24303132071a2c02070f24080c0d0d065508021010065508060f0f065508
16020d0d065516021010065516080f0f065516163534001d0c0d0d06551d
080f0f06551d02101006551d29b8fff0b40d0d065529b8fff0b410100655
29b8fff2b70f0f0655292935341112392f2b2b2bdd2b2b2bc01112392f2b
2b2bcd2b2b2b002f2f3fed3fddcd111239393130012b2b2b1b403a35402a
350835600d5d3630355035603570359035052d0401403560357035803590
35b03506b035d03502b0350160358035c035031d0816291e0fb8030f4011
2229291e244a2208291e0e4a231d291e23b8030e402e2331272a41301e31
441c00233233071a2c02072423230f0f0e0a17162407900801b008010f08
70089f08cf080408b802bd401b29331d242a1f2950296029702904802990
29b02903002910290229b8ffc04009141634296034a67f182b10f62b5d71
723cfd3c10fd5d71723cfd3c003f3c103c103c3fed3f3c113939f5edfc01
f52b2b2b2b3130437940121819030604251903171c01050618051a1c012b
01103c2b2b8181015d71015d71005d01722b2b59591bb532070f0a021ab8
080c40096c020722100d032425b803e2b46c0f0a240a00183f3f2b17323f
2b3f3f303159013633321617161511141716163315213533323637363511
34262322071114171616331521353332363511342626232207272533014b
a1924b6c20160e0b3142fe3b1340330a04414d77760b0e314bfe3b144631
0f1f1a1c270f01142b02edc24b563c7cfe79571f191c242427260f4f0177
7d7182fe1d5d161d1b242447640154a5481a0f247000>MALIFX+TimesNewRomanPSMT AddT42Char 
2 2934 28 <00010064ffe402d503af0031046ab0852b58b10202435458402733401313
025533400b0b02550201181010025501180f0f0255010f1b1a08270c0b0b
025527210fb8ffe0b4101002550fb8fff440320f0f02550f310708270f21
04122b05017905016c050105252f0101012a0719771e01631e011e25201a
01601a701a021a120b003fc45d5ded5d5d2f3fc45ded5d5d5d1217393f01
2f2b2bcd2f2bcdd4cd10d42b2bcd31302b2b1bb106024354584032210f27
08042a161e122e05022a3107601a701a021a19124b05016b057b05020525
2a07441e01641e741e021e25120b01210fb8fff2401a0d0d06550f0f3332
1a080e0d0d06550827120d0d0655272733321112392f2bcd2bc41112392f
2bcdc4003fed5d5d3fed5d5d10c4c45d3f10c4123911123912173931301b
4029092c192c0212122e400b392c280b391814590c5a269b109424050a07
0a280a29603370338033060f33b8012040870d5d36cb0dcb0ec424c425d7
23d624d92ce604e623e624e92c0b123f2c5d2c6e2d7d2c8f018f028f0380
15801a801b801c892d8f2e0d0f010f020a03090c061c0a2cc822c923081c
031614121c161d19291b2c9909990a9b20932393240b122b0d282c4a2c4f
335f337829782c860ea823af33e803e61c0c2908311e00bd021e011f012f
010201b8012bb200bd2eb8011a40112a181e19bd1b1e1a1f1a01101a201a
021ab8012bb219bd16b8011a4022121224230d0b040f2724230d0b04051e
01c7002e2f2a31000005252a071a7e191918b803464014162f1e25120b02
cc12010112cf21df21ef210321b80314400b700f01600f700f900f030fb8
01364019271a192e1f0801082c9f270160277027802703202730270227ba
012000320120b14b182b4e10f45d71724ded72f43c10fd5d71fd5d4358b2
ff21015d59392f435c58b2ff01015d59ed003fede4f43c10ed3fed3c103c
10e410ed1112173901111217394358400a242323240d0b140d0d0b870e2e
2b0e7d10c459180010ecf4ed5d720110edf4ed0010ecf4ed5d0110edf4ed
b10602435458b42e20090d34002b5931304379401c28291f20101106071f
11211c010629081c0020101e1c000728051c01002b2b012b2b8181818101
5d43584009fb07f610f611fb28045d5901720071005d435840199f019f02
9f039f0b9a0d9015901a901b901c992297239f2d0c5d595d2b017100722b
2b4358400b2f232f248b2c9b249b2c055d59435c58401128201939092819
3901400a3902400a391bb8ffc0b20a391ab8ffc040190a392e400a392c40
0a392c4009390c101e123f0e201e123f0eb8fff0b21b390eb8fff0b21939
24b8ffe8b2133923b8ffe8b213390cb8ffe8b613392c1813391bb8ffc0b2
12391ab8ffc0400f123901401239024012392c20123924b8fff0400f0f39
2c180f3903100d392e400d3923b8fff040120d390c100d392c200d392c18
11392c181139002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b012b2b59005d59591b400d02022e1a1a162e3107190a2a05
b807e6b46c2a07121eb807e6b26c120b00183f2b3f2b3f3f1112392f1139
2f3031590111232626232206151417161717161514062322272623220723
11331616333236353426242726353436333217163332363702902126775c
4656201f5f92cbbd75546c2115170d21211c9e62455761fede2d2d9b7b36
4d331110120c03affec8936a4a2d3828292e4763a27d991e0a1a01478c8e
5139455e903a39577198170f0e18>MALIFX+TimesNewRomanPSMT AddT42Char 
2 4208 29 <00010014fff1023c04c1001b0228b0852b58b1020243545840251d401213
02551d40101002550b0c18121202550c15130105131812120255130e1313
025513b8fff8b40f0f025513b8fff4b40d0d025513b8fff0400c10100255
130b082c0f161404b8011bb2000106003fcdfdd0cd2fedc4012f2b2b2b2b
2bddc010c62f2bcd31302b2b1bb106024354584019170c10100655160c10
100655150c10100655160c101006551bb8ffe8b4101006551ab8ffe8b410
10065519b8ffe8401410100655700b010b0f1b01156914014914011404b8
011b401c0106082c0f0b1b0105021010065505080f0f0655050c0d0d0655
0513b8ffeeb41010065513b8fff0b40f0f065513b8fffab70d0d06551313
1d1c1112392f2b2b2bdd2b2b2bd0cd003fed3ffdd05d5dc010cd10c45d31
30012b2b2b2b2b002b2b1bb9000dffe840410c395f015f02023f1d991199
19bf15bf16b819e819079f1d01891a014f0c4f0d5f0c5f0df51805061815
18271803161518191a030118191a03141ba00103153004b8011b401c0103
30020201060c35082c0f0b16cf15df15ef15031565141bcc000bb801ec40
2c200c010c2e2f1db01d021d000101040405241450130180130100131013
b013c013d013e0130613601cab89182b10f65d71723cfd3c103c103c105d
f45ded10ed10f45d3c003ffde43f3c10ed10edfd3c10e401111739001117
391239313000715d0171725d00722b59591bb61b014014160104b807ecb4
6c01060f08b80809b26c0f0b00183f2b3f2b39391a10cd30315901113315
231114163332363733060623222626351123353636373637014ad6d63328
213e11272380442e582a9137732d172904c1fed346fdae593e2928626333
5f630268211669482665>MALIFX+TimesNewRomanPSMT AddT42Char 
2 2338 27 <0001000d000002b703af002801dab0852b58b1020243545840282a401313
0255061f171127040f0f025527181f0111080d0d025511040f0f02551106
0c0c0255111fb8fff4b40f0f02551fb8fff6b40d0d02551fb8ffee401110
1002551f14121202551f0e131302551fb8fffc400b0f0f02551f01100318
1619bb03e20018002603e2400e4f276f277f2703272807180c0307003fcd
2f3fdd5ded10fdc011123939012f2b2b2b2b2b2bdd2b2b2bc010c4c62b10
c410c431302b1bb10602435458402301100318262728076f097f0902090c
030718061f01110c0d0d0655110410100655111fb8fffab40d0d06551fb8
ffeab40f0f06551fb8ffeab7101006551f1f2a291112392f2b2b2bdd2b2b
c010c4002f3fcdcd5d3fddcd1112393931301b406f2002200f3202320f40
02400f820407402a015f2a011f291e18272211291e17862327272041261e
2744000a0b2a111420100104188009010939100c010c590303000718170a
5f0601400601062e1f2a012a0011241f1f1f2001802090200200201020b0
20c020d02005206029a66e182b4e10f45d71723c4d10fd3c1072e4717200
3f3c3f3c10ed72ed5d11173901111239390010f5edfc01f52b2b31300172
71005d59591bb2161819b803e2b46c180a280cb80813b36b03280700183f
332b3f2b3230315901153633321615140623222623220706071114171616
33152135323736373635113426262322072725014c737937483424235715
12152d30130d423efe2b4622190a050d231a1f270a011503afcece432c27
364514295efe494c271b24242416102311500163a03d1c0f2470>MALIFX+TimesNewRomanPSMT AddT42Char 
1 4916 14 <00020049ffed038903af0032003d038bb0852b58b1020243545840203f40
0d0d02553f4013130255151b072e25080b0b0255250c0d0d025525000c33
b8fff0400b1212025533161313025533b8ffdeb41010025533b8fff44015
0f0f0255330c0d0d02553339070c0d0d0255072d2eb8ffc0402009120255
2e33001e04292c30340c40090b02550c401d1d02550c40111202550cb8ff
d4401e091202550c0c047f180118401112025518401d1d02551810251e07
3c2c04002fed3fedc42b2b5d12392f2b2b2b2bcd2ffd11123939d42bcd01
2f2bcd2f2b2b2b2b2bc0c0dd2b2bc410d4cd31302b2b1b406f0b1c8a3302
1253360112201f39803fa809b60a03122b127d007d3386008b0b8b35061d
12163a103f803f04091c4c054c06452045224c3a403f891d080a0e072000
2249014b0a490b49354b37433a493d570b670b8509840a840b0f54168316
021f3f5f3f0260083300343c2e292d34bb011b000c000cffc0b609390c28
0b390cb8ffc0401a3a35100c500c02400c500c600c03200c500c600c760c
040c3c18b8ffd840290b394f185f186f18032f187f1802187e1f10011025
1e07303c403c023c2c04702d802d022d35292c30b803464011040b2ec02d
012d602500330d0c0c343433b8fffcb41010065533bb016700240025ffc0
401a0e3900251f2580259025044025f0250280250125101010065525bb02
4300070015ffc0b21f3915b80167401e1b2f393107400e39200750078007
03100701f0070150070107433e436e182b4e10f45d7172722b4dedf4ed2b
10fd2b5d71722b3cfd2b3c103c103c103c10f65d3c003ff4fde45d10ed71
3fed72fd5d712b11395d71722b2b2b2fb10602435458b2030c01005d59ed
11123911123939313043794047353b1c23051337383638020609080a0802
06212220220206350b392000111d131c0012130f1f0d1c0122233b05391c
00380834200135340b121c101c010e22101c013a063c1c002b2b2b3c103c
2b012b103c2b103c2b2b2a2a2a818181017201710071017172005d4358b2
3f12015d59015d2b0072435c58b431400e392eb8ffe0b210392eb8ffe0b6
0e3937200e3920b8ffe8b20c3920b8ffe0400b0b3918200b3917200b391c
b8fff0401a0b390a280b3937280b390a280a3937280a390a280939372809
39002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b59005d591bb51818041e0c34b8
07e8b56c0c0c301e10b807e8b46c1e073029b8080db46c300b043cb80809
b26c040b00183f2b3f2b3f2b12392f2b1112392f30315925060706232226
353437363637353426232207061517140623222635343633321716171615
1114161633323736371506232226271106070606151416333202478d2436
3d5f7b1e29cbec57533f2526022f26252fb09f7a4e3b1c120a170f100c15
3c7066313a01972c4f4456384c846d1119826a433144785624896622222c
3a2e32342d5690291f422b85fec9833b14070d3c38964493015d3c192c60
39485f00>MALIFX+TimesNewRomanPSMT AddT42Char 
1 11918 22 <0002003c00000207058e000b0022026fb0852b58b10202435458b90024ff
c0401d0d0d0255120d080d0d02550d21181010025521180f0f0255211318
0309b8ffeeb41313025509b8ffe0b40d0d025509b8ffd6b40f0f025509b8
ffceb610100255090d18b8fff4b41313025518b8ffe2b40d0d025518b8ff
e0b40f0f025518b8ffd6b5101002551820b803e240174f216f217f210321
226f00010060060106400f0f025506b8ffc0b71313025506220613002f3f
d62b2b5dcd5d10dd5ded012f2b2b2b2bcd2f2b2b2b2bcd10c4c62b2b102b
c43130012b1bb10602435458400d20121010065521121010065506b8ffc0
b44b4b065506b8ffc0b44141065506b8ffc04019373706554006010006a0
060260060106000020212207130309b8fff6401c10100655090924230d02
101006550d020f0f06550d0c0d0d06550d18b8fff0b41010065518b8fff6
b40f0f065518b8fff0b70d0d0655181824231112392f2b2b2bcd2b2b2b11
12392f2bcd002f3fddcd3fcd5d71722b2b2b3130012b2b1b401990240160
2470249024a024f024052024502402402450240224b8ffc0b332323424b8
ffc0b3383a3424b8ffc0b32d303424b8ffc0b323253424b8ffc0402e191a
3418291e134a220d291e124a2321271941201e21440c190c139006010639
0000220c0713120a900901093903b8ffc0b2433503b8ffc0400f3f35036b
0c0c0d190d2418402b3918b8ffc0401a363a349018015018016018701890
18a018f0180518b223b2a3182b10f65d71722b2bed3c103c10f42b2bed72
003f3c3f3c3fed7211123910f5edfc01f52b2b3130012b2b2b2b2b015d71
5d017259591bb900060831b74000002207111314b803e2b26c130a00183f
2b323f3f1aed303159013216151406232226353436131114161633152135
323636351134272626232207272501292a3b3b2a2a3c3b7e193141fe4343
2e1b09071e1a1c280e0114058e3b2a2a3c3c2a2a3bfe21fd2056391c2424
1a3c550161952c20190f2470>MALIFX+TimesNewRomanPSMT AddT42Char 
1 8030 18 <0002004cffe4035303b00014001d03b4b0852b58b1020243545840280816
1415000c0f100255000e0c0f1002550e0c0d0d02550e1530400001200030
0002000010000200b8ffc0b41314025500b8ffc040111111025500000b1b
251107000710070207b8ffc0b40f10025507b8ffc0b5131402550704b8ff
d6b41314025504b8ffcab71212025504310b0b003fed2b2bc42b2b5d3fed
12392f2b2b5d5d5ded012f2b2bdd2bc02fcdc031301bb10602435458401d
158000a000b0000320003000400003000010000200000b1b2511070807b8
ffc040241010065510072007b00703000760078007a00704079204a204b2
040304310b0b07081614b8fff440260d0d065514141f1e15000c0d0d0655
000c0f0f0655000e0c0f0f06550e160d0d06550e0e1f1e1112392f2b2bdd
2b2bc01112392f2bcdd0cd003fed5dc45d5d2b323fed12392f5d5d5dcd31
301b4019125f185d1960006014d6030519201c3917201c3916401c391fb8
ffc0400a434a34081f430d5d361fb8ffc0b32828341fb8ffc040532a2e34
1b06190958135e165f175a185b1a07010309060709080c0515490689028c
06870c8a10851da302ab18b513d402d90fda10f402f30313126007600870
0780078909c107c80ff007080401070d84020309baffe00006ffe0404a36
09460247094f1f5402540962027202891389199913a409a40ab808b509b0
0ac702e702e00cf40a1408d007010007d007027107010007100720079007
a007b00706077d041400301615b8ffc040131239125f157f159f15df1504
15151bd3040104b8ffd0b2143904b8ffe8b2133904b8ffd8404812390431
0b0b5c1b011b25110707cc0816281b390f16016f167f168f160316f41414
800801300890080230088f08df08031008400860087008b008e0080608aa
0e15040089000200b8032c4012300e400e500e03000e100e200e03f00e01
0eb8ffc04009434a340e431e434b182b4e10f42b7172724dfd713c10fd5d
715d713c10ed5d712b10ed003fed723fed2b2b2b7211392f5d4358b26f15
015d592b3cfd3c10f45d5d7172393130015d00383800715d014358b40600
010202715971722b2b2b2b2b2b2b0072435c58b90007ffc0400b23390c40
2d390d402d3908b8ffc0b2283907b8ffc0b2283906b8ffc0b21b3907b8ff
c0b21b3908b8ffc0b21b3907b8ffc0b20a3908b8ffc0b20a3907b8ffc0b2
093908b8ffc0400e093915101939192011390d201139002b2b012b002b2b
2b2b2b2b2b2b2b2b2b2b5959591bb507070b111500b807e5b56c15150b11
1bb807ebb46c11070b04b8081fb26c0b0b00183f2b3f2b12392f2b111239
2f3031591306171633323637170606232202353412333216152521262726
26232206da016464875a852d1f15ca98a5ebf1b69ac6fd8701a805101963
365383023bcc747463781489e10101d9eb0107cbaa3a582438408100>MALIFX+TimesNewRomanPSMT AddT42Char 
1 7268 17 <00020044ffe40405058e001f002d0272b0852b58b1020243545840262f40
101002552906180d0d025506080f0f0255060c101002550600201d160a0d
0d0255160b20b8fff4401112120255200c1313025520180d0d025520b8ff
f8400c0f0f0255201810100255201cba03e2001dffc0b6091002551d1f12
b803e240101340090e0255131400252509072c2c03002fed3fed3fdd2bed
2fdd2bed012f2b2b2b2b2bc0dd2bc410c02f2b2b2bcd31302b1bb1060243
545840521213140000200b0303252509071c701d01401d601d021d1f0b2c
2c030b160c0d0d0655160410100655160b20141010065520040f0f065520
020d0d065520202f2e290c0d0d06552906180d0d065506062f2e1112392f
2bcd2b1112392f2b2b2bc0cd2b2b003fed3fdd5d5dcd3fed1217393fddcd
31301bb9002fffc0b34747342fb8ffc040422b2e34602f7c047c058a0480
2faf2fc02f07402f802f02002f162a152b55055508542b96070748070120
2f370a470a560a9804a72aa02f07c02ff02b022020002021baffe0000bff
e040453c204f205e20660a6c207a209f009f20aa07b907c62a0b26081327
0c41121e1344151d2716411c1e1d441f0020210b042c1500252509071f2c
012c2c1f030b1f000b210c20b8016740121560168016af16031f16901602
16eb295006b8ffc0b3282e3406b8ffc0b7473506432e437f182b4e10f42b
2b4dedfd725d3cfd3c3c3c3c3c003f3ced723fed3f11173910f5edfc01f5
0010f5edfc01f531304379401a262b0408272526082920002b0429200028
072520012a052c2000002b2b012b2b2b8181005d3838383801715d007101
72715d2b2b59591bb514001f0b0925b807e9b46c0907032cb80805b26c03
0b00183f2b3f2b3f3f303159250606232226353412333217353426262322
072725331114161633323717052335112e0223220706151416333202c743
804a96e0f8c3794f0f20181a2b0d01112d0f21161b2d0bfef02e063c632f
58455bb06c5b67463dfbc5c501474da99d481a102370fbdda1471c112371
c901d84470394f68c8cad700>MALIFX+TimesNewRomanPSMT AddT42Char 

1 0 1 <> MALIFX+TimesNewRomanPSMT AddT42Char 
1 448 4 <0001005301800258021700030054b0852b5840200205801d64367f050101
000200b0030300021001500160019001a001d0010601b80134b500800454
5a182b10f6fd5d3c103c002fed3c103c3130015d2b1bb10003b8081ab16c
0000182f2b30315913211521530205fdfb021797>MALIFX+TimesNewRomanPSMT AddT42Char 
2 1574 26 <0002fff9fe4a03ba03af002700390253b0852b58b1020243545840293b40
13130255320a2a131302550a060f0f02550a1813190020032913080d0d02
551320161313025520b8fffab40d0d025520b8fffcb40f0f025520b8fff4
400d101002552003282b12040e061aba03e2001703e2400b1819182e250e
3659060727b803e24009004009100255000107003fdd2bed3fed2fed2f2f
10eded11121739012f2b2b2b2bdd2bc0c010c6c410c42f2b2bcd31302b1b
b10602435458b90032fffcb50d0d0655320ab8fff040180d0d06550a0a3b
3a0329130c0d0d06551302101006551320b8fff6b40d0d065520b8ffee40
1b1010065520203b3a0328060e270001190e2e250e0b365906070107003f
3fed3fed3f10ddcd11123939011112392f2b2bdd2b2bd0c01112392f2bcd
2b31301b407e0a3b430d5d36391049105b10891104862c013b2c3f3b4b2c
5b2c6a116a2c73087911792c8408a507e908f9090d303b583359346c3404
403b012f08032829121320291e19862213291e1827230027214f271e0044
02122b2803042e1036013659060702072e250e0b19180e32311f0a900a02
600a800aaf0a030aeb200213b80167401b20205021702102802101002110
21b021c021d0210521603ac24b182b10f65d71723c10fd3c10fd5d72ed00
3f3c3fed3f3fed7211173910f5edfc01f52b2b030e103c3c3c3c31304379
40202f35070d082534260c26302535073220012f0d322001330936200131
0b2e2000002b2b012b2b2b2b2b2b81810171725d00715d2b59591bb30107
0636b80817b46c06070e2eb807e7b56c0e0b17191ab803e2b26c190e0018
3f2b323f2b3f2b3f30315903253315363633321716151407062322272627
111416163315213533163736363511342626232207051114171616333237
36353427262322070602011a26478f4f8a5c718870aa4a36283217394bfe
20193727131510231e18250134090e6d53643e515c4058302f24033972d6
79616c84d4ed9b7f150f2dfee95e331e252501160b316403625930180e7f
feaa6f233a584e66b9d2714e1812>MALIFX+TimesNewRomanPSMT AddT42Char 
1 12650 23 <0001003d0000020f058e001501acb0852b58b10202435458b90017fff640
1d0d0d0255140c06010701080d0d025501040f0f025501060c0c0255010c
b8fff2b4131302550cb8ffeab40c0c02550cb8ffe2b40d0d02550cb8ffd6
b4101002550cb8ffdeb50f0f02550c05bd03e2000803e20007001303e240
0b131440090d025514150007002f3fdd2b32ed10eded012f2b2b2b2b2bcd
2b2b2bc410c410c631302b1bb10602435458402713121010065514141010
065513141500000007010c0d0d065501021010065501040f0f0655010cb8
fff0b4101006550cb8fff4b40f0f06550cb8fff0b70d0d06550c0c171611
12392f2b2b2bcd2b2b2b002f3f3fddcd3130012b2b1bb79017c017f01703
17b8ffc0b33f463417b8ffc0403a393b340117b20d643650170140175017
601770179017a017f017070c291e074a2201291e06272314270d41131e14
4415000007060a0001240d0cb8ffc0b33f46340cb8ffc0401a353b34900c
01500c01600c700c900ca00cf00c050cb216b2a3182b10f65d71722b2b3c
fd3c003f3c3f3cf5edfc01f52b2b3130015d0171012b012b2b017259591b
b41500050708b803e2b26c070a00183f2b323f3031590111141616331521
3532363635113426262322072725017b193447fe3f3f2e1a0e1f181a2811
0111058efb4156381d24241a3c5503409b471a102370>MALIFX+TimesNewRomanPSMT AddT42Char 
MALIFX+TimesNewRomanPSMT /CharStrings get begin
/g16 16 def
/g25 25 def
/g24 24 def
/g28 28 def
/g29 29 def
/g27 27 def
/g14 14 def
/g22 22 def
/g18 18 def
/g17 17 def
/g1 1 def
/g4 4 def
/g26 26 def
/g23 23 def
end
MALIFX+TimesNewRomanPSMT /Encoding get
dup 39 /g16 put
dup 40 /g25 put
dup 41 /g24 put
dup 42 /g28 put
dup 43 /g29 put
dup 44 /g27 put
dup 45 /g14 put
dup 46 /g22 put
dup 47 /g18 put
dup 48 /g17 put
dup 49 /g1 put
dup 50 /g4 put
dup 51 /g26 put
dup 52 /g23 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/MALIFX+TimesNewRomanPSMT*1 [33{/.notdef}rp /g33 /g9 /g13 /g5 /g6 /g7 /g16 /g25 /g24 /g28 /g29 /g27 /g14 /g22 /g18 /g17 /g1 /g4 /g26 /g23 203{/.notdef}rp]MALIFX+TimesNewRomanPSMT nfMALIFX+TimesNewRomanPSMT*1 [25 0 0 -25 0 0 ]msf88.9817 214.8 mo('\(\)*+,-.\)/01)[11.125 12.5 12.5 9.75019 6.87498 8.24982 11.125 6.875 12.5 11.125 12.5 0 ]xsh90.0417 238.8 mo(+\(1$)[6.87499 12.5 6.25 0 ]xsh128.167 238.8 mo(2)sh136.417 238.8 mo(%134)sh174.542 238.8 mo(-\)/)[11.125 12.5 0 ]xsh278.4 239.211 mo
249.366 312.452 li
252.62 313.742 li
281.653 240.501 li
cp
250.993 313.097 mo
245.438 303.365 li
247.124 322.858 li
261.707 309.814 li
cp
f
281.71 239.797 mo
282.29 98.4918 li
278.79 98.4774 li
278.21 239.783 li
cp
280.54 98.4847 mo
289.261 105.521 li
280.583 87.9848 li
271.761 105.449 li
cp
.15848 1 1 .0960708 cmyk
f
%ADOBeginSubsetFont: OAAAAA+TimesNewRomanPS-BoldMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal MALIFZ+TimesNewRomanPS-BoldMT gcheck setglobal} if
1 318 2 <000100320000039c0568001c00e840248802ae02ac0303270c9503020a0b
0a0b0100051b12a016b41602161c020217010a0b081cb80160b6122f17b0
170217b80122b2011208b8ffc0b30b0d3408b80324b40e05010c03b801f4
401b000510050205dc12d30f1c01bf1c011c1a1e0f0101bf010101191dba
0158019000182b4e10e45d7110f65d714df4fd5de4003f3fed2b435c5840
130840160d3f0840170e3f0840190f3f08400d392b2b2b2b5910fd5d435c
58b90017ffc0b3160d3f17b8ffc0b3170e3f17b8ffc0b31b103f17b8ffc0
b21c113f2b2b2b2b59e4113939111239011112395d1139123911393910c9
3130015d005d212135001235342623220727363633321616151407060121
32363637330350fce2016f9d825e9a552536dc9067aa604a65feac01256c
412a22241601b5012e90698b9a0dc0b860a7498589b9feb5122b4500>MALIFZ+TimesNewRomanPS-BoldMT AddT42Char 
MALIFZ+TimesNewRomanPS-BoldMT /CharStrings get begin
/g2 2 def
end
MALIFZ+TimesNewRomanPS-BoldMT /Encoding get
dup 39 /g2 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/MALIFZ+TimesNewRomanPS-BoldMT*1 [33{/.notdef}rp /g7 /g3 /g4 /g5 /g6 /g1 /g2 216{/.notdef}rp]MALIFZ+TimesNewRomanPS-BoldMT nfMALIFZ+TimesNewRomanPS-BoldMT*1 [25 0 0 -25 0 0 ]msf440.751 97.44 mo(!"#$%)[5.50003 18 16.6252 23.5 0 ]xshMALIFZ+TimesNewRomanPS-BoldMT*1 [17 0 0 -17 0 0 ]msf523.751 102.48 mo(')shMALIFY+CambriaMath*1 [25 0 0 -24.5098 0 0 ]msf532.126 97.1362 mo(!)shMALIFY+CambriaMath*1 [25 0 0 -24.5098 0 0 ]msf532.126 97.1362 mo(!) false chp@
MALIFX+TimesNewRomanPSMT*1 [25 0 0 -25 0 0 ]msf430.251 121.44 mo('\(\)*+,-.\)/01)[11.125 12.5 12.5 9.75018 6.875 8.24982 11.125 6.875 12.5 11.125 12.5 0 ]xsh431.311 145.44 mo(+\(1%)[6.87497 12.5 6.25 0 ]xsh469.436 145.44 mo(2)sh477.686 145.44 mo(&134)sh515.811 145.44 mo(-\)/)[11.125 12.5 0 ]xsh619.027 337.876 mo
619.027 53.3638 li
616.777 53.3638 li
616.777 337.876 li
cp
617.902 53.3639 mo
623.527 57.8639 li
617.902 46.6139 li
612.277 57.8639 li
cp
.518151 .434821 .434821 .0814221 cmyk
f
617.902 336.751 mo
1000.01 336.751 li
1000.01 339.001 li
617.902 339.001 li
cp
1000.01 337.876 mo
995.509 332.251 li
1006.76 337.876 li
995.509 343.501 li
cp
f
3 lw
1 lj
618.278 133.577 mo
647.217 202.965 676.156 272.353 709.068 266.301 cv
741.979 260.25 815.745 97.2658 815.745 97.2658 cv
.750179 .679652 .670191 .901488 cmyk
@
.518151 .434821 .434821 .0814221 cmyk
%ADOBeginSubsetFont: KAAAAA+TimesNewRomanPSMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal MALIFX+TimesNewRomanPSMT gcheck setglobal} if
1 4044 12 <0001002a000004b4054c00330190b0852b58403f4035671c771c9b30a918
ac30bb30e035085619700670077f087f09800680078f088f0909241f1b1d
2122251f1b2b212308401010025508210e0e1f091b0807b8ffc040211010
0255072102021f061b071c101b0201230e0f0f1d3300a52b2e002d102d02
2db802d340212c2c2b021514a51d1be81c1c1d0809ac080806ac3f077f07
02000710074f070307b8ffe640501010025507762eac2c2b1f2d2f2d022d
6c1aac201b401bdf1b031b5350357035a035033500100613130255100c0f
0f0255100c0d0d0255102225240c10100255240c0f0f0255241a0d0d0255
249e34e0b9018700182b10f62b2b2b3cfd2b2b2b3c105df65dedf45de4fd
f62b5d5ded3c10ed003f3c10ec10fd3c3f3c10fe5d3c10fd3c12392f3cfd
3c0111123910edec0010f52b0110edec0010f52b2b2b3130005d015d1b40
0f2e2e2b06062b09092b1a1a1d2b010fb807edb56c01011d2b00b807edb2
6c2b2ab803e2b46c2b021d14b807edb26c1d1eb803e2b26c1d0800183f2b
2b3f2b2b12392f2b1112392f11392f11392f11392f303159011121323736
373311232627262623211114161633333236373637330321353332373636
3511342726232335211323262627262301ac012a7427340625250e0e1252
55fed6102838e67368303e412875fbeb30302b20171a24543004150f2715
333228650502fde8232e74fe28631c2328fe415a2717202f3e7dfeac2517
1040630371811e2825fed76b50150f00>MALIFX+TimesNewRomanPSMT AddT42Char 
1 9778 20 <0003003dfe4603db03af003b0049005903fdb0852b584082121650972699
3603002d105b02762a765302002a062e06528b20043f374f5b6f37752670
5b8f048f05831784188f358a3e83458f4b864f95179518994fb804b905b4
17b418c934c94bc05bd05be05bf05b1b1a201533103514361f5b05a7084a
363f1b00160336214a1b0019431211100f0e0d0c0b0a0909131314090880
25011225b8ffdeb41214025525b8ffc0b3140c3f25b8ffc0400b120b3f9f
25af25bf250325b8019eb5582b80210121b8ffde400d12140255129f21af
21bf210321b8ffc0b3140c3f21b8ffc0b3120b3f21b8019e4018904a014a
40140c3f4a40120b3f4a2c121202554a50140114b8010840136f08017f08
0108401114025508350699430143b80331400c194a0a2f19015019801902
19bd02d200060009034d003c0331400a0607195101512c2c0f4dbe033000
30001e03300039004d0330401f1030016f308f309f300330180f10025530
0c101006553035392e0380540154b8ffdeb40d0f025554b8ffcab4101402
5554b8ffdeb41010065554b8fff0400a0d0f065554251f280128b8ffc040
16171a348f28014f287028c028d02804280e1010065528b8fff4b40f0f02
5528b8ffee4012101002552875205b305b405ba05bd05b055bb8ffc0401c
0b0c345b0e8f96460146101010065546312016010f167016cf160316b8ff
f2401110100255160c11110255160c1010065516b802bd4013993f013f31
3003500302500301000310030203b8ffc0b3191d3403b8ffc0b30b0c3403
b8fff4b41313025503b8fff4b70f10025503695a5bba01780021010ab189
182b2bf62b2b2b2b5d7172ed72fd2b2b2b5d71ed2b72e4102b71f62b2b2b
5d712b72ed2b2b2b2b7110e4f42b2b5d72ed10ed10ed003fed723ffde610
ed5d713f10ed7210f42b5d5ded72102b2b2b5ded2b2b5d4358b4cf21df21
025d592b72f4ed5d2b2b2b4358b4cf25df25025d5972103c103c11121739
11123939111239011112393912393931304379407a4b573a4524351c1d17
1801052625323133313431030641264f262e252a265625541c011c3b1e1c
004b354d200042013f20003d053f1c00502d4d1c00522b5420014418461c
015527571c0156571d3a1b1c011c1b3b004c314a20014b4a353640024320
0001003e043c1c014e2f511c0053295120004517431c00002b2b2b2b103c
2b103c103c2b103c103c2b103c2b012b2b2b2b2b2b2b2b2b2b2b2b2a2b81
818181818101725d00715d01710072435c58400a2e10120b3f351012392e
b8fff0b11239002b2b2b591bb10814b807f640256c7f08016f08015f0801
4f08013f08012f08011f08010f08011203080640364a2c001b1943b807df
b56c19194a063cb807dfb56c0607512c0f00183f333f2b12392f2b393912
39391a10cd5f5e5d5d5d5d5d5d5d5d2b3031590126263534363332173332
161716151407060623231615140623222706061514161716171617161615
140706232227263534373637363726263534360122061514171633323635
342726010606151417163332363534272627260135545acda08360c22b0e
030605030f2b7738c4a544472c1f21301c70ce3d5d6f6a9cfbc1854b0b11
35075f342b3901154a644434504c624533fef82f303a64bdb4ab33349ae1
014e29935988c440050609171a0a0506487080b614263914112007040305
090d70527163925732361818254209631f311f235e0287767a9e5742727a
9f5a42fc8133582530243e7f483416160406>MALIFX+TimesNewRomanPSMT AddT42Char 
2 6420 32 <0001000cfe4603f4039400320255b0852b58b10202435458401409092b2a
0300782701271d120614181010025514b803e2b611181010025511b803e2
b602181010025502b803e2b632181010025532b803e2b10006003fed2bed
2bec2bec2b3f2fcd5d121739012f31301bb10602435458401e092b001d14
11027a3201320012060006237a2701271d0f141433000034331112392f11
392f003fdd5dc43f3f10dd5dd0d0c0111239393130b0104b5458bd001bff
f80019fff0001afff0b10a1038383838591b40ab0910120b3f0e2b952902
13342e1664368305850602090905120819081a092b141a26092412241a26
2b38013612351b47126809680a6919661a631b682c7808790a7919771a74
1b782c890a891998009809971a962bbb00d034e506230909082b2b2c2a2a
0a0108021e011319141e13002c321e00120a111e12260820191a1a302a0a
142a2a0a2c2b2b24090814092b2a09082b2a1a09040a082c2b2a1a190a09
0808231312120101000627b8ffc0400e120b3f272f23391d0f3417171a19
b80108401b8f0a01df0af00a02600a700aef0a030a7d3f094f095f090309
7d08b8010e401d2bd60f20010f209f2002208f5f2c012f2c3f2c022c1933
34a921a67f182b2b4ef45d724de45d71e4fdf45df45d5d71fd4e456544e6
003f4dfde42b3f3c103c103c121739011112173987082e2b0e7d10c4870e
2e182b7d10c401111239180010ed0110c00010ed0110c00010ed0110c000
10ed0110c00710083c083c3130015d01712b005d012b59591b400c2b091d
001206321114030003b803e2b46c00061d27b80820b26c1d0f00183f2b3f
2b17323f1112393930315913211523220615141713133635342726262335
211506060706070106062322263534363332171633323637370126272627
26270c01ab152d2d21dfcd110708222b012a2528180919fe8b36af513b4c
37302139280a1e472441feb70f2119101733039425271d2745fe3201fa29
2812090b0d25250418210e3ffc6e8588442c2a33160f3e599f02b31f2e23
0c100c00>MALIFX+TimesNewRomanPSMT AddT42Char 
2 7300 34 <00020057ffe4042303af001a002400d0b0852b5840638a1289169a12a812
b81205830f8210020f0424021b1a0617110100061e251707090008010808
06590c0b2225110b200e0d0d0655092f8008a008b008c0080408080f0403
020401241b1a031401240f003e004e000310008f009200a200b200050000
20b80332b7144024273414432510f62bfd322f5d71ed121739121739322f
5ded2b003fed3ffd322f5d3c3fed3f3c111217393130015d5d1bb61a0f11
0006171eb807efb46c17070c06b80814b46c0c0b1122b807e7b26c110b00
183f2b3f2b3f2b3f12393930315901330306071633323733060623222627
0623222635341233321617072626232211103332130314aa671e0b284c5a
0324034f4035341e68eca1bed0926784331b2f7451b7af98490394fe3184
1eb87c748f5685dbfbeae6010092a56ca1b5fe54fe6a0166>MALIFX+TimesNewRomanPSMT AddT42Char 
MALIFX+TimesNewRomanPSMT /CharStrings get begin
/g12 12 def
/g20 20 def
/g32 32 def
/g34 34 def
end
MALIFX+TimesNewRomanPSMT /Encoding get
dup 53 /g12 put
dup 54 /g20 put
dup 55 /g32 put
dup 56 /g34 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/MALIFX+TimesNewRomanPSMT*1 [33{/.notdef}rp /g33 /g9 /g13 /g5 /g6 /g7 /g16 /g25 /g24 /g28 /g29 /g27 /g14 /g22 /g18 /g17 /g1 /g4 /g26 /g23 /g12 /g20 /g32 /g34 199{/.notdef}rp]MALIFX+TimesNewRomanPSMT nfMALIFX+TimesNewRomanPSMT*1 [25 0 0 -25 0 0 ]msf582.065 36.96 mo(5\)/,67)[15.2498 12.5001 11.125 7.7998 12.5 0 ]xsh1026.44 343.68 mo(8)sh.895628 .7673 0 0 cmyk
%ADOBeginSubsetFont: OAAAAA+TimesNewRomanPS-BoldMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal MALIFZ+TimesNewRomanPS-BoldMT gcheck setglobal} if
1 2412 8 <00020057ffe4044b03c3001a002700e9b90019ffe0404e1214340b100619
1810171904281c010827013702371b57025516571b661676168412841688
260a1b1a0027270020000174008400020020282a34005e0102140101020f
04071b1a00061e26170709b8032b401d07660d0b0d2426110b1a1b270321
05020102040f03002a700180010201b8ffc0400e0a0b340101091f0f0a01
ff0a010ab8ffc040110c0e340a0a290f211f21022140d0140114b8ffc0b5
0c0e3414382810f62b5ded5d11332f2b5d71ed332f2b5ded17335d111739
003fed333ffde43fed3f333311333387052e2b2b715d0e7d10c4070e3c3c
3130015d7172005d2b012103060716163332373306062322270623220235
3412333216170726262322061114163332363702ff01125f222009391e51
05250249355c266fe7b9e3e1a05272381b3955393540293b284b2d03a7fe
46a055354694b17cc9c90102cdd6013a697b7ca56b8bfeb0c1ad5cd4>MALIFZ+TimesNewRomanPS-BoldMT AddT42Char 
MALIFZ+TimesNewRomanPS-BoldMT /CharStrings get begin
/g8 8 def
end
MALIFZ+TimesNewRomanPS-BoldMT /Encoding get
dup 40 /g8 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/MALIFZ+TimesNewRomanPS-BoldMT*1 [33{/.notdef}rp /g7 /g3 /g4 /g5 /g6 /g1 /g2 /g8 215{/.notdef}rp]MALIFZ+TimesNewRomanPS-BoldMT nfMALIFZ+TimesNewRomanPS-BoldMT*1 [32 0 0 -32 0 0 ]msf234.271 282.24 mo(\()sh618.279 267.827 mo
647.218 267.827 676.157 267.827 709.068 267.827 cv
741.979 267.827 815.745 267.827 815.745 267.827 cv
.750179 .679652 .670191 .901488 cmyk
@
617.902 251.885 mo
646.896 260.24 675.891 268.595 708.864 267.866 cv
741.838 267.137 815.745 247.513 815.745 247.513 cv
@
282.169 238.77 mo
395.811 281.99 li
394.566 285.261 li
280.925 242.042 li
cp
395.189 283.626 mo
391.756 272.959 li
405.003 287.358 li
385.535 289.316 li
cp
.15848 1 1 .0960708 cmyk
f
280.187 238.248 mo
395.239 266.969 li
394.392 270.365 li
279.34 241.644 li
cp
394.815 268.667 mo
390.143 258.482 li
405.003 271.21 li
385.905 275.461 li
cp
f
270.016 261.69 mo
263.206 263.121 256.525 258.76 255.094 251.95 cv
255.067 251.817 255.041 251.684 255.017 251.551 cv
.750179 .679652 .670191 .901488 cmyk
25400 lw
gsave
[-7.754e-05 1.36951e-05 -1.36951e-05 -7.754e-05 282.025 259.576 ]ct
@
grestore newpath
%ADOBeginSubsetFont: KAAAAA+TimesNewRomanPSMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal MALIFX+TimesNewRomanPSMT gcheck setglobal} if
1 3610 11 <0001004affe1050f056b0024013bb0852b584042091e2f012f022f032f1f
960f991ea30fa312b60fb7120b081e011617017d037b1578168d038a169d
03961aac03bb03090c030e04021d48035903052f081011241b00b80105b5
021b0101ba00b8034bb6209a05281c0301b802dfb5112bb0100110b80341
b58f0d9f0d020db8032f402f140902ac000101013210acaf11011f113f11
02111a40260126093c2018010f181f1802180c0d0d02551849256463182b
4e10f42b5d724ded4e105df672714dedf471ed003ffd71f45df4e63fedec
f4ed0110edf4ed10c9313043794020151b060c07251a260b261625061b09
2d000c15092d000819052d010a170d2d00002b2b012b2b2b2b2b2b818101
715d0072715d1b400e20201c10101c0202141c24031c05b807ebb46c1c03
140db807f5b26c140900183f2b3f2b3f1112392f11392f11392f30315901
132326262322060215141216333236371706042320272635341224333217
16333237363704d11f1f3ee6a187da7d76ed9884ca791f66fef0bbfeafb9
8ab6013fbd938f2a121b141a0b056bfe33cfb689fed4dfb8fef29071a814
b5a8fabafccb0154bb4816131b30>MALIFX+TimesNewRomanPSMT AddT42Char 
1 2726 10 <00030022000004e6054c001e002b003802ceb0852b5840305a005a1e8900
881e8933991a9d27ac1aac27e91aea27e72f0c38007a2779339a329933a5
24aa33d81ad827d8280a043ab802e7b30f67363ab8ffc0b31c22343ab8ff
c040e31517343340212c343340191e34324023283432401b1d3444244425
891ad901d624da33e52507042401250d32100315061b1a141e1624162815
302e3245244a34570158195a279602111000103a55015a24603a703a803a
a03a081a301a3250000310071a241e28192f040602031e171e4f3388249a
24d93307203a403a503a6302630360056006600760307606731a731b701e
742473277a288406861b861e8f33803aca2fda2feb24fa241959080f1f1b
092122101f1b16212333240003042c00352b1f24032229382c33032e2228
353509162928171716022e280808090890260126b8ffc0b23a3526b8ffc0
b2423526b8ff80b33f413426b8ffc0b343463426b8ffc040144235264c5f
1c010a1e301c021c55042b1f382c31b8ffc040104535124004a004020004
a004e0040304b8ffc0400a0d113400040120040104b801d140252c061313
02552c0c0f0f02552c0c0d0d02552c22100f0e0f1002550f200d0d02550f
9e393abc01d100210061011800182b2b4ef42b2b3c4ded2b2b2bfd5d712b
5d714358b90031032de91bb90031032ded592b103c3c3c10f45d72ed2b2b
2b2b2b72003f3c10ed3f3c10ed1112392fed121739111217391139011112
17392b2b3130437940412f342328181e01071a1b191b0206062624250225
332628182633012f07313301231e2633033401313303271b29330130052e
3300251d2233001e32033533010100103c2b3c2b2b2b012b2b2b2b2b2b2b
2b2a81818181015d7101727272007271002b2b2b2b012b2b2b005d005d1b
b2002235b807ecb56c222209162bb807f6b26c1629b807eab26c1615b803
e2b46c1602092cb807fdb26c092eb807ebb26c090ab803e2b26c09080018
3f2b2b2b3f2b2b2b12392f2b393031590116171615140606232135333237
363511342726232335213217161615140625161633323636353426232207
1116333236353426262322060703b28d466180dfe5fd80335525171d274d
33024aa463969e7cfd7b255f3992934ec2ba64507471b5be56c28f3e581b
02b41e425c8565b95525362372036c7e212c251824b77766a10f07073f82
4d77a816fb6f1ba3784f92540405>MALIFX+TimesNewRomanPSMT AddT42Char 
1 1850 8 <000200b0ffe4019003b0000b0017005bb0852b58b10319b80125401d0d67
369019a01902064000070c40120b0f4015034009349015a0150215bc0125
001800d2010000182b10f65df4ed10ed003fed3fed3130015d2b1bb70c12
0600120b000700183f3f1133113330315901321615140623222635343613
321615140623222635343601212e41412e2e41412c2f41422e2e414103b0
412e2e41412e2e41fd13422e2e41412e2e42>MALIFX+TimesNewRomanPSMT AddT42Char 
2 4848 30 <00010002ffe403fd039400250258b0852b58b10202435458401627401212
02550801080d0d0255010b20281212025520b8fffc400b0f0f0255201e0d
0d025520b8ffe4401310100255201a080d0d02551a121c1212025512b8ff
f8b40f0f025512b8fffab40d0d025512b8fff4b5101002551224ba03e200
1703e2400e1825060b200e18061d2c0e0b0708b8ffc0b509100255080a00
2fdd2bcd3fed3f1239393f10edec012f2b2b2b2bcd2b2f2b2b2b2bc0dd2b
c431302b1bb1060243545840570740086008700803080a0b200b180e2425
1718250618061d2c0e0b0b010810100655010a0f0f0655010c0d0d065501
201a040f0f06551a04101006551a0a0d0d06551a1208082620080f0f0655
20060d0d065520202612b8fff2b41010065512b8fff6b40f0f065512b8ff
f6b70d0d0655121227261112392f2b2b2b11392f2b2b11392f10cd2b2b2b
10cd2b2b2bc0003fed3f3f10cd10cd111239393fdd5dcd31301b40350127
600d5d36202760277027b02704340b371f3a20481f4820051a08134f1e18
2723214f1e25272308270141071e0844200b251d08b8014540130a002525
191918061d2c0e0e0a0b0a0b0b2120b80167400e00b001010f0170019f01
cf010401b802bd402512191a241212501390130280139013b01303001310
132013b013c013d01306136026c27f182b4e10f45d71723c4d10fd3c10fd
5d713cfd3c3c103c003f3c10ed3f3c103c103c10ed11123939f5edfc01f5
2b2b3130437940101b1c0f111c0f1a1c0010111b101d1c002b01103c2b81
81005d015d2b59591bb2241817b803e2b76c2518060a0b0e1db8080cb26c
0e0b00183f2b3f3f332b3230315901111416163332371705233506062322
2626351134262607352111141633323637113426273503630f21161f270e
feee2d767c454d712c1c37480141593f2b6d4b395a0394fdd59f471c1123
71c28042598c80019941321b0125fd9b8050364c02074e370225>MALIFX+TimesNewRomanPSMT AddT42Char 
2 5564 31 <00010011ffe403ed0394002002eab0852b58b10202435458b60909001a12
0614be03e2001103e2002003e2000203e2b10006003fededecec3f2f1239
012f31301bb106024354584031180a091b080909222109001a0b14161010
0655141306112a1010065511120602161010065502010620161010065520
0006003fcd2b3fcd2b3fcd2b3fcd2b3f1239011112392fddcd10ddcd3130
1b400912530a58185b190319b8ffd8b20b3522b8ffc0406115351419141a
2309220a2111201224182019201a3a09390a3a12391835193a1a4a084909
440a45184519491a69089c0899099d1a9a1b9f22a900a808a509a219a21a
a81bbe08b509b60ab618b719ba1abb1bc022d518f60af618fb1a2d9f0901
22b8ffc0b332603422b8ffc0b32b313422b8ffc0b31e293422b8ffc0b347
473422b8ffc0b327273422b8ffc0b323233422b8ffc0b311113422b8ffc0
4040191c340f227c007201720270057c20810585118f22093a08340a3418
391bc606c021d81a07880a891887190337124818021318141e13001b201e
00120a111e12b8ff86402c091a192018191930090a1409090a1b1a1a2409
0814090908070605040408021e01131212010100061a190b18b8011d4012
5f0a01100a240a9f0ab60ad40a050a7d091bb80167401040062fa008b908
ce0803087d0919751abb011b00200009ffc0b30f123409b8ffc0b3191d34
09b8ffc0b2323509b8ffc0b70c350009c0090209b801bfb6102201802201
22b8ffc0b3191d3422b8ffc0b60f133421ab89182b19102b2b7172f45d2b
2b2b2b1afd18e61910f45d18f41aed1910f45d7218ed003f3c3f3c103c10
3c10ed01111739872e2b0e7d10c487052e182b0e7d10c42b180010ed0110
c00010ed0110c00010ed0110c03130015d5d5d712b2b2b2b2b2b2b2b005d
015d2b2b0172435c58b50a20160d3f08b8ffe8b7160d3f09240b3918b8ff
e0b213390ab8ffe0400a1339082013391b201339012b2b2b2b002b012b2b
5959591b400d091a0012061a0b201114030003b803e2b26c000600183f2b
17323f3f1112393031591321152322061514171313363534272626233521
150607060701230126262726271101af1c272915d5d617080b2234012b34
14231cfebb29feb916281f113203942526202330fe06020d381d0e090f0b
252504111e46fcee0305362f10090800>MALIFX+TimesNewRomanPSMT AddT42Char 
1 150 2 <00010054fe4a027c058e0013004bb0852b5840239611a71102860c891102
0a980911009801130100000a09a80e22500601068014545e182b10f65ded
fd3c3c103c003fed3fed3130005d015d1bb30113091100183f3f30315901
152627260235100037150606021514171e02027c9765909c0132f67b9e4e
211a4a7dfe6f254c6691018ad4013601ff6e2a44ecfe96c5d6af8aa79a00
>MALIFX+TimesNewRomanPSMT AddT42Char 
1 9078 19 <0001004f0000037a058c002b0241b0852b58b1020243545840252d401010
02552d400f0f02552d400d0d02551b2b01100e0601080e2901080d0d0255
01120eb8ffea4012121202550e120d0d02550e0c0f0f02550e06ba03e200
0903e2400a0824251e1700000f290fb8011bb2120608002f3fedc010c03f
cded10eded012f2b2b2bc0dd2bc010c410c610c610c6c431302b2b2b1bb1
0602435458b9000f011bb2120600b8011b401d2906241e17000829010c0d
0d065501060f0f065501021010065501120eb8ffd8400b0d0d06550e060f
0f06550eb8ffdab7101006550e0e2d2c1112392f2b2b2bc0dd2b2b2bc000
2f3fcdcd3fed3fed31301b403e8b2099159926034403440c48198503850c
059a04012f2d7f21900690079f089f099e109e11b02d0910061007025f2a
5f2b021c080eb41e08922201b41e07b80308401f231e9f1ebf1e021e1124
2517012b50100110302a2912110608070a101b011bb80152b38f2d012db8
02f6b2012a2bb80110400d282901120f1110920f0f01240eb8ffc0b36060
340eb8ffc0b33a3a340eb8ffc0b33f3f340eb8ffc0b32431340eb8ffc040
161c2134900e01000e100e5f0e700ec00ed00e060e192cba030603070018
2b4e10f45d722b2b2b2b2b4ded3c10f43c103c103c3cf43c10e65de47200
3f3c3f3c3c3cfd723c3ffd11395d2f2b2b31304379401225271416262515
262516281c002714241c012b012b2b2b81810172715d0072715d59591bb1
1724b807ec40096c1e1e111700001110b807ebb66c291106050809b803e2
b26c080a00183f2b323f332b323f12392f2b303159011114171633331521
353332363635112335333534363633321716151406232226262726232206
061515331501a61c253e53fddd29284219b2b258b57169583a341e17334a
1f1f262e401cec034cfda680222c2424284462025a483c89be75442d381e
35216d13133167d64248>MALIFX+TimesNewRomanPSMT AddT42Char 
1 300 3 <0001002efe4a0256058e0013004ab0852b58402429042a08480503009801
110a980913000101090aa80e222006300640060306801558a4182b10f65d
edfd3c3c103c003fed3fed3130015d1bb30913011100183f3f3031591335
1617161215100007353636123534272e022e98658f9cfecff77b9f4d2119
4b7c05642a4b6692fe77d5fecafe016e2545eb016bc5d5b08aa69a00>MALIFX+TimesNewRomanPSMT AddT42Char 
1 11056 21 <0001000d000003f3058e003602bdb0852b58b10202435458401d38401212
0255100a110a080d0d02550a182412120255181a0d0d025518b8fff8b40f
0f025518b8ffe0400c10100255180e131302551826b8ffea401f10100255
26213435272d0121040c0c025521080d0d0255212d18121202552db8fffa
b40c0c02552db8fff6b40d0d02552db8fff4b40f0f02552db8ffec400f10
1002552d0e131302552d0120040f410a03e2001203e2002503e2002803e2
0027003403e2400f3540090d025535360027111d2c0407003fed2f2f3fdd
2bed10ededecec123939012f2b2b2b2b2b2bdd2b2bc010c4c63210c42b2f
2b2b2b2b2bcd2bc410c431302b1bb1060243545840583412101006553512
1010065501200427343536001d2c040711270a02101006550a060f0f0655
0a0c0d0d06550a18021010065518060f0f0655180c0d0d06551818383701
21021010065521060f0f0655210c0d0d0655212db8fff0b4101006552db8
fff2b40f0f06552db8fffcb70d0d06552d2d38371112392f2b2b2bdd2b2b
2bc01112392f2b2b2bcd2b2b2b002f2f3fed3fddcd111239393130012b2b
1b402f38402a350a38600d5d360f250f268038903804b038c038d038032b
0601503860387038903804403801200818291e11b8030f4011222d291e27
4a220a291e104a2321291e26b8030e402e2335272e41341e354401202736
00001d2c04072726261111100a19182409900a01b00a010f0a700a9f0acf
0a040ab802bd40252d0021242e1f2d502d602d702d04802d902d02b02d01
002d102dc02dd02d042d6037a67f182b10f65d5d71723cfd3c10fd5d7172
3cfd3c003f3c103c103c3fed3f3c113939f5edfc01f52b2b2b2b31304379
40141a1c050806251b261c05191c0107081a071d1c012b01103c2b2b2b81
81017172005d015d712b2b59591bb53600270a041db8080a40096c04070f
2528031112b803e2b26c110a00183f2b17323f2b3f3f3031590111363633
321617161511141716163315213533323637363511342626232206071114
1616331521353237363635113426262322072725014d6f82414e701b130e
0a3040fe3e1540320a031f4430316a4a153946fe3a3d2314180f1f1a152f
0e0112058efd627a45565c40aafebc5720181c24242726104e0144965e2f
344ffe1c5e2e1f2424130a3856033d9d481a10237000>MALIFX+TimesNewRomanPSMT AddT42Char 
1 6000 15 <0002fffbffe403b9058e0016002401f6b0852b58b10202435458b11e05b8
fff440101010025505140c00180a0d0d0255180cb8ffe6b4131302550cb8
fffcb40d0d02550cb8fffcb40f0f02550cb8fff4400d101002550c0c1817
0004020913b803e240111440090d02551415001b25090b21590207003fed
3fed3fdd2bed11121739012f2b2b2b2bdd2bc010c62f2bcd31301bb10602
435458402618170003020913141500215902071b25090b1e050526250018
0c0d0d0655180210100655180cb8fff8b40d0d06550cb8ffeeb710100655
0c0c26251112392f2b2bdd2b2bc01112392fcd003fed3fed3fddcd111217
3931301b4079102601a406b606b507ea1f040526430d5d36202675037604
86038704a603ab08074707013a0814270d41131e144418170c00041b1600
102101215902071b25090b1e311f0590050260058005af050305eb0c1600
0018240c0c100d500d700d900d04800d900db00d03000d100d200d300db0
0dc00dd00d070db8ffc0b73c350d6025c24b182b4e10f42b5d71723c4d10
fd3c103c10fd5d72ed003fed3fed723f111739f5edfc01f5313043794028
1920030b072620031e20011a0a181c0019180b0c1c081e20011f04212001
190b1b1c001d061b2000002b2b2b012b103c103c2b2b2b81810071015d2b
005d017259591bb315000221b80817b46c0207091bb807edb26c090b0018
3f2b3f2b3f30315901363332161514070623222627113426262322072725
331111161633323635342623220706013b859a8dd2a28bab50a5560f2018
1c2a0e01132d336d395b9d9d6435352802f6b9f1d1f495803a3a03b59c48
1a102370fd28fddc3233c8bfb0bd1b14>MALIFX+TimesNewRomanPSMT AddT42Char 
MALIFX+TimesNewRomanPSMT /CharStrings get begin
/g11 11 def
/g10 10 def
/g8 8 def
/g30 30 def
/g31 31 def
/g2 2 def
/g19 19 def
/g3 3 def
/g21 21 def
/g15 15 def
end
MALIFX+TimesNewRomanPSMT /Encoding get
dup 57 /g11 put
dup 58 /g10 put
dup 59 /g8 put
dup 60 /g30 put
dup 61 /g31 put
dup 62 /g2 put
dup 63 /g19 put
dup 64 /g3 put
dup 65 /g21 put
dup 66 /g15 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/MALIFX+TimesNewRomanPSMT*1 [33{/.notdef}rp /g33 /g9 /g13 /g5 /g6 /g7 /g16 /g25 /g24 /g28 /g29 /g27 /g14 /g22 /g18 /g17 /g1 /g4 /g26 /g23 /g12 /g20 /g32 /g34 /g11 /g10 /g8 /g30 /g31 /g2 /g19 /g3 /g21 /g15 189{/.notdef}rp]MALIFX+TimesNewRomanPSMT nfMALIFX+TimesNewRomanPSMT*1 [25 0 0 -25 0 0 ]msf420.741 286.32 mo(9-*/1")[16.6252 11.125 9.75018 11.125 4.875 0 ]xsh293.661 83.04 mo(9-*/1:)[16.6252 11.125 9.75018 11.125 6.25 0 ]xsh415.323 256.56 mo(9-*/19)[16.6252 11.125 9.75018 11.125 6.25 0 ]xsh826.85 88.56 mo(9-*/1:;1)[16.6252 11.125 9.75018 11.125 6.25 16.6252 6.875 0 ]xsh826.85 112.56 mo(\(''<3./0)[12.5 11.125 11.125 12.5 12.5 6.875 11.125 0 ]xsh917.1 112.56 mo(2)sh925.35 112.56 mo(=.,+<-4)[12.5 6.875 8.24982 6.87494 12.5001 11.125 0 ]xsh826.85 286.32 mo(9-*/1"1)[16.6252 11.125 9.75018 11.125 4.875 16.625 0 ]xsh903.225 286.32 mo(>?4-+@;1)[8.24976 8.24982 6.87506 11.125 6.875 8.24982 6.875 0 ]xsh826.85 310.32 mo(\(''<3./0)[12.5 11.125 11.125 12.5 12.5 6.875 11.125 0 ]xsh917.1 310.32 mo(2)sh925.35 310.32 mo(\(''<3./0)[12.5 11.125 11.125 12.5 12.5 6.875 11.125 0 ]xsh826.85 226.56 mo(9-*/19;1)[16.6252 11.125 9.75018 11.125 6.25 16.6252 6.875 0 ]xsh826.85 250.56 mo(\(''<3./0)[12.5 11.125 11.125 12.5 12.5 6.875 11.125 0 ]xsh917.1 250.56 mo(2)sh925.35 250.56 mo(A7B,)sh971.099 250.56 mo(.0)[6.875 0 ]xshgrestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/MALIFY+CambriaMath*1 uf/MALIFY+CambriaMath uf/MAAAAA+CambriaMath uf/MALIFZ+TimesNewRomanPS-BoldMT*1 uf/MALIFZ+TimesNewRomanPS-BoldMT uf/OAAAAA+TimesNewRomanPS-BoldMT uf/MALIFX+TimesNewRomanPSMT*1 uf/MALIFX+TimesNewRomanPSMT uf/KAAAAA+TimesNewRomanPSMT ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
